
Ebow_Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fe  00800100  00002acc  00002b60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002acc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e0  008001fe  008001fe  00002c5e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002c5e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002c90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005a0  00000000  00000000  00002cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e35c  00000000  00000000  00003270  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000210c  00000000  00000000  000115cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002172  00000000  00000000  000136d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000016c8  00000000  00000000  0001584c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002d85  00000000  00000000  00016f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000901a  00000000  00000000  00019c99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005a8  00000000  00000000  00022cb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__ctors_end>
       4:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__vector_1>
       8:	0c 94 45 14 	jmp	0x288a	; 0x288a <__vector_2>
       c:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      10:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      14:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      18:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      1c:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      20:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      24:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      28:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      2c:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      30:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      34:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      38:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      3c:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      40:	0c 94 49 0e 	jmp	0x1c92	; 0x1c92 <__vector_16>
      44:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      48:	0c 94 ee 11 	jmp	0x23dc	; 0x23dc <__vector_18>
      4c:	0c 94 26 12 	jmp	0x244c	; 0x244c <__vector_19>
      50:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      54:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      58:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      5c:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      60:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>
      64:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 3e       	cpi	r16, 0xE0	; 224
      6e:	5b 4f       	sbci	r21, 0xFB	; 251
      70:	5b 3e       	cpi	r21, 0xEB	; 235
      72:	3e 6b       	ori	r19, 0xBE	; 190
      74:	4f 6b       	ori	r20, 0xBF	; 191
      76:	3e 1c       	adc	r3, r14
      78:	3e 7c       	andi	r19, 0xCE	; 206
      7a:	3e 1c       	adc	r3, r14
      7c:	18 3c       	cpi	r17, 0xC8	; 200
      7e:	7e 3c       	cpi	r23, 0xCE	; 206
      80:	18 1c       	adc	r1, r8
      82:	57 7d       	andi	r21, 0xD7	; 215
      84:	57 1c       	adc	r5, r7
      86:	1c 5e       	subi	r17, 0xEC	; 236
      88:	7f 5e       	subi	r23, 0xEF	; 239
      8a:	1c 00       	.word	0x001c	; ????
      8c:	18 3c       	cpi	r17, 0xC8	; 200
      8e:	18 00       	.word	0x0018	; ????
      90:	ff e7       	ldi	r31, 0x7F	; 127
      92:	c3 e7       	ldi	r28, 0x73	; 115
      94:	ff 00       	.word	0x00ff	; ????
      96:	18 24       	eor	r1, r8
      98:	18 00       	.word	0x0018	; ????
      9a:	ff e7       	ldi	r31, 0x7F	; 127
      9c:	db e7       	ldi	r29, 0x7B	; 123
      9e:	ff 30       	cpi	r31, 0x0F	; 15
      a0:	48 3a       	cpi	r20, 0xA8	; 168
      a2:	06 0e       	add	r0, r22
      a4:	26 29       	or	r18, r6
      a6:	79 29       	or	r23, r9
      a8:	26 40       	sbci	r18, 0x06	; 6
      aa:	7f 05       	cpc	r23, r15
      ac:	05 07       	cpc	r16, r21
      ae:	40 7f       	andi	r20, 0xF0	; 240
      b0:	05 25       	eor	r16, r5
      b2:	3f 5a       	subi	r19, 0xAF	; 175
      b4:	3c e7       	ldi	r19, 0x7C	; 124
      b6:	3c 5a       	subi	r19, 0xAC	; 172
      b8:	7f 3e       	cpi	r23, 0xEF	; 239
      ba:	1c 1c       	adc	r1, r12
      bc:	08 08       	sbc	r0, r8
      be:	1c 1c       	adc	r1, r12
      c0:	3e 7f       	andi	r19, 0xFE	; 254
      c2:	14 22       	and	r1, r20
      c4:	7f 22       	and	r7, r31
      c6:	14 5f       	subi	r17, 0xF4	; 244
      c8:	5f 00       	.word	0x005f	; ????
      ca:	5f 5f       	subi	r21, 0xFF	; 255
      cc:	06 09       	sbc	r16, r6
      ce:	7f 01       	movw	r14, r30
      d0:	7f 00       	.word	0x007f	; ????
      d2:	66 89       	ldd	r22, Z+22	; 0x16
      d4:	95 6a       	ori	r25, 0xA5	; 165
      d6:	60 60       	ori	r22, 0x00	; 0
      d8:	60 60       	ori	r22, 0x00	; 0
      da:	60 94       	com	r6
      dc:	a2 ff       	sbrs	r26, 2
      de:	a2 94       	swap	r10
      e0:	08 04       	cpc	r0, r8
      e2:	7e 04       	cpc	r7, r14
      e4:	08 10       	cpse	r0, r8
      e6:	20 7e       	andi	r18, 0xE0	; 224
      e8:	20 10       	cpse	r2, r0
      ea:	08 08       	sbc	r0, r8
      ec:	2a 1c       	adc	r2, r10
      ee:	08 08       	sbc	r0, r8
      f0:	1c 2a       	or	r1, r28
      f2:	08 08       	sbc	r0, r8
      f4:	1e 10       	cpse	r1, r14
      f6:	10 10       	cpse	r1, r0
      f8:	10 0c       	add	r1, r0
      fa:	1e 0c       	add	r1, r14
      fc:	1e 0c       	add	r1, r14
      fe:	30 38       	cpi	r19, 0x80	; 128
     100:	3e 38       	cpi	r19, 0x8E	; 142
     102:	30 06       	cpc	r3, r16
     104:	0e 3e       	cpi	r16, 0xEE	; 238
     106:	0e 06       	cpc	r0, r30
     108:	00 00       	nop
     10a:	00 00       	nop
     10c:	00 00       	nop
     10e:	00 5f       	subi	r16, 0xF0	; 240
     110:	00 00       	nop
     112:	00 07       	cpc	r16, r16
     114:	00 07       	cpc	r16, r16
     116:	00 14       	cp	r0, r0
     118:	7f 14       	cp	r7, r15
     11a:	7f 14       	cp	r7, r15
     11c:	24 2a       	or	r2, r20
     11e:	7f 2a       	or	r7, r31
     120:	12 23       	and	r17, r18
     122:	13 08       	sbc	r1, r3
     124:	64 62       	ori	r22, 0x24	; 36
     126:	36 49       	sbci	r19, 0x96	; 150
     128:	56 20       	and	r5, r6
     12a:	50 00       	.word	0x0050	; ????
     12c:	08 07       	cpc	r16, r24
     12e:	03 00       	.word	0x0003	; ????
     130:	00 1c       	adc	r0, r0
     132:	22 41       	sbci	r18, 0x12	; 18
     134:	00 00       	nop
     136:	41 22       	and	r4, r17
     138:	1c 00       	.word	0x001c	; ????
     13a:	2a 1c       	adc	r2, r10
     13c:	7f 1c       	adc	r7, r15
     13e:	2a 08       	sbc	r2, r10
     140:	08 3e       	cpi	r16, 0xE8	; 232
     142:	08 08       	sbc	r0, r8
     144:	00 80       	ld	r0, Z
     146:	70 30       	cpi	r23, 0x00	; 0
     148:	00 08       	sbc	r0, r0
     14a:	08 08       	sbc	r0, r8
     14c:	08 08       	sbc	r0, r8
     14e:	00 00       	nop
     150:	60 60       	ori	r22, 0x00	; 0
     152:	00 20       	and	r0, r0
     154:	10 08       	sbc	r1, r0
     156:	04 02       	muls	r16, r20
     158:	3e 51       	subi	r19, 0x1E	; 30
     15a:	49 45       	sbci	r20, 0x59	; 89
     15c:	3e 00       	.word	0x003e	; ????
     15e:	42 7f       	andi	r20, 0xF2	; 242
     160:	40 00       	.word	0x0040	; ????
     162:	72 49       	sbci	r23, 0x92	; 146
     164:	49 49       	sbci	r20, 0x99	; 153
     166:	46 21       	and	r20, r6
     168:	41 49       	sbci	r20, 0x91	; 145
     16a:	4d 33       	cpi	r20, 0x3D	; 61
     16c:	18 14       	cp	r1, r8
     16e:	12 7f       	andi	r17, 0xF2	; 242
     170:	10 27       	eor	r17, r16
     172:	45 45       	sbci	r20, 0x55	; 85
     174:	45 39       	cpi	r20, 0x95	; 149
     176:	3c 4a       	sbci	r19, 0xAC	; 172
     178:	49 49       	sbci	r20, 0x99	; 153
     17a:	31 41       	sbci	r19, 0x11	; 17
     17c:	21 11       	cpse	r18, r1
     17e:	09 07       	cpc	r16, r25
     180:	36 49       	sbci	r19, 0x96	; 150
     182:	49 49       	sbci	r20, 0x99	; 153
     184:	36 46       	sbci	r19, 0x66	; 102
     186:	49 49       	sbci	r20, 0x99	; 153
     188:	29 1e       	adc	r2, r25
     18a:	00 00       	nop
     18c:	14 00       	.word	0x0014	; ????
     18e:	00 00       	nop
     190:	40 34       	cpi	r20, 0x40	; 64
     192:	00 00       	nop
     194:	00 08       	sbc	r0, r0
     196:	14 22       	and	r1, r20
     198:	41 14       	cp	r4, r1
     19a:	14 14       	cp	r1, r4
     19c:	14 14       	cp	r1, r4
     19e:	00 41       	sbci	r16, 0x10	; 16
     1a0:	22 14       	cp	r2, r2
     1a2:	08 02       	muls	r16, r24
     1a4:	01 59       	subi	r16, 0x91	; 145
     1a6:	09 06       	cpc	r0, r25
     1a8:	3e 41       	sbci	r19, 0x1E	; 30
     1aa:	5d 59       	subi	r21, 0x9D	; 157
     1ac:	4e 7c       	andi	r20, 0xCE	; 206
     1ae:	12 11       	cpse	r17, r2
     1b0:	12 7c       	andi	r17, 0xC2	; 194
     1b2:	7f 49       	sbci	r23, 0x9F	; 159
     1b4:	49 49       	sbci	r20, 0x99	; 153
     1b6:	36 3e       	cpi	r19, 0xE6	; 230
     1b8:	41 41       	sbci	r20, 0x11	; 17
     1ba:	41 22       	and	r4, r17
     1bc:	7f 41       	sbci	r23, 0x1F	; 31
     1be:	41 41       	sbci	r20, 0x11	; 17
     1c0:	3e 7f       	andi	r19, 0xFE	; 254
     1c2:	49 49       	sbci	r20, 0x99	; 153
     1c4:	49 41       	sbci	r20, 0x19	; 25
     1c6:	7f 09       	sbc	r23, r15
     1c8:	09 09       	sbc	r16, r9
     1ca:	01 3e       	cpi	r16, 0xE1	; 225
     1cc:	41 41       	sbci	r20, 0x11	; 17
     1ce:	51 73       	andi	r21, 0x31	; 49
     1d0:	7f 08       	sbc	r7, r15
     1d2:	08 08       	sbc	r0, r8
     1d4:	7f 00       	.word	0x007f	; ????
     1d6:	41 7f       	andi	r20, 0xF1	; 241
     1d8:	41 00       	.word	0x0041	; ????
     1da:	20 40       	sbci	r18, 0x00	; 0
     1dc:	41 3f       	cpi	r20, 0xF1	; 241
     1de:	01 7f       	andi	r16, 0xF1	; 241
     1e0:	08 14       	cp	r0, r8
     1e2:	22 41       	sbci	r18, 0x12	; 18
     1e4:	7f 40       	sbci	r23, 0x0F	; 15
     1e6:	40 40       	sbci	r20, 0x00	; 0
     1e8:	40 7f       	andi	r20, 0xF0	; 240
     1ea:	02 1c       	adc	r0, r2
     1ec:	02 7f       	andi	r16, 0xF2	; 242
     1ee:	7f 04       	cpc	r7, r15
     1f0:	08 10       	cpse	r0, r8
     1f2:	7f 3e       	cpi	r23, 0xEF	; 239
     1f4:	41 41       	sbci	r20, 0x11	; 17
     1f6:	41 3e       	cpi	r20, 0xE1	; 225
     1f8:	7f 09       	sbc	r23, r15
     1fa:	09 09       	sbc	r16, r9
     1fc:	06 3e       	cpi	r16, 0xE6	; 230
     1fe:	41 51       	subi	r20, 0x11	; 17
     200:	21 5e       	subi	r18, 0xE1	; 225
     202:	7f 09       	sbc	r23, r15
     204:	19 29       	or	r17, r9
     206:	46 26       	eor	r4, r22
     208:	49 49       	sbci	r20, 0x99	; 153
     20a:	49 32       	cpi	r20, 0x29	; 41
     20c:	03 01       	movw	r0, r6
     20e:	7f 01       	movw	r14, r30
     210:	03 3f       	cpi	r16, 0xF3	; 243
     212:	40 40       	sbci	r20, 0x00	; 0
     214:	40 3f       	cpi	r20, 0xF0	; 240
     216:	1f 20       	and	r1, r15
     218:	40 20       	and	r4, r0
     21a:	1f 3f       	cpi	r17, 0xFF	; 255
     21c:	40 38       	cpi	r20, 0x80	; 128
     21e:	40 3f       	cpi	r20, 0xF0	; 240
     220:	63 14       	cp	r6, r3
     222:	08 14       	cp	r0, r8
     224:	63 03       	mulsu	r22, r19
     226:	04 78       	andi	r16, 0x84	; 132
     228:	04 03       	mulsu	r16, r20
     22a:	61 59       	subi	r22, 0x91	; 145
     22c:	49 4d       	sbci	r20, 0xD9	; 217
     22e:	43 00       	.word	0x0043	; ????
     230:	7f 41       	sbci	r23, 0x1F	; 31
     232:	41 41       	sbci	r20, 0x11	; 17
     234:	02 04       	cpc	r0, r2
     236:	08 10       	cpse	r0, r8
     238:	20 00       	.word	0x0020	; ????
     23a:	41 41       	sbci	r20, 0x11	; 17
     23c:	41 7f       	andi	r20, 0xF1	; 241
     23e:	04 02       	muls	r16, r20
     240:	01 02       	muls	r16, r17
     242:	04 40       	sbci	r16, 0x04	; 4
     244:	40 40       	sbci	r20, 0x00	; 0
     246:	40 40       	sbci	r20, 0x00	; 0
     248:	00 03       	mulsu	r16, r16
     24a:	07 08       	sbc	r0, r7
     24c:	00 20       	and	r0, r0
     24e:	54 54       	subi	r21, 0x44	; 68
     250:	78 40       	sbci	r23, 0x08	; 8
     252:	7f 28       	or	r7, r15
     254:	44 44       	sbci	r20, 0x44	; 68
     256:	38 38       	cpi	r19, 0x88	; 136
     258:	44 44       	sbci	r20, 0x44	; 68
     25a:	44 28       	or	r4, r4
     25c:	38 44       	sbci	r19, 0x48	; 72
     25e:	44 28       	or	r4, r4
     260:	7f 38       	cpi	r23, 0x8F	; 143
     262:	54 54       	subi	r21, 0x44	; 68
     264:	54 18       	sub	r5, r4
     266:	00 08       	sbc	r0, r0
     268:	7e 09       	sbc	r23, r14
     26a:	02 18       	sub	r0, r2
     26c:	a4 a4       	ldd	r10, Z+44	; 0x2c
     26e:	9c 78       	andi	r25, 0x8C	; 140
     270:	7f 08       	sbc	r7, r15
     272:	04 04       	cpc	r0, r4
     274:	78 00       	.word	0x0078	; ????
     276:	44 7d       	andi	r20, 0xD4	; 212
     278:	40 00       	.word	0x0040	; ????
     27a:	20 40       	sbci	r18, 0x00	; 0
     27c:	40 3d       	cpi	r20, 0xD0	; 208
     27e:	00 7f       	andi	r16, 0xF0	; 240
     280:	10 28       	or	r1, r0
     282:	44 00       	.word	0x0044	; ????
     284:	00 41       	sbci	r16, 0x10	; 16
     286:	7f 40       	sbci	r23, 0x0F	; 15
     288:	00 7c       	andi	r16, 0xC0	; 192
     28a:	04 78       	andi	r16, 0x84	; 132
     28c:	04 78       	andi	r16, 0x84	; 132
     28e:	7c 08       	sbc	r7, r12
     290:	04 04       	cpc	r0, r4
     292:	78 38       	cpi	r23, 0x88	; 136
     294:	44 44       	sbci	r20, 0x44	; 68
     296:	44 38       	cpi	r20, 0x84	; 132
     298:	fc 18       	sub	r15, r12
     29a:	24 24       	eor	r2, r4
     29c:	18 18       	sub	r1, r8
     29e:	24 24       	eor	r2, r4
     2a0:	18 fc       	.word	0xfc18	; ????
     2a2:	7c 08       	sbc	r7, r12
     2a4:	04 04       	cpc	r0, r4
     2a6:	08 48       	sbci	r16, 0x88	; 136
     2a8:	54 54       	subi	r21, 0x44	; 68
     2aa:	54 24       	eor	r5, r4
     2ac:	04 04       	cpc	r0, r4
     2ae:	3f 44       	sbci	r19, 0x4F	; 79
     2b0:	24 3c       	cpi	r18, 0xC4	; 196
     2b2:	40 40       	sbci	r20, 0x00	; 0
     2b4:	20 7c       	andi	r18, 0xC0	; 192
     2b6:	1c 20       	and	r1, r12
     2b8:	40 20       	and	r4, r0
     2ba:	1c 3c       	cpi	r17, 0xCC	; 204
     2bc:	40 30       	cpi	r20, 0x00	; 0
     2be:	40 3c       	cpi	r20, 0xC0	; 192
     2c0:	44 28       	or	r4, r4
     2c2:	10 28       	or	r1, r0
     2c4:	44 4c       	sbci	r20, 0xC4	; 196
     2c6:	90 90 90 7c 	lds	r9, 0x7C90
     2ca:	44 64       	ori	r20, 0x44	; 68
     2cc:	54 4c       	sbci	r21, 0xC4	; 196
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	08 36       	cpi	r16, 0x68	; 104
     2d2:	41 00       	.word	0x0041	; ????
     2d4:	00 00       	nop
     2d6:	77 00       	.word	0x0077	; ????
     2d8:	00 00       	nop
     2da:	41 36       	cpi	r20, 0x61	; 97
     2dc:	08 00       	.word	0x0008	; ????
     2de:	02 01       	movw	r0, r4
     2e0:	02 04       	cpc	r0, r2
     2e2:	02 3c       	cpi	r16, 0xC2	; 194
     2e4:	26 23       	and	r18, r22
     2e6:	26 3c       	cpi	r18, 0xC6	; 198
     2e8:	1e a1       	ldd	r17, Y+38	; 0x26
     2ea:	a1 61       	ori	r26, 0x11	; 17
     2ec:	12 3a       	cpi	r17, 0xA2	; 162
     2ee:	40 40       	sbci	r20, 0x00	; 0
     2f0:	20 7a       	andi	r18, 0xA0	; 160
     2f2:	38 54       	subi	r19, 0x48	; 72
     2f4:	54 55       	subi	r21, 0x54	; 84
     2f6:	59 21       	and	r21, r9
     2f8:	55 55       	subi	r21, 0x55	; 85
     2fa:	79 41       	sbci	r23, 0x19	; 25
     2fc:	22 54       	subi	r18, 0x42	; 66
     2fe:	54 78       	andi	r21, 0x84	; 132
     300:	42 21       	and	r20, r2
     302:	55 54       	subi	r21, 0x45	; 69
     304:	78 40       	sbci	r23, 0x08	; 8
     306:	20 54       	subi	r18, 0x40	; 64
     308:	55 79       	andi	r21, 0x95	; 149
     30a:	40 0c       	add	r4, r0
     30c:	1e 52       	subi	r17, 0x2E	; 46
     30e:	72 12       	cpse	r7, r18
     310:	39 55       	subi	r19, 0x59	; 89
     312:	55 55       	subi	r21, 0x55	; 85
     314:	59 39       	cpi	r21, 0x99	; 153
     316:	54 54       	subi	r21, 0x44	; 68
     318:	54 59       	subi	r21, 0x94	; 148
     31a:	39 55       	subi	r19, 0x59	; 89
     31c:	54 54       	subi	r21, 0x44	; 68
     31e:	58 00       	.word	0x0058	; ????
     320:	00 45       	sbci	r16, 0x50	; 80
     322:	7c 41       	sbci	r23, 0x1C	; 28
     324:	00 02       	muls	r16, r16
     326:	45 7d       	andi	r20, 0xD5	; 213
     328:	42 00       	.word	0x0042	; ????
     32a:	01 45       	sbci	r16, 0x51	; 81
     32c:	7c 40       	sbci	r23, 0x0C	; 12
     32e:	7d 12       	cpse	r7, r29
     330:	11 12       	cpse	r1, r17
     332:	7d f0       	brhs	.+30     	; 0x352 <__trampolines_end+0x2ea>
     334:	28 25       	eor	r18, r8
     336:	28 f0       	brcs	.+10     	; 0x342 <__trampolines_end+0x2da>
     338:	7c 54       	subi	r23, 0x4C	; 76
     33a:	55 45       	sbci	r21, 0x55	; 85
     33c:	00 20       	and	r0, r0
     33e:	54 54       	subi	r21, 0x44	; 68
     340:	7c 54       	subi	r23, 0x4C	; 76
     342:	7c 0a       	sbc	r7, r28
     344:	09 7f       	andi	r16, 0xF9	; 249
     346:	49 32       	cpi	r20, 0x29	; 41
     348:	49 49       	sbci	r20, 0x99	; 153
     34a:	49 32       	cpi	r20, 0x29	; 41
     34c:	3a 44       	sbci	r19, 0x4A	; 74
     34e:	44 44       	sbci	r20, 0x44	; 68
     350:	3a 32       	cpi	r19, 0x2A	; 42
     352:	4a 48       	sbci	r20, 0x8A	; 138
     354:	48 30       	cpi	r20, 0x08	; 8
     356:	3a 41       	sbci	r19, 0x1A	; 26
     358:	41 21       	and	r20, r1
     35a:	7a 3a       	cpi	r23, 0xAA	; 170
     35c:	42 40       	sbci	r20, 0x02	; 2
     35e:	20 78       	andi	r18, 0x80	; 128
     360:	00 9d       	mul	r16, r0
     362:	a0 a0       	ldd	r10, Z+32	; 0x20
     364:	7d 3d       	cpi	r23, 0xDD	; 221
     366:	42 42       	sbci	r20, 0x22	; 34
     368:	42 3d       	cpi	r20, 0xD2	; 210
     36a:	3d 40       	sbci	r19, 0x0D	; 13
     36c:	40 40       	sbci	r20, 0x00	; 0
     36e:	3d 3c       	cpi	r19, 0xCD	; 205
     370:	24 ff       	sbrs	r18, 4
     372:	24 24       	eor	r2, r4
     374:	48 7e       	andi	r20, 0xE8	; 232
     376:	49 43       	sbci	r20, 0x39	; 57
     378:	66 2b       	or	r22, r22
     37a:	2f fc       	.word	0xfc2f	; ????
     37c:	2f 2b       	or	r18, r31
     37e:	ff 09       	sbc	r31, r15
     380:	29 f6       	brne	.-118    	; 0x30c <__trampolines_end+0x2a4>
     382:	20 c0       	rjmp	.+64     	; 0x3c4 <__trampolines_end+0x35c>
     384:	88 7e       	andi	r24, 0xE8	; 232
     386:	09 03       	fmul	r16, r17
     388:	20 54       	subi	r18, 0x40	; 64
     38a:	54 79       	andi	r21, 0x94	; 148
     38c:	41 00       	.word	0x0041	; ????
     38e:	00 44       	sbci	r16, 0x40	; 64
     390:	7d 41       	sbci	r23, 0x1D	; 29
     392:	30 48       	sbci	r19, 0x80	; 128
     394:	48 4a       	sbci	r20, 0xA8	; 168
     396:	32 38       	cpi	r19, 0x82	; 130
     398:	40 40       	sbci	r20, 0x00	; 0
     39a:	22 7a       	andi	r18, 0xA2	; 162
     39c:	00 7a       	andi	r16, 0xA0	; 160
     39e:	0a 0a       	sbc	r0, r26
     3a0:	72 7d       	andi	r23, 0xD2	; 210
     3a2:	0d 19       	sub	r16, r13
     3a4:	31 7d       	andi	r19, 0xD1	; 209
     3a6:	26 29       	or	r18, r6
     3a8:	29 2f       	mov	r18, r25
     3aa:	28 26       	eor	r2, r24
     3ac:	29 29       	or	r18, r9
     3ae:	29 26       	eor	r2, r25
     3b0:	30 48       	sbci	r19, 0x80	; 128
     3b2:	4d 40       	sbci	r20, 0x0D	; 13
     3b4:	20 38       	cpi	r18, 0x80	; 128
     3b6:	08 08       	sbc	r0, r8
     3b8:	08 08       	sbc	r0, r8
     3ba:	08 08       	sbc	r0, r8
     3bc:	08 08       	sbc	r0, r8
     3be:	38 2f       	mov	r19, r24
     3c0:	10 c8       	rjmp	.-4064   	; 0xfffff3e2 <__eeprom_end+0xff7ef3e2>
     3c2:	ac ba       	out	0x1c, r10	; 28
     3c4:	2f 10       	cpse	r2, r15
     3c6:	28 34       	cpi	r18, 0x48	; 72
     3c8:	fa 00       	.word	0x00fa	; ????
     3ca:	00 7b       	andi	r16, 0xB0	; 176
     3cc:	00 00       	nop
     3ce:	08 14       	cp	r0, r8
     3d0:	2a 14       	cp	r2, r10
     3d2:	22 22       	and	r2, r18
     3d4:	14 2a       	or	r1, r20
     3d6:	14 08       	sbc	r1, r4
     3d8:	55 00       	.word	0x0055	; ????
     3da:	55 00       	.word	0x0055	; ????
     3dc:	55 aa       	std	Z+53, r5	; 0x35
     3de:	55 aa       	std	Z+53, r5	; 0x35
     3e0:	55 aa       	std	Z+53, r5	; 0x35
     3e2:	ff 55       	subi	r31, 0x5F	; 95
     3e4:	ff 55       	subi	r31, 0x5F	; 95
     3e6:	ff 00       	.word	0x00ff	; ????
     3e8:	00 00       	nop
     3ea:	ff 00       	.word	0x00ff	; ????
     3ec:	10 10       	cpse	r1, r0
     3ee:	10 ff       	sbrs	r17, 0
     3f0:	00 14       	cp	r0, r0
     3f2:	14 14       	cp	r1, r4
     3f4:	ff 00       	.word	0x00ff	; ????
     3f6:	10 10       	cpse	r1, r0
     3f8:	ff 00       	.word	0x00ff	; ????
     3fa:	ff 10       	cpse	r15, r15
     3fc:	10 f0       	brcs	.+4      	; 0x402 <__trampolines_end+0x39a>
     3fe:	10 f0       	brcs	.+4      	; 0x404 <__trampolines_end+0x39c>
     400:	14 14       	cp	r1, r4
     402:	14 fc       	sbrc	r1, 4
     404:	00 14       	cp	r0, r0
     406:	14 f7       	brge	.-60     	; 0x3cc <__trampolines_end+0x364>
     408:	00 ff       	sbrs	r16, 0
     40a:	00 00       	nop
     40c:	ff 00       	.word	0x00ff	; ????
     40e:	ff 14       	cp	r15, r15
     410:	14 f4       	brge	.+4      	; 0x416 <__trampolines_end+0x3ae>
     412:	04 fc       	sbrc	r0, 4
     414:	14 14       	cp	r1, r4
     416:	17 10       	cpse	r1, r7
     418:	1f 10       	cpse	r1, r15
     41a:	10 1f       	adc	r17, r16
     41c:	10 1f       	adc	r17, r16
     41e:	14 14       	cp	r1, r4
     420:	14 1f       	adc	r17, r20
     422:	00 10       	cpse	r0, r0
     424:	10 10       	cpse	r1, r0
     426:	f0 00       	.word	0x00f0	; ????
     428:	00 00       	nop
     42a:	00 1f       	adc	r16, r16
     42c:	10 10       	cpse	r1, r0
     42e:	10 10       	cpse	r1, r0
     430:	1f 10       	cpse	r1, r15
     432:	10 10       	cpse	r1, r0
     434:	10 f0       	brcs	.+4      	; 0x43a <__trampolines_end+0x3d2>
     436:	10 00       	.word	0x0010	; ????
     438:	00 00       	nop
     43a:	ff 10       	cpse	r15, r15
     43c:	10 10       	cpse	r1, r0
     43e:	10 10       	cpse	r1, r0
     440:	10 10       	cpse	r1, r0
     442:	10 10       	cpse	r1, r0
     444:	ff 10       	cpse	r15, r15
     446:	00 00       	nop
     448:	00 ff       	sbrs	r16, 0
     44a:	14 00       	.word	0x0014	; ????
     44c:	00 ff       	sbrs	r16, 0
     44e:	00 ff       	sbrs	r16, 0
     450:	00 00       	nop
     452:	1f 10       	cpse	r1, r15
     454:	17 00       	.word	0x0017	; ????
     456:	00 fc       	sbrc	r0, 0
     458:	04 f4       	brge	.+0      	; 0x45a <__trampolines_end+0x3f2>
     45a:	14 14       	cp	r1, r4
     45c:	17 10       	cpse	r1, r7
     45e:	17 14       	cp	r1, r7
     460:	14 f4       	brge	.+4      	; 0x466 <__trampolines_end+0x3fe>
     462:	04 f4       	brge	.+0      	; 0x464 <__trampolines_end+0x3fc>
     464:	00 00       	nop
     466:	ff 00       	.word	0x00ff	; ????
     468:	f7 14       	cp	r15, r7
     46a:	14 14       	cp	r1, r4
     46c:	14 14       	cp	r1, r4
     46e:	14 14       	cp	r1, r4
     470:	f7 00       	.word	0x00f7	; ????
     472:	f7 14       	cp	r15, r7
     474:	14 14       	cp	r1, r4
     476:	17 14       	cp	r1, r7
     478:	10 10       	cpse	r1, r0
     47a:	1f 10       	cpse	r1, r15
     47c:	1f 14       	cp	r1, r15
     47e:	14 14       	cp	r1, r4
     480:	f4 14       	cp	r15, r4
     482:	10 10       	cpse	r1, r0
     484:	f0 10       	cpse	r15, r0
     486:	f0 00       	.word	0x00f0	; ????
     488:	00 1f       	adc	r16, r16
     48a:	10 1f       	adc	r17, r16
     48c:	00 00       	nop
     48e:	00 1f       	adc	r16, r16
     490:	14 00       	.word	0x0014	; ????
     492:	00 00       	nop
     494:	fc 14       	cp	r15, r12
     496:	00 00       	nop
     498:	f0 10       	cpse	r15, r0
     49a:	f0 10       	cpse	r15, r0
     49c:	10 ff       	sbrs	r17, 0
     49e:	10 ff       	sbrs	r17, 0
     4a0:	14 14       	cp	r1, r4
     4a2:	14 ff       	sbrs	r17, 4
     4a4:	14 10       	cpse	r1, r4
     4a6:	10 10       	cpse	r1, r0
     4a8:	1f 00       	.word	0x001f	; ????
     4aa:	00 00       	nop
     4ac:	00 f0       	brcs	.+0      	; 0x4ae <__trampolines_end+0x446>
     4ae:	10 ff       	sbrs	r17, 0
     4b0:	ff ff       	.word	0xffff	; ????
     4b2:	ff ff       	.word	0xffff	; ????
     4b4:	f0 f0       	brcs	.+60     	; 0x4f2 <__trampolines_end+0x48a>
     4b6:	f0 f0       	brcs	.+60     	; 0x4f4 <__trampolines_end+0x48c>
     4b8:	f0 ff       	sbrs	r31, 0
     4ba:	ff ff       	.word	0xffff	; ????
     4bc:	00 00       	nop
     4be:	00 00       	nop
     4c0:	00 ff       	sbrs	r16, 0
     4c2:	ff 0f       	add	r31, r31
     4c4:	0f 0f       	add	r16, r31
     4c6:	0f 0f       	add	r16, r31
     4c8:	38 44       	sbci	r19, 0x48	; 72
     4ca:	44 38       	cpi	r20, 0x84	; 132
     4cc:	44 fc       	sbrc	r4, 4
     4ce:	4a 4a       	sbci	r20, 0xAA	; 170
     4d0:	4a 34       	cpi	r20, 0x4A	; 74
     4d2:	7e 02       	muls	r23, r30
     4d4:	02 06       	cpc	r0, r18
     4d6:	06 02       	muls	r16, r22
     4d8:	7e 02       	muls	r23, r30
     4da:	7e 02       	muls	r23, r30
     4dc:	63 55       	subi	r22, 0x53	; 83
     4de:	49 41       	sbci	r20, 0x19	; 25
     4e0:	63 38       	cpi	r22, 0x83	; 131
     4e2:	44 44       	sbci	r20, 0x44	; 68
     4e4:	3c 04       	cpc	r3, r12
     4e6:	40 7e       	andi	r20, 0xE0	; 224
     4e8:	20 1e       	adc	r2, r16
     4ea:	20 06       	cpc	r2, r16
     4ec:	02 7e       	andi	r16, 0xE2	; 226
     4ee:	02 02       	muls	r16, r18
     4f0:	99 a5       	ldd	r25, Y+41	; 0x29
     4f2:	e7 a5       	ldd	r30, Z+47	; 0x2f
     4f4:	99 1c       	adc	r9, r9
     4f6:	2a 49       	sbci	r18, 0x9A	; 154
     4f8:	2a 1c       	adc	r2, r10
     4fa:	4c 72       	andi	r20, 0x2C	; 44
     4fc:	01 72       	andi	r16, 0x21	; 33
     4fe:	4c 30       	cpi	r20, 0x0C	; 12
     500:	4a 4d       	sbci	r20, 0xDA	; 218
     502:	4d 30       	cpi	r20, 0x0D	; 13
     504:	30 48       	sbci	r19, 0x80	; 128
     506:	78 48       	sbci	r23, 0x88	; 136
     508:	30 bc       	out	0x20, r3	; 32
     50a:	62 5a       	subi	r22, 0xA2	; 162
     50c:	46 3d       	cpi	r20, 0xD6	; 214
     50e:	3e 49       	sbci	r19, 0x9E	; 158
     510:	49 49       	sbci	r20, 0x99	; 153
     512:	00 7e       	andi	r16, 0xE0	; 224
     514:	01 01       	movw	r0, r2
     516:	01 7e       	andi	r16, 0xE1	; 225
     518:	2a 2a       	or	r2, r26
     51a:	2a 2a       	or	r2, r26
     51c:	2a 44       	sbci	r18, 0x4A	; 74
     51e:	44 5f       	subi	r20, 0xF4	; 244
     520:	44 44       	sbci	r20, 0x44	; 68
     522:	40 51       	subi	r20, 0x10	; 16
     524:	4a 44       	sbci	r20, 0x4A	; 74
     526:	40 40       	sbci	r20, 0x00	; 0
     528:	44 4a       	sbci	r20, 0xA4	; 164
     52a:	51 40       	sbci	r21, 0x01	; 1
     52c:	00 00       	nop
     52e:	ff 01       	movw	r30, r30
     530:	03 e0       	ldi	r16, 0x03	; 3
     532:	80 ff       	sbrs	r24, 0
     534:	00 00       	nop
     536:	08 08       	sbc	r0, r8
     538:	6b 6b       	ori	r22, 0xBB	; 187
     53a:	08 36       	cpi	r16, 0x68	; 104
     53c:	12 36       	cpi	r17, 0x62	; 98
     53e:	24 36       	cpi	r18, 0x64	; 100
     540:	06 0f       	add	r16, r22
     542:	09 0f       	add	r16, r25
     544:	06 00       	.word	0x0006	; ????
     546:	00 18       	sub	r0, r0
     548:	18 00       	.word	0x0018	; ????
     54a:	00 00       	nop
     54c:	10 10       	cpse	r1, r0
     54e:	00 30       	cpi	r16, 0x00	; 0
     550:	40 ff       	sbrs	r20, 0
     552:	01 01       	movw	r0, r2
     554:	00 1f       	adc	r16, r16
     556:	01 01       	movw	r0, r2
     558:	1e 00       	.word	0x001e	; ????
     55a:	19 1d       	adc	r17, r9
     55c:	17 12       	cpse	r1, r23
     55e:	00 3c       	cpi	r16, 0xC0	; 192
     560:	3c 3c       	cpi	r19, 0xCC	; 204
     562:	3c 00       	.word	0x003c	; ????
     564:	00 00       	nop
	...

00000568 <_ZZ10LCDdisplayiiE3__c_0>:
     568:	44 6f 6e 65 21 00                                   Done!.

0000056e <_ZZ10LCDdisplayiiE3__c>:
     56e:	54 65 73 74 20 00                                   Test .

00000574 <digital_pin_to_timer_PGM>:
     574:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     584:	00 00 00 00                                         ....

00000588 <digital_pin_to_bit_mask_PGM>:
     588:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     598:	04 08 10 20                                         ... 

0000059c <digital_pin_to_port_PGM>:
     59c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     5ac:	03 03 03 03                                         ....

000005b0 <port_to_output_PGM>:
     5b0:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000005ba <port_to_mode_PGM>:
     5ba:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000005c4 <__ctors_start>:
     5c4:	b8 0b       	sbc	r27, r24
     5c6:	4c 12       	cpse	r4, r28
     5c8:	bb 12       	cpse	r11, r27

000005ca <__ctors_end>:
     5ca:	11 24       	eor	r1, r1
     5cc:	1f be       	out	0x3f, r1	; 63
     5ce:	cf ef       	ldi	r28, 0xFF	; 255
     5d0:	d8 e0       	ldi	r29, 0x08	; 8
     5d2:	de bf       	out	0x3e, r29	; 62
     5d4:	cd bf       	out	0x3d, r28	; 61

000005d6 <__do_copy_data>:
     5d6:	11 e0       	ldi	r17, 0x01	; 1
     5d8:	a0 e0       	ldi	r26, 0x00	; 0
     5da:	b1 e0       	ldi	r27, 0x01	; 1
     5dc:	ec ec       	ldi	r30, 0xCC	; 204
     5de:	fa e2       	ldi	r31, 0x2A	; 42
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <__do_copy_data+0x10>
     5e2:	05 90       	lpm	r0, Z+
     5e4:	0d 92       	st	X+, r0
     5e6:	ae 3f       	cpi	r26, 0xFE	; 254
     5e8:	b1 07       	cpc	r27, r17
     5ea:	d9 f7       	brne	.-10     	; 0x5e2 <__do_copy_data+0xc>

000005ec <__do_clear_bss>:
     5ec:	22 e0       	ldi	r18, 0x02	; 2
     5ee:	ae ef       	ldi	r26, 0xFE	; 254
     5f0:	b1 e0       	ldi	r27, 0x01	; 1
     5f2:	01 c0       	rjmp	.+2      	; 0x5f6 <.do_clear_bss_start>

000005f4 <.do_clear_bss_loop>:
     5f4:	1d 92       	st	X+, r1

000005f6 <.do_clear_bss_start>:
     5f6:	ae 3d       	cpi	r26, 0xDE	; 222
     5f8:	b2 07       	cpc	r27, r18
     5fa:	e1 f7       	brne	.-8      	; 0x5f4 <.do_clear_bss_loop>

000005fc <__do_global_ctors>:
     5fc:	12 e0       	ldi	r17, 0x02	; 2
     5fe:	c5 ee       	ldi	r28, 0xE5	; 229
     600:	d2 e0       	ldi	r29, 0x02	; 2
     602:	04 c0       	rjmp	.+8      	; 0x60c <__do_global_ctors+0x10>
     604:	21 97       	sbiw	r28, 0x01	; 1
     606:	fe 01       	movw	r30, r28
     608:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <__tablejump2__>
     60c:	c2 3e       	cpi	r28, 0xE2	; 226
     60e:	d1 07       	cpc	r29, r17
     610:	c9 f7       	brne	.-14     	; 0x604 <__do_global_ctors+0x8>
     612:	0e 94 ac 10 	call	0x2158	; 0x2158 <main>
     616:	0c 94 64 15 	jmp	0x2ac8	; 0x2ac8 <_exit>

0000061a <__bad_interrupt>:
     61a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000061e <_ZN12Adafruit_GFX8drawLineEiiiij>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
     61e:	2f 92       	push	r2
     620:	3f 92       	push	r3
     622:	4f 92       	push	r4
     624:	5f 92       	push	r5
     626:	6f 92       	push	r6
     628:	7f 92       	push	r7
     62a:	8f 92       	push	r8
     62c:	9f 92       	push	r9
     62e:	af 92       	push	r10
     630:	bf 92       	push	r11
     632:	cf 92       	push	r12
     634:	df 92       	push	r13
     636:	ef 92       	push	r14
     638:	ff 92       	push	r15
     63a:	0f 93       	push	r16
     63c:	1f 93       	push	r17
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	00 d0       	rcall	.+0      	; 0x644 <_ZN12Adafruit_GFX8drawLineEiiiij+0x26>
     644:	00 d0       	rcall	.+0      	; 0x646 <_ZN12Adafruit_GFX8drawLineEiiiij+0x28>
     646:	cd b7       	in	r28, 0x3d	; 61
     648:	de b7       	in	r29, 0x3e	; 62
     64a:	5c 01       	movw	r10, r24
     64c:	7c 83       	std	Y+4, r23	; 0x04
     64e:	6b 83       	std	Y+3, r22	; 0x03
     650:	6a 01       	movw	r12, r20
     652:	49 01       	movw	r8, r18
     654:	fa 82       	std	Y+2, r15	; 0x02
     656:	e9 82       	std	Y+1, r14	; 0x01
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
     658:	c8 01       	movw	r24, r16
     65a:	84 1b       	sub	r24, r20
     65c:	95 0b       	sbc	r25, r21
     65e:	9c 01       	movw	r18, r24
     660:	22 f4       	brpl	.+8      	; 0x66a <_ZN12Adafruit_GFX8drawLineEiiiij+0x4c>
     662:	22 27       	eor	r18, r18
     664:	33 27       	eor	r19, r19
     666:	28 1b       	sub	r18, r24
     668:	39 0b       	sbc	r19, r25
     66a:	a4 01       	movw	r20, r8
     66c:	8b 81       	ldd	r24, Y+3	; 0x03
     66e:	9c 81       	ldd	r25, Y+4	; 0x04
     670:	48 1b       	sub	r20, r24
     672:	59 0b       	sbc	r21, r25
     674:	ca 01       	movw	r24, r20
     676:	99 23       	and	r25, r25
     678:	24 f4       	brge	.+8      	; 0x682 <_ZN12Adafruit_GFX8drawLineEiiiij+0x64>
     67a:	88 27       	eor	r24, r24
     67c:	99 27       	eor	r25, r25
     67e:	84 1b       	sub	r24, r20
     680:	95 0b       	sbc	r25, r21
     682:	51 e0       	ldi	r21, 0x01	; 1
     684:	40 e0       	ldi	r20, 0x00	; 0
     686:	82 17       	cp	r24, r18
     688:	93 07       	cpc	r25, r19
     68a:	0c f0       	brlt	.+2      	; 0x68e <_ZN12Adafruit_GFX8drawLineEiiiij+0x70>
     68c:	50 e0       	ldi	r21, 0x00	; 0
     68e:	65 2e       	mov	r6, r21
     690:	74 2e       	mov	r7, r20
  if (steep) {
     692:	61 14       	cp	r6, r1
     694:	71 04       	cpc	r7, r1
     696:	59 f0       	breq	.+22     	; 0x6ae <_ZN12Adafruit_GFX8drawLineEiiiij+0x90>
     698:	98 2d       	mov	r25, r8
     69a:	89 2d       	mov	r24, r9
    swap(x0, y0);
    swap(x1, y1);
     69c:	48 01       	movw	r8, r16
     69e:	09 2f       	mov	r16, r25
     6a0:	18 2f       	mov	r17, r24
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
     6a2:	9b 81       	ldd	r25, Y+3	; 0x03
     6a4:	8c 81       	ldd	r24, Y+4	; 0x04
    swap(x0, y0);
     6a6:	dc 82       	std	Y+4, r13	; 0x04
     6a8:	cb 82       	std	Y+3, r12	; 0x03
     6aa:	c9 2e       	mov	r12, r25
     6ac:	d8 2e       	mov	r13, r24
    swap(x1, y1);
  }

  if (x0 > x1) {
     6ae:	ab 81       	ldd	r26, Y+3	; 0x03
     6b0:	bc 81       	ldd	r27, Y+4	; 0x04
     6b2:	8a 16       	cp	r8, r26
     6b4:	9b 06       	cpc	r9, r27
     6b6:	0c f0       	brlt	.+2      	; 0x6ba <_ZN12Adafruit_GFX8drawLineEiiiij+0x9c>
     6b8:	45 c0       	rjmp	.+138    	; 0x744 <_ZN12Adafruit_GFX8drawLineEiiiij+0x126>
     6ba:	9c 2d       	mov	r25, r12
     6bc:	8d 2d       	mov	r24, r13
    swap(x0, x1);
    swap(y0, y1);
     6be:	68 01       	movw	r12, r16
     6c0:	09 2f       	mov	r16, r25
     6c2:	18 2f       	mov	r17, r24
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
     6c4:	9b 81       	ldd	r25, Y+3	; 0x03
     6c6:	8c 81       	ldd	r24, Y+4	; 0x04
    swap(x0, x1);
     6c8:	9c 82       	std	Y+4, r9	; 0x04
     6ca:	8b 82       	std	Y+3, r8	; 0x03
     6cc:	89 2e       	mov	r8, r25
     6ce:	98 2e       	mov	r9, r24
     6d0:	39 c0       	rjmp	.+114    	; 0x744 <_ZN12Adafruit_GFX8drawLineEiiiij+0x126>
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
     6d2:	eb 81       	ldd	r30, Y+3	; 0x03
     6d4:	fc 81       	ldd	r31, Y+4	; 0x04
     6d6:	8e 16       	cp	r8, r30
     6d8:	9f 06       	cpc	r9, r31
     6da:	0c f4       	brge	.+2      	; 0x6de <_ZN12Adafruit_GFX8drawLineEiiiij+0xc0>
     6dc:	4e c0       	rjmp	.+156    	; 0x77a <_ZN12Adafruit_GFX8drawLineEiiiij+0x15c>
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
     6de:	0f ef       	ldi	r16, 0xFF	; 255
     6e0:	1f ef       	ldi	r17, 0xFF	; 255
     6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <_ZN12Adafruit_GFX8drawLineEiiiij+0xca>

  int16_t err = dx / 2;
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
     6e4:	01 e0       	ldi	r16, 0x01	; 1
     6e6:	10 e0       	ldi	r17, 0x00	; 0
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
    if (steep) {
     6e8:	61 14       	cp	r6, r1
     6ea:	71 04       	cpc	r7, r1
     6ec:	71 f0       	breq	.+28     	; 0x70a <_ZN12Adafruit_GFX8drawLineEiiiij+0xec>
      drawPixel(y0, x0, color);
     6ee:	d5 01       	movw	r26, r10
     6f0:	ed 91       	ld	r30, X+
     6f2:	fc 91       	ld	r31, X
     6f4:	04 80       	ldd	r0, Z+4	; 0x04
     6f6:	f5 81       	ldd	r31, Z+5	; 0x05
     6f8:	e0 2d       	mov	r30, r0
     6fa:	29 81       	ldd	r18, Y+1	; 0x01
     6fc:	3a 81       	ldd	r19, Y+2	; 0x02
     6fe:	4b 81       	ldd	r20, Y+3	; 0x03
     700:	5c 81       	ldd	r21, Y+4	; 0x04
     702:	b6 01       	movw	r22, r12
     704:	c5 01       	movw	r24, r10
     706:	09 95       	icall
     708:	0d c0       	rjmp	.+26     	; 0x724 <_ZN12Adafruit_GFX8drawLineEiiiij+0x106>
    } else {
      drawPixel(x0, y0, color);
     70a:	d5 01       	movw	r26, r10
     70c:	ed 91       	ld	r30, X+
     70e:	fc 91       	ld	r31, X
     710:	04 80       	ldd	r0, Z+4	; 0x04
     712:	f5 81       	ldd	r31, Z+5	; 0x05
     714:	e0 2d       	mov	r30, r0
     716:	29 81       	ldd	r18, Y+1	; 0x01
     718:	3a 81       	ldd	r19, Y+2	; 0x02
     71a:	a6 01       	movw	r20, r12
     71c:	6b 81       	ldd	r22, Y+3	; 0x03
     71e:	7c 81       	ldd	r23, Y+4	; 0x04
     720:	c5 01       	movw	r24, r10
     722:	09 95       	icall
    }
    err -= dy;
     724:	e4 18       	sub	r14, r4
     726:	f5 08       	sbc	r15, r5
    if (err < 0) {
     728:	22 f4       	brpl	.+8      	; 0x732 <_ZN12Adafruit_GFX8drawLineEiiiij+0x114>
      y0 += ystep;
     72a:	c0 0e       	add	r12, r16
     72c:	d1 1e       	adc	r13, r17
      err += dx;
     72e:	e2 0c       	add	r14, r2
     730:	f3 1c       	adc	r15, r3
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
     732:	eb 81       	ldd	r30, Y+3	; 0x03
     734:	fc 81       	ldd	r31, Y+4	; 0x04
     736:	31 96       	adiw	r30, 0x01	; 1
     738:	fc 83       	std	Y+4, r31	; 0x04
     73a:	eb 83       	std	Y+3, r30	; 0x03
     73c:	8e 16       	cp	r8, r30
     73e:	9f 06       	cpc	r9, r31
     740:	9c f6       	brge	.-90     	; 0x6e8 <_ZN12Adafruit_GFX8drawLineEiiiij+0xca>
     742:	1b c0       	rjmp	.+54     	; 0x77a <_ZN12Adafruit_GFX8drawLineEiiiij+0x15c>
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
     744:	14 01       	movw	r2, r8
     746:	8b 81       	ldd	r24, Y+3	; 0x03
     748:	9c 81       	ldd	r25, Y+4	; 0x04
     74a:	28 1a       	sub	r2, r24
     74c:	39 0a       	sbc	r3, r25
  dy = abs(y1 - y0);
     74e:	c8 01       	movw	r24, r16
     750:	8c 19       	sub	r24, r12
     752:	9d 09       	sbc	r25, r13
     754:	2c 01       	movw	r4, r24
     756:	22 f4       	brpl	.+8      	; 0x760 <_ZN12Adafruit_GFX8drawLineEiiiij+0x142>
     758:	44 24       	eor	r4, r4
     75a:	55 24       	eor	r5, r5
     75c:	48 1a       	sub	r4, r24
     75e:	59 0a       	sbc	r5, r25

  int16_t err = dx / 2;
     760:	71 01       	movw	r14, r2
     762:	33 20       	and	r3, r3
     764:	1c f4       	brge	.+6      	; 0x76c <_ZN12Adafruit_GFX8drawLineEiiiij+0x14e>
     766:	9f ef       	ldi	r25, 0xFF	; 255
     768:	e9 1a       	sub	r14, r25
     76a:	f9 0a       	sbc	r15, r25
     76c:	f5 94       	asr	r15
     76e:	e7 94       	ror	r14
  int16_t ystep;

  if (y0 < y1) {
     770:	c0 16       	cp	r12, r16
     772:	d1 06       	cpc	r13, r17
     774:	0c f4       	brge	.+2      	; 0x778 <_ZN12Adafruit_GFX8drawLineEiiiij+0x15a>
     776:	b6 cf       	rjmp	.-148    	; 0x6e4 <_ZN12Adafruit_GFX8drawLineEiiiij+0xc6>
     778:	ac cf       	rjmp	.-168    	; 0x6d2 <_ZN12Adafruit_GFX8drawLineEiiiij+0xb4>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	1f 91       	pop	r17
     788:	0f 91       	pop	r16
     78a:	ff 90       	pop	r15
     78c:	ef 90       	pop	r14
     78e:	df 90       	pop	r13
     790:	cf 90       	pop	r12
     792:	bf 90       	pop	r11
     794:	af 90       	pop	r10
     796:	9f 90       	pop	r9
     798:	8f 90       	pop	r8
     79a:	7f 90       	pop	r7
     79c:	6f 90       	pop	r6
     79e:	5f 90       	pop	r5
     7a0:	4f 90       	pop	r4
     7a2:	3f 90       	pop	r3
     7a4:	2f 90       	pop	r2
     7a6:	08 95       	ret

000007a8 <_ZN12Adafruit_GFX8drawRectEiiiij>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
     7a8:	6f 92       	push	r6
     7aa:	7f 92       	push	r7
     7ac:	8f 92       	push	r8
     7ae:	9f 92       	push	r9
     7b0:	af 92       	push	r10
     7b2:	bf 92       	push	r11
     7b4:	cf 92       	push	r12
     7b6:	df 92       	push	r13
     7b8:	ef 92       	push	r14
     7ba:	ff 92       	push	r15
     7bc:	0f 93       	push	r16
     7be:	1f 93       	push	r17
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	ec 01       	movw	r28, r24
     7c6:	4b 01       	movw	r8, r22
     7c8:	5a 01       	movw	r10, r20
     7ca:	69 01       	movw	r12, r18
     7cc:	38 01       	movw	r6, r16
  drawFastHLine(x, y, w, color);
     7ce:	e8 81       	ld	r30, Y
     7d0:	f9 81       	ldd	r31, Y+1	; 0x01
     7d2:	02 84       	ldd	r0, Z+10	; 0x0a
     7d4:	f3 85       	ldd	r31, Z+11	; 0x0b
     7d6:	e0 2d       	mov	r30, r0
     7d8:	87 01       	movw	r16, r14
     7da:	09 95       	icall
  drawFastHLine(x, y+h-1, w, color);
     7dc:	e8 81       	ld	r30, Y
     7de:	f9 81       	ldd	r31, Y+1	; 0x01
     7e0:	a5 01       	movw	r20, r10
     7e2:	46 0d       	add	r20, r6
     7e4:	57 1d       	adc	r21, r7
     7e6:	41 50       	subi	r20, 0x01	; 1
     7e8:	51 09       	sbc	r21, r1
     7ea:	02 84       	ldd	r0, Z+10	; 0x0a
     7ec:	f3 85       	ldd	r31, Z+11	; 0x0b
     7ee:	e0 2d       	mov	r30, r0
     7f0:	96 01       	movw	r18, r12
     7f2:	b4 01       	movw	r22, r8
     7f4:	ce 01       	movw	r24, r28
     7f6:	09 95       	icall
  drawFastVLine(x, y, h, color);
     7f8:	e8 81       	ld	r30, Y
     7fa:	f9 81       	ldd	r31, Y+1	; 0x01
     7fc:	00 84       	ldd	r0, Z+8	; 0x08
     7fe:	f1 85       	ldd	r31, Z+9	; 0x09
     800:	e0 2d       	mov	r30, r0
     802:	93 01       	movw	r18, r6
     804:	a5 01       	movw	r20, r10
     806:	b4 01       	movw	r22, r8
     808:	ce 01       	movw	r24, r28
     80a:	09 95       	icall
  drawFastVLine(x+w-1, y, h, color);
     80c:	e8 81       	ld	r30, Y
     80e:	f9 81       	ldd	r31, Y+1	; 0x01
     810:	c8 0c       	add	r12, r8
     812:	d9 1c       	adc	r13, r9
     814:	b6 01       	movw	r22, r12
     816:	61 50       	subi	r22, 0x01	; 1
     818:	71 09       	sbc	r23, r1
     81a:	00 84       	ldd	r0, Z+8	; 0x08
     81c:	f1 85       	ldd	r31, Z+9	; 0x09
     81e:	e0 2d       	mov	r30, r0
     820:	93 01       	movw	r18, r6
     822:	a5 01       	movw	r20, r10
     824:	ce 01       	movw	r24, r28
     826:	09 95       	icall
}
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	1f 91       	pop	r17
     82e:	0f 91       	pop	r16
     830:	ff 90       	pop	r15
     832:	ef 90       	pop	r14
     834:	df 90       	pop	r13
     836:	cf 90       	pop	r12
     838:	bf 90       	pop	r11
     83a:	af 90       	pop	r10
     83c:	9f 90       	pop	r9
     83e:	8f 90       	pop	r8
     840:	7f 90       	pop	r7
     842:	6f 90       	pop	r6
     844:	08 95       	ret

00000846 <_ZN12Adafruit_GFX13drawFastVLineEiiij>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
     846:	ef 92       	push	r14
     848:	ff 92       	push	r15
     84a:	0f 93       	push	r16
     84c:	1f 93       	push	r17
     84e:	78 01       	movw	r14, r16
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
     850:	dc 01       	movw	r26, r24
     852:	ed 91       	ld	r30, X+
     854:	fc 91       	ld	r31, X
     856:	24 0f       	add	r18, r20
     858:	35 1f       	adc	r19, r21
     85a:	89 01       	movw	r16, r18
     85c:	01 50       	subi	r16, 0x01	; 1
     85e:	11 09       	sbc	r17, r1
     860:	06 80       	ldd	r0, Z+6	; 0x06
     862:	f7 81       	ldd	r31, Z+7	; 0x07
     864:	e0 2d       	mov	r30, r0
     866:	9b 01       	movw	r18, r22
     868:	09 95       	icall
}
     86a:	1f 91       	pop	r17
     86c:	0f 91       	pop	r16
     86e:	ff 90       	pop	r15
     870:	ef 90       	pop	r14
     872:	08 95       	ret

00000874 <_ZN12Adafruit_GFX13drawFastHLineEiiij>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
     874:	ef 92       	push	r14
     876:	ff 92       	push	r15
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
     87c:	dc 01       	movw	r26, r24
     87e:	ed 91       	ld	r30, X+
     880:	fc 91       	ld	r31, X
     882:	26 0f       	add	r18, r22
     884:	37 1f       	adc	r19, r23
     886:	21 50       	subi	r18, 0x01	; 1
     888:	31 09       	sbc	r19, r1
     88a:	06 80       	ldd	r0, Z+6	; 0x06
     88c:	f7 81       	ldd	r31, Z+7	; 0x07
     88e:	e0 2d       	mov	r30, r0
     890:	78 01       	movw	r14, r16
     892:	8a 01       	movw	r16, r20
     894:	09 95       	icall
}
     896:	1f 91       	pop	r17
     898:	0f 91       	pop	r16
     89a:	ff 90       	pop	r15
     89c:	ef 90       	pop	r14
     89e:	08 95       	ret

000008a0 <_ZN12Adafruit_GFX8fillRectEiiiij>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
     8a0:	6f 92       	push	r6
     8a2:	7f 92       	push	r7
     8a4:	8f 92       	push	r8
     8a6:	9f 92       	push	r9
     8a8:	af 92       	push	r10
     8aa:	bf 92       	push	r11
     8ac:	cf 92       	push	r12
     8ae:	df 92       	push	r13
     8b0:	ef 92       	push	r14
     8b2:	ff 92       	push	r15
     8b4:	0f 93       	push	r16
     8b6:	1f 93       	push	r17
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	6c 01       	movw	r12, r24
     8be:	eb 01       	movw	r28, r22
     8c0:	4a 01       	movw	r8, r20
     8c2:	58 01       	movw	r10, r16
     8c4:	37 01       	movw	r6, r14
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
     8c6:	7b 01       	movw	r14, r22
     8c8:	e2 0e       	add	r14, r18
     8ca:	f3 1e       	adc	r15, r19
     8cc:	6e 15       	cp	r22, r14
     8ce:	7f 05       	cpc	r23, r15
     8d0:	84 f4       	brge	.+32     	; 0x8f2 <_ZN12Adafruit_GFX8fillRectEiiiij+0x52>
    drawFastVLine(i, y, h, color);
     8d2:	d6 01       	movw	r26, r12
     8d4:	ed 91       	ld	r30, X+
     8d6:	fc 91       	ld	r31, X
     8d8:	00 84       	ldd	r0, Z+8	; 0x08
     8da:	f1 85       	ldd	r31, Z+9	; 0x09
     8dc:	e0 2d       	mov	r30, r0
     8de:	83 01       	movw	r16, r6
     8e0:	95 01       	movw	r18, r10
     8e2:	a4 01       	movw	r20, r8
     8e4:	be 01       	movw	r22, r28
     8e6:	c6 01       	movw	r24, r12
     8e8:	09 95       	icall
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
     8ea:	21 96       	adiw	r28, 0x01	; 1
     8ec:	ce 15       	cp	r28, r14
     8ee:	df 05       	cpc	r29, r15
     8f0:	84 f3       	brlt	.-32     	; 0x8d2 <_ZN12Adafruit_GFX8fillRectEiiiij+0x32>
    drawFastVLine(i, y, h, color);
  }
}
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	1f 91       	pop	r17
     8f8:	0f 91       	pop	r16
     8fa:	ff 90       	pop	r15
     8fc:	ef 90       	pop	r14
     8fe:	df 90       	pop	r13
     900:	cf 90       	pop	r12
     902:	bf 90       	pop	r11
     904:	af 90       	pop	r10
     906:	9f 90       	pop	r9
     908:	8f 90       	pop	r8
     90a:	7f 90       	pop	r7
     90c:	6f 90       	pop	r6
     90e:	08 95       	ret

00000910 <_ZN12Adafruit_GFX10fillScreenEj>:

void Adafruit_GFX::fillScreen(uint16_t color) {
     910:	ef 92       	push	r14
     912:	ff 92       	push	r15
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
  fillRect(0, 0, _width, _height, color);
     918:	dc 01       	movw	r26, r24
     91a:	ed 91       	ld	r30, X+
     91c:	fc 91       	ld	r31, X
     91e:	11 97       	sbiw	r26, 0x01	; 1
     920:	1a 96       	adiw	r26, 0x0a	; 10
     922:	0d 91       	ld	r16, X+
     924:	1c 91       	ld	r17, X
     926:	1b 97       	sbiw	r26, 0x0b	; 11
     928:	18 96       	adiw	r26, 0x08	; 8
     92a:	2d 91       	ld	r18, X+
     92c:	3c 91       	ld	r19, X
     92e:	19 97       	sbiw	r26, 0x09	; 9
     930:	06 84       	ldd	r0, Z+14	; 0x0e
     932:	f7 85       	ldd	r31, Z+15	; 0x0f
     934:	e0 2d       	mov	r30, r0
     936:	7b 01       	movw	r14, r22
     938:	40 e0       	ldi	r20, 0x00	; 0
     93a:	50 e0       	ldi	r21, 0x00	; 0
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	09 95       	icall
}
     942:	1f 91       	pop	r17
     944:	0f 91       	pop	r16
     946:	ff 90       	pop	r15
     948:	ef 90       	pop	r14
     94a:	08 95       	ret

0000094c <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) const {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
     94c:	08 95       	ret

0000094e <_ZN12Adafruit_GFXC1Eii>:

#ifndef min
 #define min(a,b) ((a < b) ? a : b)
#endif

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
     94e:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     950:	13 82       	std	Z+3, r1	; 0x03
     952:	12 82       	std	Z+2, r1	; 0x02
  WIDTH(w), HEIGHT(h)
     954:	82 e1       	ldi	r24, 0x12	; 18
     956:	91 e0       	ldi	r25, 0x01	; 1
     958:	91 83       	std	Z+1, r25	; 0x01
     95a:	80 83       	st	Z, r24
     95c:	75 83       	std	Z+5, r23	; 0x05
     95e:	64 83       	std	Z+4, r22	; 0x04
     960:	57 83       	std	Z+7, r21	; 0x07
     962:	46 83       	std	Z+6, r20	; 0x06
{
  _width    = WIDTH;
     964:	71 87       	std	Z+9, r23	; 0x09
     966:	60 87       	std	Z+8, r22	; 0x08
  _height   = HEIGHT;
     968:	53 87       	std	Z+11, r21	; 0x0b
     96a:	42 87       	std	Z+10, r20	; 0x0a
  rotation  = 0;
     96c:	15 8a       	std	Z+21, r1	; 0x15
  cursor_y  = cursor_x    = 0;
     96e:	15 86       	std	Z+13, r1	; 0x0d
     970:	14 86       	std	Z+12, r1	; 0x0c
     972:	17 86       	std	Z+15, r1	; 0x0f
     974:	16 86       	std	Z+14, r1	; 0x0e
  textsize  = 1;
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	84 8b       	std	Z+20, r24	; 0x14
  textcolor = textbgcolor = 0xFFFF;
     97a:	2f ef       	ldi	r18, 0xFF	; 255
     97c:	3f ef       	ldi	r19, 0xFF	; 255
     97e:	33 8b       	std	Z+19, r19	; 0x13
     980:	22 8b       	std	Z+18, r18	; 0x12
     982:	31 8b       	std	Z+17, r19	; 0x11
     984:	20 8b       	std	Z+16, r18	; 0x10
  wrap      = true;
     986:	86 8b       	std	Z+22, r24	; 0x16
  _cp437    = false;
     988:	17 8a       	std	Z+23, r1	; 0x17
     98a:	08 95       	ret

0000098c <_ZN12Adafruit_GFX8drawCharEiihjjh>:
#endif
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
     98c:	2f 92       	push	r2
     98e:	3f 92       	push	r3
     990:	4f 92       	push	r4
     992:	5f 92       	push	r5
     994:	6f 92       	push	r6
     996:	7f 92       	push	r7
     998:	8f 92       	push	r8
     99a:	9f 92       	push	r9
     99c:	af 92       	push	r10
     99e:	bf 92       	push	r11
     9a0:	cf 92       	push	r12
     9a2:	df 92       	push	r13
     9a4:	ef 92       	push	r14
     9a6:	ff 92       	push	r15
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	cd b7       	in	r28, 0x3d	; 61
     9b2:	de b7       	in	r29, 0x3e	; 62
     9b4:	62 97       	sbiw	r28, 0x12	; 18
     9b6:	0f b6       	in	r0, 0x3f	; 63
     9b8:	f8 94       	cli
     9ba:	de bf       	out	0x3e, r29	; 62
     9bc:	0f be       	out	0x3f, r0	; 63
     9be:	cd bf       	out	0x3d, r28	; 61
     9c0:	5c 01       	movw	r10, r24
     9c2:	18 01       	movw	r2, r16
     9c4:	fd 82       	std	Y+5, r15	; 0x05
     9c6:	ec 82       	std	Y+4, r14	; 0x04
     9c8:	cb 82       	std	Y+3, r12	; 0x03

  if((x >= _width)            || // Clip right
     9ca:	dc 01       	movw	r26, r24
     9cc:	18 96       	adiw	r26, 0x08	; 8
     9ce:	8d 91       	ld	r24, X+
     9d0:	9c 91       	ld	r25, X
     9d2:	19 97       	sbiw	r26, 0x09	; 9
     9d4:	68 17       	cp	r22, r24
     9d6:	79 07       	cpc	r23, r25
     9d8:	0c f0       	brlt	.+2      	; 0x9dc <_ZN12Adafruit_GFX8drawCharEiihjjh+0x50>
     9da:	d1 c0       	rjmp	.+418    	; 0xb7e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1f2>
     9dc:	1a 96       	adiw	r26, 0x0a	; 10
     9de:	8d 91       	ld	r24, X+
     9e0:	9c 91       	ld	r25, X
     9e2:	1b 97       	sbiw	r26, 0x0b	; 11
     9e4:	48 17       	cp	r20, r24
     9e6:	59 07       	cpc	r21, r25
     9e8:	0c f0       	brlt	.+2      	; 0x9ec <_ZN12Adafruit_GFX8drawCharEiihjjh+0x60>
     9ea:	c9 c0       	rjmp	.+402    	; 0xb7e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1f2>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     9ec:	ec 2d       	mov	r30, r12
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	fa 83       	std	Y+2, r31	; 0x02
     9f2:	e9 83       	std	Y+1, r30	; 0x01
     9f4:	cf 01       	movw	r24, r30
     9f6:	88 0f       	add	r24, r24
     9f8:	99 1f       	adc	r25, r25
     9fa:	8e 0f       	add	r24, r30
     9fc:	9f 1f       	adc	r25, r31
     9fe:	88 0f       	add	r24, r24
     a00:	99 1f       	adc	r25, r25
     a02:	86 0f       	add	r24, r22
     a04:	97 1f       	adc	r25, r23
     a06:	01 97       	sbiw	r24, 0x01	; 1
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
     a08:	0a f4       	brpl	.+2      	; 0xa0c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x80>
     a0a:	b9 c0       	rjmp	.+370    	; 0xb7e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1f2>
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
     a0c:	cf 01       	movw	r24, r30
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	88 0f       	add	r24, r24
     a14:	99 1f       	adc	r25, r25
     a16:	88 0f       	add	r24, r24
     a18:	99 1f       	adc	r25, r25
     a1a:	84 0f       	add	r24, r20
     a1c:	95 1f       	adc	r25, r21
     a1e:	01 97       	sbiw	r24, 0x01	; 1
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     a20:	0a f4       	brpl	.+2      	; 0xa24 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x98>
     a22:	ad c0       	rjmp	.+346    	; 0xb7e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1f2>
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
     a24:	57 96       	adiw	r26, 0x17	; 23
     a26:	8c 91       	ld	r24, X
     a28:	81 11       	cpse	r24, r1
     a2a:	03 c0       	rjmp	.+6      	; 0xa32 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xa6>
     a2c:	20 3b       	cpi	r18, 0xB0	; 176
     a2e:	08 f0       	brcs	.+2      	; 0xa32 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xa6>
     a30:	2f 5f       	subi	r18, 0xFF	; 255
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	c9 01       	movw	r24, r18
     a36:	88 0f       	add	r24, r24
     a38:	99 1f       	adc	r25, r25
     a3a:	88 0f       	add	r24, r24
     a3c:	99 1f       	adc	r25, r25
     a3e:	28 0f       	add	r18, r24
     a40:	39 1f       	adc	r19, r25
     a42:	8b 81       	ldd	r24, Y+3	; 0x03
     a44:	68 2e       	mov	r6, r24
     a46:	71 2c       	mov	r7, r1
     a48:	79 87       	std	Y+9, r23	; 0x09
     a4a:	68 87       	std	Y+8, r22	; 0x08
     a4c:	7b 87       	std	Y+11, r23	; 0x0b
     a4e:	6a 87       	std	Y+10, r22	; 0x0a
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

  for (int8_t i=0; i<6; i++ ) {
     a50:	1c 86       	std	Y+12, r1	; 0x0c
     a52:	d9 01       	movw	r26, r18
     a54:	a6 1b       	sub	r26, r22
     a56:	b7 0b       	sbc	r27, r23
     a58:	b8 8b       	std	Y+16, r27	; 0x10
     a5a:	af 87       	std	Y+15, r26	; 0x0f
     a5c:	4d 87       	std	Y+13, r20	; 0x0d
     a5e:	5e 87       	std	Y+14, r21	; 0x0e
     a60:	4a 01       	movw	r8, r20
     a62:	b8 e0       	ldi	r27, 0x08	; 8
     a64:	8b 0e       	add	r8, r27
     a66:	91 1c       	adc	r9, r1
     a68:	24 01       	movw	r4, r8
    uint8_t line;
    if (i == 5) 
     a6a:	ec 85       	ldd	r30, Y+12	; 0x0c
     a6c:	e5 30       	cpi	r30, 0x05	; 5
     a6e:	09 f4       	brne	.+2      	; 0xa72 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xe6>
     a70:	78 c0       	rjmp	.+240    	; 0xb62 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1d6>
     a72:	ef 85       	ldd	r30, Y+15	; 0x0f
     a74:	f8 89       	ldd	r31, Y+16	; 0x10
     a76:	88 85       	ldd	r24, Y+8	; 0x08
     a78:	99 85       	ldd	r25, Y+9	; 0x09
     a7a:	e8 0f       	add	r30, r24
     a7c:	f9 1f       	adc	r31, r25
     a7e:	e8 59       	subi	r30, 0x98	; 152
     a80:	ff 4f       	sbci	r31, 0xFF	; 255
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
     a82:	14 91       	lpm	r17, Z
     a84:	6f c0       	rjmp	.+222    	; 0xb64 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1d8>
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
     a86:	b0 fe       	sbrs	r11, 0
     a88:	24 c0       	rjmp	.+72     	; 0xad2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x146>
        if (size == 1) // default size
     a8a:	9b 81       	ldd	r25, Y+3	; 0x03
     a8c:	91 30       	cpi	r25, 0x01	; 1
     a8e:	79 f4       	brne	.+30     	; 0xaae <_ZN12Adafruit_GFX8drawCharEiihjjh+0x122>
          drawPixel(x+i, y+j, color);
     a90:	a9 89       	ldd	r26, Y+17	; 0x11
     a92:	ba 89       	ldd	r27, Y+18	; 0x12
     a94:	ed 91       	ld	r30, X+
     a96:	fc 91       	ld	r31, X
     a98:	11 97       	sbiw	r26, 0x01	; 1
     a9a:	04 80       	ldd	r0, Z+4	; 0x04
     a9c:	f5 81       	ldd	r31, Z+5	; 0x05
     a9e:	e0 2d       	mov	r30, r0
     aa0:	91 01       	movw	r18, r2
     aa2:	a6 01       	movw	r20, r12
     aa4:	68 85       	ldd	r22, Y+8	; 0x08
     aa6:	79 85       	ldd	r23, Y+9	; 0x09
     aa8:	cd 01       	movw	r24, r26
     aaa:	09 95       	icall
     aac:	3c c0       	rjmp	.+120    	; 0xb26 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x19a>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
     aae:	a9 89       	ldd	r26, Y+17	; 0x11
     ab0:	ba 89       	ldd	r27, Y+18	; 0x12
     ab2:	ed 91       	ld	r30, X+
     ab4:	fc 91       	ld	r31, X
     ab6:	11 97       	sbiw	r26, 0x01	; 1
     ab8:	06 84       	ldd	r0, Z+14	; 0x0e
     aba:	f7 85       	ldd	r31, Z+15	; 0x0f
     abc:	e0 2d       	mov	r30, r0
     abe:	71 01       	movw	r14, r2
     ac0:	09 81       	ldd	r16, Y+1	; 0x01
     ac2:	1a 81       	ldd	r17, Y+2	; 0x02
     ac4:	98 01       	movw	r18, r16
     ac6:	a4 01       	movw	r20, r8
     ac8:	6e 81       	ldd	r22, Y+6	; 0x06
     aca:	7f 81       	ldd	r23, Y+7	; 0x07
     acc:	cd 01       	movw	r24, r26
     ace:	09 95       	icall
     ad0:	2a c0       	rjmp	.+84     	; 0xb26 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x19a>
        } 
      } else if (bg != color) {
     ad2:	ec 81       	ldd	r30, Y+4	; 0x04
     ad4:	fd 81       	ldd	r31, Y+5	; 0x05
     ad6:	e2 15       	cp	r30, r2
     ad8:	f3 05       	cpc	r31, r3
     ada:	29 f1       	breq	.+74     	; 0xb26 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x19a>
        if (size == 1) // default size
     adc:	fb 81       	ldd	r31, Y+3	; 0x03
     ade:	f1 30       	cpi	r31, 0x01	; 1
     ae0:	81 f4       	brne	.+32     	; 0xb02 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x176>
          drawPixel(x+i, y+j, bg);
     ae2:	a9 89       	ldd	r26, Y+17	; 0x11
     ae4:	ba 89       	ldd	r27, Y+18	; 0x12
     ae6:	ed 91       	ld	r30, X+
     ae8:	fc 91       	ld	r31, X
     aea:	11 97       	sbiw	r26, 0x01	; 1
     aec:	04 80       	ldd	r0, Z+4	; 0x04
     aee:	f5 81       	ldd	r31, Z+5	; 0x05
     af0:	e0 2d       	mov	r30, r0
     af2:	2c 81       	ldd	r18, Y+4	; 0x04
     af4:	3d 81       	ldd	r19, Y+5	; 0x05
     af6:	a6 01       	movw	r20, r12
     af8:	68 85       	ldd	r22, Y+8	; 0x08
     afa:	79 85       	ldd	r23, Y+9	; 0x09
     afc:	cd 01       	movw	r24, r26
     afe:	09 95       	icall
     b00:	12 c0       	rjmp	.+36     	; 0xb26 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x19a>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
     b02:	a9 89       	ldd	r26, Y+17	; 0x11
     b04:	ba 89       	ldd	r27, Y+18	; 0x12
     b06:	ed 91       	ld	r30, X+
     b08:	fc 91       	ld	r31, X
     b0a:	11 97       	sbiw	r26, 0x01	; 1
     b0c:	06 84       	ldd	r0, Z+14	; 0x0e
     b0e:	f7 85       	ldd	r31, Z+15	; 0x0f
     b10:	e0 2d       	mov	r30, r0
     b12:	ec 80       	ldd	r14, Y+4	; 0x04
     b14:	fd 80       	ldd	r15, Y+5	; 0x05
     b16:	09 81       	ldd	r16, Y+1	; 0x01
     b18:	1a 81       	ldd	r17, Y+2	; 0x02
     b1a:	98 01       	movw	r18, r16
     b1c:	a4 01       	movw	r20, r8
     b1e:	6e 81       	ldd	r22, Y+6	; 0x06
     b20:	7f 81       	ldd	r23, Y+7	; 0x07
     b22:	cd 01       	movw	r24, r26
     b24:	09 95       	icall
        }
      }
      line >>= 1;
     b26:	b6 94       	lsr	r11
     b28:	86 0c       	add	r8, r6
     b2a:	97 1c       	adc	r9, r7
     b2c:	bf ef       	ldi	r27, 0xFF	; 255
     b2e:	cb 1a       	sub	r12, r27
     b30:	db 0a       	sbc	r13, r27
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
     b32:	c4 14       	cp	r12, r4
     b34:	d5 04       	cpc	r13, r5
     b36:	09 f0       	breq	.+2      	; 0xb3a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1ae>
     b38:	a6 cf       	rjmp	.-180    	; 0xa86 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xfa>
     b3a:	a9 88       	ldd	r10, Y+17	; 0x11
     b3c:	ba 88       	ldd	r11, Y+18	; 0x12
     b3e:	ec 85       	ldd	r30, Y+12	; 0x0c
     b40:	ef 5f       	subi	r30, 0xFF	; 255
     b42:	ec 87       	std	Y+12, r30	; 0x0c
     b44:	8a 85       	ldd	r24, Y+10	; 0x0a
     b46:	9b 85       	ldd	r25, Y+11	; 0x0b
     b48:	86 0d       	add	r24, r6
     b4a:	97 1d       	adc	r25, r7
     b4c:	9b 87       	std	Y+11, r25	; 0x0b
     b4e:	8a 87       	std	Y+10, r24	; 0x0a
     b50:	a8 85       	ldd	r26, Y+8	; 0x08
     b52:	b9 85       	ldd	r27, Y+9	; 0x09
     b54:	11 96       	adiw	r26, 0x01	; 1
     b56:	b9 87       	std	Y+9, r27	; 0x09
     b58:	a8 87       	std	Y+8, r26	; 0x08
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

  for (int8_t i=0; i<6; i++ ) {
     b5a:	e6 30       	cpi	r30, 0x06	; 6
     b5c:	09 f0       	breq	.+2      	; 0xb60 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1d4>
     b5e:	85 cf       	rjmp	.-246    	; 0xa6a <_ZN12Adafruit_GFX8drawCharEiihjjh+0xde>
     b60:	0e c0       	rjmp	.+28     	; 0xb7e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1f2>
    uint8_t line;
    if (i == 5) 
      line = 0x0;
     b62:	10 e0       	ldi	r17, 0x00	; 0
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
     b64:	ba 85       	ldd	r27, Y+10	; 0x0a
     b66:	be 83       	std	Y+6, r27	; 0x06
     b68:	eb 85       	ldd	r30, Y+11	; 0x0b
     b6a:	ef 83       	std	Y+7, r30	; 0x07
     b6c:	8d 84       	ldd	r8, Y+13	; 0x0d
     b6e:	9e 84       	ldd	r9, Y+14	; 0x0e
     b70:	c8 2c       	mov	r12, r8
     b72:	d9 2c       	mov	r13, r9
     b74:	c5 01       	movw	r24, r10
     b76:	b1 2e       	mov	r11, r17
     b78:	9a 8b       	std	Y+18, r25	; 0x12
     b7a:	89 8b       	std	Y+17, r24	; 0x11
     b7c:	84 cf       	rjmp	.-248    	; 0xa86 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xfa>
        }
      }
      line >>= 1;
    }
  }
}
     b7e:	62 96       	adiw	r28, 0x12	; 18
     b80:	0f b6       	in	r0, 0x3f	; 63
     b82:	f8 94       	cli
     b84:	de bf       	out	0x3e, r29	; 62
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	cd bf       	out	0x3d, r28	; 61
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	1f 91       	pop	r17
     b90:	0f 91       	pop	r16
     b92:	ff 90       	pop	r15
     b94:	ef 90       	pop	r14
     b96:	df 90       	pop	r13
     b98:	cf 90       	pop	r12
     b9a:	bf 90       	pop	r11
     b9c:	af 90       	pop	r10
     b9e:	9f 90       	pop	r9
     ba0:	8f 90       	pop	r8
     ba2:	7f 90       	pop	r7
     ba4:	6f 90       	pop	r6
     ba6:	5f 90       	pop	r5
     ba8:	4f 90       	pop	r4
     baa:	3f 90       	pop	r3
     bac:	2f 90       	pop	r2
     bae:	08 95       	ret

00000bb0 <_ZN12Adafruit_GFX5writeEh>:
    }
  }
}

#if ARDUINO >= 100
size_t Adafruit_GFX::write(uint8_t c) {
     bb0:	cf 92       	push	r12
     bb2:	ef 92       	push	r14
     bb4:	ff 92       	push	r15
     bb6:	0f 93       	push	r16
     bb8:	1f 93       	push	r17
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
#else
void Adafruit_GFX::write(uint8_t c) {
#endif
  if (c == '\n') {
     bbe:	6a 30       	cpi	r22, 0x0A	; 10
     bc0:	79 f4       	brne	.+30     	; 0xbe0 <_ZN12Adafruit_GFX5writeEh+0x30>
    cursor_y += textsize*8;
     bc2:	fc 01       	movw	r30, r24
     bc4:	44 89       	ldd	r20, Z+20	; 0x14
     bc6:	26 85       	ldd	r18, Z+14	; 0x0e
     bc8:	37 85       	ldd	r19, Z+15	; 0x0f
     bca:	f8 e0       	ldi	r31, 0x08	; 8
     bcc:	4f 9f       	mul	r20, r31
     bce:	20 0d       	add	r18, r0
     bd0:	31 1d       	adc	r19, r1
     bd2:	11 24       	eor	r1, r1
     bd4:	fc 01       	movw	r30, r24
     bd6:	37 87       	std	Z+15, r19	; 0x0f
     bd8:	26 87       	std	Z+14, r18	; 0x0e
    cursor_x  = 0;
     bda:	15 86       	std	Z+13, r1	; 0x0d
     bdc:	14 86       	std	Z+12, r1	; 0x0c
     bde:	3c c0       	rjmp	.+120    	; 0xc58 <_ZN12Adafruit_GFX5writeEh+0xa8>
  } else if (c == '\r') {
     be0:	6d 30       	cpi	r22, 0x0D	; 13
     be2:	d1 f1       	breq	.+116    	; 0xc58 <_ZN12Adafruit_GFX5writeEh+0xa8>
     be4:	26 2f       	mov	r18, r22
     be6:	ec 01       	movw	r28, r24
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
     be8:	ea 88       	ldd	r14, Y+18	; 0x12
     bea:	fb 88       	ldd	r15, Y+19	; 0x13
     bec:	08 89       	ldd	r16, Y+16	; 0x10
     bee:	19 89       	ldd	r17, Y+17	; 0x11
     bf0:	4e 85       	ldd	r20, Y+14	; 0x0e
     bf2:	5f 85       	ldd	r21, Y+15	; 0x0f
     bf4:	6c 85       	ldd	r22, Y+12	; 0x0c
     bf6:	7d 85       	ldd	r23, Y+13	; 0x0d
     bf8:	cc 88       	ldd	r12, Y+20	; 0x14
     bfa:	0e 94 c6 04 	call	0x98c	; 0x98c <_ZN12Adafruit_GFX8drawCharEiihjjh>
    cursor_x += textsize*6;
     bfe:	2c 89       	ldd	r18, Y+20	; 0x14
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	c9 01       	movw	r24, r18
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	82 0f       	add	r24, r18
     c0a:	93 1f       	adc	r25, r19
     c0c:	88 0f       	add	r24, r24
     c0e:	99 1f       	adc	r25, r25
     c10:	4c 85       	ldd	r20, Y+12	; 0x0c
     c12:	5d 85       	ldd	r21, Y+13	; 0x0d
     c14:	84 0f       	add	r24, r20
     c16:	95 1f       	adc	r25, r21
     c18:	9d 87       	std	Y+13, r25	; 0x0d
     c1a:	8c 87       	std	Y+12, r24	; 0x0c
    if (wrap && (cursor_x > (_width - textsize*6))) {
     c1c:	4e 89       	ldd	r20, Y+22	; 0x16
     c1e:	44 23       	and	r20, r20
     c20:	d9 f0       	breq	.+54     	; 0xc58 <_ZN12Adafruit_GFX5writeEh+0xa8>
     c22:	4a ef       	ldi	r20, 0xFA	; 250
     c24:	42 03       	mulsu	r20, r18
     c26:	b0 01       	movw	r22, r0
     c28:	43 9f       	mul	r20, r19
     c2a:	70 0d       	add	r23, r0
     c2c:	11 24       	eor	r1, r1
     c2e:	48 85       	ldd	r20, Y+8	; 0x08
     c30:	59 85       	ldd	r21, Y+9	; 0x09
     c32:	46 0f       	add	r20, r22
     c34:	57 1f       	adc	r21, r23
     c36:	48 17       	cp	r20, r24
     c38:	59 07       	cpc	r21, r25
     c3a:	74 f4       	brge	.+28     	; 0xc58 <_ZN12Adafruit_GFX5writeEh+0xa8>
      cursor_y += textsize*8;
     c3c:	22 0f       	add	r18, r18
     c3e:	33 1f       	adc	r19, r19
     c40:	22 0f       	add	r18, r18
     c42:	33 1f       	adc	r19, r19
     c44:	22 0f       	add	r18, r18
     c46:	33 1f       	adc	r19, r19
     c48:	8e 85       	ldd	r24, Y+14	; 0x0e
     c4a:	9f 85       	ldd	r25, Y+15	; 0x0f
     c4c:	28 0f       	add	r18, r24
     c4e:	39 1f       	adc	r19, r25
     c50:	3f 87       	std	Y+15, r19	; 0x0f
     c52:	2e 87       	std	Y+14, r18	; 0x0e
      cursor_x = 0;
     c54:	1d 86       	std	Y+13, r1	; 0x0d
     c56:	1c 86       	std	Y+12, r1	; 0x0c
    }
  }
#if ARDUINO >= 100
  return 1;
#endif
}
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	1f 91       	pop	r17
     c62:	0f 91       	pop	r16
     c64:	ff 90       	pop	r15
     c66:	ef 90       	pop	r14
     c68:	cf 90       	pop	r12
     c6a:	08 95       	ret

00000c6c <_ZN12Adafruit_GFX9setCursorEii>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
     c6c:	fc 01       	movw	r30, r24
     c6e:	75 87       	std	Z+13, r23	; 0x0d
     c70:	64 87       	std	Z+12, r22	; 0x0c
  cursor_y = y;
     c72:	57 87       	std	Z+15, r21	; 0x0f
     c74:	46 87       	std	Z+14, r20	; 0x0e
     c76:	08 95       	ret

00000c78 <_ZN12Adafruit_GFX11setTextSizeEh>:
int16_t Adafruit_GFX::getCursorY(void) const {
  return cursor_y;
}

void Adafruit_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
     c78:	61 11       	cpse	r22, r1
     c7a:	01 c0       	rjmp	.+2      	; 0xc7e <_ZN12Adafruit_GFX11setTextSizeEh+0x6>
     c7c:	61 e0       	ldi	r22, 0x01	; 1
     c7e:	fc 01       	movw	r30, r24
     c80:	64 8b       	std	Z+20, r22	; 0x14
     c82:	08 95       	ret

00000c84 <_ZN12Adafruit_GFX12setTextColorEj>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
     c84:	fc 01       	movw	r30, r24
     c86:	73 8b       	std	Z+19, r23	; 0x13
     c88:	62 8b       	std	Z+18, r22	; 0x12
     c8a:	71 8b       	std	Z+17, r23	; 0x11
     c8c:	60 8b       	std	Z+16, r22	; 0x10
     c8e:	08 95       	ret

00000c90 <_ZN16Adafruit_ILI934010fillScreenEj>:
  }
  SET_BIT(csport, cspinmask);
  //digitalWrite(_cs, HIGH);
}

void Adafruit_ILI9340::fillScreen(uint16_t color) {
     c90:	ef 92       	push	r14
     c92:	ff 92       	push	r15
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
  fillRect(0, 0,  _width, _height, color);
     c98:	dc 01       	movw	r26, r24
     c9a:	ed 91       	ld	r30, X+
     c9c:	fc 91       	ld	r31, X
     c9e:	11 97       	sbiw	r26, 0x01	; 1
     ca0:	1a 96       	adiw	r26, 0x0a	; 10
     ca2:	0d 91       	ld	r16, X+
     ca4:	1c 91       	ld	r17, X
     ca6:	1b 97       	sbiw	r26, 0x0b	; 11
     ca8:	18 96       	adiw	r26, 0x08	; 8
     caa:	2d 91       	ld	r18, X+
     cac:	3c 91       	ld	r19, X
     cae:	19 97       	sbiw	r26, 0x09	; 9
     cb0:	06 84       	ldd	r0, Z+14	; 0x0e
     cb2:	f7 85       	ldd	r31, Z+15	; 0x0f
     cb4:	e0 2d       	mov	r30, r0
     cb6:	7b 01       	movw	r14, r22
     cb8:	40 e0       	ldi	r20, 0x00	; 0
     cba:	50 e0       	ldi	r21, 0x00	; 0
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	09 95       	icall
}
     cc2:	1f 91       	pop	r17
     cc4:	0f 91       	pop	r16
     cc6:	ff 90       	pop	r15
     cc8:	ef 90       	pop	r14
     cca:	08 95       	ret

00000ccc <_ZN16Adafruit_ILI9340C1Ehhh>:
}


// Constructor when using hardware SPI.  Faster, but must use SPI pins
// specific to each board type (e.g. 11,13 for Uno, 51,52 for Mega, etc.)
Adafruit_ILI9340::Adafruit_ILI9340(uint8_t cs, uint8_t dc, uint8_t rst) : Adafruit_GFX(ILI9340_TFTWIDTH, ILI9340_TFTHEIGHT) {
     ccc:	ff 92       	push	r15
     cce:	0f 93       	push	r16
     cd0:	1f 93       	push	r17
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	ec 01       	movw	r28, r24
     cd8:	f6 2e       	mov	r15, r22
     cda:	04 2f       	mov	r16, r20
     cdc:	12 2f       	mov	r17, r18
     cde:	40 e4       	ldi	r20, 0x40	; 64
     ce0:	51 e0       	ldi	r21, 0x01	; 1
     ce2:	60 ef       	ldi	r22, 0xF0	; 240
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	0e 94 a7 04 	call	0x94e	; 0x94e <_ZN12Adafruit_GFXC1Eii>
     cea:	8a e2       	ldi	r24, 0x2A	; 42
     cec:	91 e0       	ldi	r25, 0x01	; 1
     cee:	99 83       	std	Y+1, r25	; 0x01
     cf0:	88 83       	st	Y, r24
  _cs   = cs;
     cf2:	fc a2       	std	Y+36, r15	; 0x24
  _dc   = dc;
     cf4:	0d a3       	std	Y+37, r16	; 0x25
  _rst  = rst;
     cf6:	1e a3       	std	Y+38, r17	; 0x26
  hwSPI = true;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	89 8f       	std	Y+25, r24	; 0x19
  _mosi  = _sclk = 0;
     cfc:	19 a6       	std	Y+41, r1	; 0x29
     cfe:	1f a2       	std	Y+39, r1	; 0x27
}
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	ff 90       	pop	r15
     d0a:	08 95       	ret

00000d0c <_ZN16Adafruit_ILI93408spiwriteEh>:

void Adafruit_ILI9340::spiwrite(uint8_t c) {
     d0c:	fc 01       	movw	r30, r24

  //Serial.print("0x"); Serial.print(c, HEX); Serial.print(", ");

  if (hwSPI) {
     d0e:	81 8d       	ldd	r24, Z+25	; 0x19
     d10:	88 23       	and	r24, r24
     d12:	29 f0       	breq	.+10     	; 0xd1e <_ZN16Adafruit_ILI93408spiwriteEh+0x12>
#ifdef __AVR__
    SPDR = c;
     d14:	6e bd       	out	0x2e, r22	; 46
    while(!(SPSR & _BV(SPIF)));
     d16:	0d b4       	in	r0, 0x2d	; 45
     d18:	07 fe       	sbrs	r0, 7
     d1a:	fd cf       	rjmp	.-6      	; 0xd16 <_ZN16Adafruit_ILI93408spiwriteEh+0xa>
     d1c:	08 95       	ret
     d1e:	48 e0       	ldi	r20, 0x08	; 8
     d20:	50 e0       	ldi	r21, 0x00	; 0
     d22:	20 e8       	ldi	r18, 0x80	; 128
    SPI.transfer(c);
#endif
  } else {
    // Fast SPI bitbang swiped from LPD8806 library
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
      if(c & bit) {
     d24:	82 2f       	mov	r24, r18
     d26:	86 23       	and	r24, r22
     d28:	39 f0       	breq	.+14     	; 0xd38 <_ZN16Adafruit_ILI93408spiwriteEh+0x2c>
        //digitalWrite(_mosi, HIGH); 
        SET_BIT(mosiport, mosipinmask);
     d2a:	a2 8d       	ldd	r26, Z+26	; 0x1a
     d2c:	b3 8d       	ldd	r27, Z+27	; 0x1b
     d2e:	9c 91       	ld	r25, X
     d30:	82 a5       	ldd	r24, Z+42	; 0x2a
     d32:	89 2b       	or	r24, r25
     d34:	8c 93       	st	X, r24
     d36:	07 c0       	rjmp	.+14     	; 0xd46 <_ZN16Adafruit_ILI93408spiwriteEh+0x3a>
      } else {
        //digitalWrite(_mosi, LOW); 
        CLEAR_BIT(mosiport, mosipinmask);
     d38:	a2 8d       	ldd	r26, Z+26	; 0x1a
     d3a:	b3 8d       	ldd	r27, Z+27	; 0x1b
     d3c:	9c 91       	ld	r25, X
     d3e:	82 a5       	ldd	r24, Z+42	; 0x2a
     d40:	80 95       	com	r24
     d42:	89 23       	and	r24, r25
     d44:	8c 93       	st	X, r24
      }
      //digitalWrite(_sclk, HIGH);
      SET_BIT(clkport, clkpinmask);
     d46:	a4 8d       	ldd	r26, Z+28	; 0x1c
     d48:	b5 8d       	ldd	r27, Z+29	; 0x1d
     d4a:	9c 91       	ld	r25, X
     d4c:	83 a5       	ldd	r24, Z+43	; 0x2b
     d4e:	89 2b       	or	r24, r25
     d50:	8c 93       	st	X, r24
      //digitalWrite(_sclk, LOW);
      CLEAR_BIT(clkport, clkpinmask);
     d52:	a4 8d       	ldd	r26, Z+28	; 0x1c
     d54:	b5 8d       	ldd	r27, Z+29	; 0x1d
     d56:	9c 91       	ld	r25, X
     d58:	83 a5       	ldd	r24, Z+43	; 0x2b
     d5a:	80 95       	com	r24
     d5c:	89 23       	and	r24, r25
     d5e:	8c 93       	st	X, r24
#if defined(USE_SPI_LIBRARY)
    SPI.transfer(c);
#endif
  } else {
    // Fast SPI bitbang swiped from LPD8806 library
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
     d60:	26 95       	lsr	r18
     d62:	41 50       	subi	r20, 0x01	; 1
     d64:	51 09       	sbc	r21, r1
     d66:	f1 f6       	brne	.-68     	; 0xd24 <_ZN16Adafruit_ILI93408spiwriteEh+0x18>
     d68:	08 95       	ret

00000d6a <_ZN16Adafruit_ILI934012writecommandEh>:
    }
  }
}


void Adafruit_ILI9340::writecommand(uint8_t c) {
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	ec 01       	movw	r28, r24
  CLEAR_BIT(dcport, dcpinmask);
     d70:	ee 8d       	ldd	r30, Y+30	; 0x1e
     d72:	ff 8d       	ldd	r31, Y+31	; 0x1f
     d74:	90 81       	ld	r25, Z
     d76:	8d a5       	ldd	r24, Y+45	; 0x2d
     d78:	80 95       	com	r24
     d7a:	89 23       	and	r24, r25
     d7c:	80 83       	st	Z, r24
  //digitalWrite(_dc, LOW);
  CLEAR_BIT(clkport, clkpinmask);
     d7e:	ec 8d       	ldd	r30, Y+28	; 0x1c
     d80:	fd 8d       	ldd	r31, Y+29	; 0x1d
     d82:	90 81       	ld	r25, Z
     d84:	8b a5       	ldd	r24, Y+43	; 0x2b
     d86:	80 95       	com	r24
     d88:	89 23       	and	r24, r25
     d8a:	80 83       	st	Z, r24
  //digitalWrite(_sclk, LOW);
  CLEAR_BIT(csport, cspinmask);
     d8c:	ea a1       	ldd	r30, Y+34	; 0x22
     d8e:	fb a1       	ldd	r31, Y+35	; 0x23
     d90:	90 81       	ld	r25, Z
     d92:	8c a5       	ldd	r24, Y+44	; 0x2c
     d94:	80 95       	com	r24
     d96:	89 23       	and	r24, r25
     d98:	80 83       	st	Z, r24
  //digitalWrite(_cs, LOW);

  spiwrite(c);
     d9a:	ce 01       	movw	r24, r28
     d9c:	0e 94 86 06 	call	0xd0c	; 0xd0c <_ZN16Adafruit_ILI93408spiwriteEh>

  SET_BIT(csport, cspinmask);
     da0:	ea a1       	ldd	r30, Y+34	; 0x22
     da2:	fb a1       	ldd	r31, Y+35	; 0x23
     da4:	90 81       	ld	r25, Z
     da6:	8c a5       	ldd	r24, Y+44	; 0x2c
     da8:	89 2b       	or	r24, r25
     daa:	80 83       	st	Z, r24
  //digitalWrite(_cs, HIGH);
}
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	08 95       	ret

00000db2 <_ZN16Adafruit_ILI934013invertDisplayEb>:
  }
}


void Adafruit_ILI9340::invertDisplay(boolean i) {
  writecommand(i ? ILI9340_INVON : ILI9340_INVOFF);
     db2:	61 11       	cpse	r22, r1
     db4:	02 c0       	rjmp	.+4      	; 0xdba <_ZN16Adafruit_ILI934013invertDisplayEb+0x8>
     db6:	60 e2       	ldi	r22, 0x20	; 32
     db8:	01 c0       	rjmp	.+2      	; 0xdbc <_ZN16Adafruit_ILI934013invertDisplayEb+0xa>
     dba:	61 e2       	ldi	r22, 0x21	; 33
     dbc:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN16Adafruit_ILI934012writecommandEh>
     dc0:	08 95       	ret

00000dc2 <_ZN16Adafruit_ILI93409writedataEh>:
  SET_BIT(csport, cspinmask);
  //digitalWrite(_cs, HIGH);
}


void Adafruit_ILI9340::writedata(uint8_t c) {
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	ec 01       	movw	r28, r24
  SET_BIT(dcport,  dcpinmask);
     dc8:	ee 8d       	ldd	r30, Y+30	; 0x1e
     dca:	ff 8d       	ldd	r31, Y+31	; 0x1f
     dcc:	90 81       	ld	r25, Z
     dce:	8d a5       	ldd	r24, Y+45	; 0x2d
     dd0:	89 2b       	or	r24, r25
     dd2:	80 83       	st	Z, r24
  //digitalWrite(_dc, HIGH);
  CLEAR_BIT(clkport, clkpinmask);
     dd4:	ec 8d       	ldd	r30, Y+28	; 0x1c
     dd6:	fd 8d       	ldd	r31, Y+29	; 0x1d
     dd8:	90 81       	ld	r25, Z
     dda:	8b a5       	ldd	r24, Y+43	; 0x2b
     ddc:	80 95       	com	r24
     dde:	89 23       	and	r24, r25
     de0:	80 83       	st	Z, r24
  //digitalWrite(_sclk, LOW);
  CLEAR_BIT(csport, cspinmask);
     de2:	ea a1       	ldd	r30, Y+34	; 0x22
     de4:	fb a1       	ldd	r31, Y+35	; 0x23
     de6:	90 81       	ld	r25, Z
     de8:	8c a5       	ldd	r24, Y+44	; 0x2c
     dea:	80 95       	com	r24
     dec:	89 23       	and	r24, r25
     dee:	80 83       	st	Z, r24
  //digitalWrite(_cs, LOW);
  
  spiwrite(c);
     df0:	ce 01       	movw	r24, r28
     df2:	0e 94 86 06 	call	0xd0c	; 0xd0c <_ZN16Adafruit_ILI93408spiwriteEh>

  //digitalWrite(_cs, HIGH);
  SET_BIT(csport, cspinmask);
     df6:	ea a1       	ldd	r30, Y+34	; 0x22
     df8:	fb a1       	ldd	r31, Y+35	; 0x23
     dfa:	90 81       	ld	r25, Z
     dfc:	8c a5       	ldd	r24, Y+44	; 0x2c
     dfe:	89 2b       	or	r24, r25
     e00:	80 83       	st	Z, r24
} 
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	08 95       	ret

00000e08 <_ZN16Adafruit_ILI93405beginEv>:
    }
  }
}


void Adafruit_ILI9340::begin(void) {
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	ec 01       	movw	r28, r24
  pinMode(_rst, OUTPUT);
     e0e:	61 e0       	ldi	r22, 0x01	; 1
     e10:	8e a1       	ldd	r24, Y+38	; 0x26
     e12:	0e 94 c7 14 	call	0x298e	; 0x298e <pinMode>
  digitalWrite(_rst, LOW);
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	8e a1       	ldd	r24, Y+38	; 0x26
     e1a:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <digitalWrite>
  pinMode(_dc, OUTPUT);
     e1e:	61 e0       	ldi	r22, 0x01	; 1
     e20:	8d a1       	ldd	r24, Y+37	; 0x25
     e22:	0e 94 c7 14 	call	0x298e	; 0x298e <pinMode>
  pinMode(_cs, OUTPUT);
     e26:	61 e0       	ldi	r22, 0x01	; 1
     e28:	8c a1       	ldd	r24, Y+36	; 0x24
     e2a:	0e 94 c7 14 	call	0x298e	; 0x298e <pinMode>
#ifdef __AVR__
  csport    = portOutputRegister(digitalPinToPort(_cs));
     e2e:	2c a1       	ldd	r18, Y+36	; 0x24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	f9 01       	movw	r30, r18
     e34:	e4 56       	subi	r30, 0x64	; 100
     e36:	fa 4f       	sbci	r31, 0xFA	; 250
     e38:	e4 91       	lpm	r30, Z
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	ee 0f       	add	r30, r30
     e3e:	ff 1f       	adc	r31, r31
     e40:	e0 55       	subi	r30, 0x50	; 80
     e42:	fa 4f       	sbci	r31, 0xFA	; 250
     e44:	85 91       	lpm	r24, Z+
     e46:	94 91       	lpm	r25, Z
     e48:	9b a3       	std	Y+35, r25	; 0x23
     e4a:	8a a3       	std	Y+34, r24	; 0x22
  dcport    = portOutputRegister(digitalPinToPort(_dc));
     e4c:	4d a1       	ldd	r20, Y+37	; 0x25
     e4e:	50 e0       	ldi	r21, 0x00	; 0
     e50:	fa 01       	movw	r30, r20
     e52:	e4 56       	subi	r30, 0x64	; 100
     e54:	fa 4f       	sbci	r31, 0xFA	; 250
     e56:	84 91       	lpm	r24, Z
     e58:	e8 2f       	mov	r30, r24
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	ee 0f       	add	r30, r30
     e5e:	ff 1f       	adc	r31, r31
     e60:	e0 55       	subi	r30, 0x50	; 80
     e62:	fa 4f       	sbci	r31, 0xFA	; 250
     e64:	85 91       	lpm	r24, Z+
     e66:	94 91       	lpm	r25, Z
     e68:	9f 8f       	std	Y+31, r25	; 0x1f
     e6a:	8e 8f       	std	Y+30, r24	; 0x1e
  clkport = &_sclk;
  rsport = &_rst;
  csport    = &_cs;
  dcport    = &_dc;
#endif
  cspinmask = digitalPinToBitMask(_cs);
     e6c:	f9 01       	movw	r30, r18
     e6e:	e8 57       	subi	r30, 0x78	; 120
     e70:	fa 4f       	sbci	r31, 0xFA	; 250
     e72:	e4 91       	lpm	r30, Z
     e74:	ec a7       	std	Y+44, r30	; 0x2c
  dcpinmask = digitalPinToBitMask(_dc);
     e76:	fa 01       	movw	r30, r20
     e78:	e8 57       	subi	r30, 0x78	; 120
     e7a:	fa 4f       	sbci	r31, 0xFA	; 250
     e7c:	e4 91       	lpm	r30, Z
     e7e:	ed a7       	std	Y+45, r30	; 0x2d

  if(hwSPI) { // Using hardware SPI
     e80:	89 8d       	ldd	r24, Y+25	; 0x19
     e82:	88 23       	and	r24, r24
     e84:	79 f0       	breq	.+30     	; 0xea4 <_ZN16Adafruit_ILI93405beginEv+0x9c>
    SPI.begin();
     e86:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <_ZN8SPIClass5beginEv>
    SPCR = (SPCR & ~SPI_MODE_MASK) | dataMode;
  }
  // This function is deprecated.  New applications should use
  // beginTransaction() to configure SPI settings.
  inline static void setClockDivider(uint8_t clockDiv) {
    SPCR = (SPCR & ~SPI_CLOCK_MASK) | (clockDiv & SPI_CLOCK_MASK);
     e8a:	8c b5       	in	r24, 0x2c	; 44
     e8c:	8c 7f       	andi	r24, 0xFC	; 252
     e8e:	8c bd       	out	0x2c, r24	; 44
    SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((clockDiv >> 2) & SPI_2XCLOCK_MASK);
     e90:	8d b5       	in	r24, 0x2d	; 45
     e92:	81 60       	ori	r24, 0x01	; 1
     e94:	8d bd       	out	0x2d, r24	; 45

  // This function is deprecated.  New applications should use
  // beginTransaction() to configure SPI settings.
  inline static void setBitOrder(uint8_t bitOrder) {
    if (bitOrder == LSBFIRST) SPCR |= _BV(DORD);
    else SPCR &= ~(_BV(DORD));
     e96:	8c b5       	in	r24, 0x2c	; 44
     e98:	8f 7d       	andi	r24, 0xDF	; 223
     e9a:	8c bd       	out	0x2c, r24	; 44
  }
  // This function is deprecated.  New applications should use
  // beginTransaction() to configure SPI settings.
  inline static void setDataMode(uint8_t dataMode) {
    SPCR = (SPCR & ~SPI_MODE_MASK) | dataMode;
     e9c:	8c b5       	in	r24, 0x2c	; 44
     e9e:	83 7f       	andi	r24, 0xF3	; 243
     ea0:	8c bd       	out	0x2c, r24	; 44
     ea2:	40 c0       	rjmp	.+128    	; 0xf24 <_ZN16Adafruit_ILI93405beginEv+0x11c>
    SPI.setClockDivider(11); // 85MHz / 11 = 7.6 MHz (full! speed!)
#endif    SPI.setBitOrder(MSBFIRST);
    SPI.setBitOrder(MSBFIRST);
    SPI.setDataMode(SPI_MODE0);
  } else {
    pinMode(_sclk, OUTPUT);
     ea4:	61 e0       	ldi	r22, 0x01	; 1
     ea6:	89 a5       	ldd	r24, Y+41	; 0x29
     ea8:	0e 94 c7 14 	call	0x298e	; 0x298e <pinMode>
    pinMode(_mosi, OUTPUT);
     eac:	61 e0       	ldi	r22, 0x01	; 1
     eae:	8f a1       	ldd	r24, Y+39	; 0x27
     eb0:	0e 94 c7 14 	call	0x298e	; 0x298e <pinMode>
    pinMode(_miso, INPUT);
     eb4:	60 e0       	ldi	r22, 0x00	; 0
     eb6:	88 a5       	ldd	r24, Y+40	; 0x28
     eb8:	0e 94 c7 14 	call	0x298e	; 0x298e <pinMode>
#ifdef __AVR__
    clkport     = portOutputRegister(digitalPinToPort(_sclk));
     ebc:	89 a5       	ldd	r24, Y+41	; 0x29
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	fc 01       	movw	r30, r24
     ec2:	e4 56       	subi	r30, 0x64	; 100
     ec4:	fa 4f       	sbci	r31, 0xFA	; 250
     ec6:	e4 91       	lpm	r30, Z
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	ee 0f       	add	r30, r30
     ecc:	ff 1f       	adc	r31, r31
     ece:	e0 55       	subi	r30, 0x50	; 80
     ed0:	fa 4f       	sbci	r31, 0xFA	; 250
     ed2:	a5 91       	lpm	r26, Z+
     ed4:	b4 91       	lpm	r27, Z
     ed6:	bd 8f       	std	Y+29, r27	; 0x1d
     ed8:	ac 8f       	std	Y+28, r26	; 0x1c
    mosiport    = portOutputRegister(digitalPinToPort(_mosi));
     eda:	2f a1       	ldd	r18, Y+39	; 0x27
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	f9 01       	movw	r30, r18
     ee0:	e4 56       	subi	r30, 0x64	; 100
     ee2:	fa 4f       	sbci	r31, 0xFA	; 250
     ee4:	e4 91       	lpm	r30, Z
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	ee 0f       	add	r30, r30
     eea:	ff 1f       	adc	r31, r31
     eec:	e0 55       	subi	r30, 0x50	; 80
     eee:	fa 4f       	sbci	r31, 0xFA	; 250
     ef0:	45 91       	lpm	r20, Z+
     ef2:	54 91       	lpm	r21, Z
     ef4:	5b 8f       	std	Y+27, r21	; 0x1b
     ef6:	4a 8f       	std	Y+26, r20	; 0x1a
#endif
#if defined(__SAM3X8E__)
    clkport     = digitalPinToPort(_sclk);
    mosiport    = digitalPinToPort(_mosi);
#endif
    clkpinmask  = digitalPinToBitMask(_sclk);
     ef8:	fc 01       	movw	r30, r24
     efa:	e8 57       	subi	r30, 0x78	; 120
     efc:	fa 4f       	sbci	r31, 0xFA	; 250
     efe:	84 91       	lpm	r24, Z
     f00:	8b a7       	std	Y+43, r24	; 0x2b
    mosipinmask = digitalPinToBitMask(_mosi);
     f02:	f9 01       	movw	r30, r18
     f04:	e8 57       	subi	r30, 0x78	; 120
     f06:	fa 4f       	sbci	r31, 0xFA	; 250
     f08:	e4 91       	lpm	r30, Z
     f0a:	ea a7       	std	Y+42, r30	; 0x2a
    CLEAR_BIT(clkport, clkpinmask);
     f0c:	9c 91       	ld	r25, X
     f0e:	e8 2f       	mov	r30, r24
     f10:	e0 95       	com	r30
     f12:	e9 23       	and	r30, r25
     f14:	ec 93       	st	X, r30
    CLEAR_BIT(mosiport, mosipinmask);
     f16:	ea 8d       	ldd	r30, Y+26	; 0x1a
     f18:	fb 8d       	ldd	r31, Y+27	; 0x1b
     f1a:	90 81       	ld	r25, Z
     f1c:	8a a5       	ldd	r24, Y+42	; 0x2a
     f1e:	80 95       	com	r24
     f20:	89 23       	and	r24, r25
     f22:	80 83       	st	Z, r24
  }

  // toggle RST low to reset

  digitalWrite(_rst, HIGH);
     f24:	61 e0       	ldi	r22, 0x01	; 1
     f26:	8e a1       	ldd	r24, Y+38	; 0x26
     f28:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <digitalWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f2c:	8f e1       	ldi	r24, 0x1F	; 31
     f2e:	9e e4       	ldi	r25, 0x4E	; 78
     f30:	01 97       	sbiw	r24, 0x01	; 1
     f32:	f1 f7       	brne	.-4      	; 0xf30 <_ZN16Adafruit_ILI93405beginEv+0x128>
     f34:	00 c0       	rjmp	.+0      	; 0xf36 <_ZN16Adafruit_ILI93405beginEv+0x12e>
     f36:	00 00       	nop
  _delay_ms(5);
  digitalWrite(_rst, LOW);
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	8e a1       	ldd	r24, Y+38	; 0x26
     f3c:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <digitalWrite>
     f40:	9f ef       	ldi	r25, 0xFF	; 255
     f42:	29 ef       	ldi	r18, 0xF9	; 249
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	91 50       	subi	r25, 0x01	; 1
     f48:	20 40       	sbci	r18, 0x00	; 0
     f4a:	80 40       	sbci	r24, 0x00	; 0
     f4c:	e1 f7       	brne	.-8      	; 0xf46 <_ZN16Adafruit_ILI93405beginEv+0x13e>
     f4e:	00 c0       	rjmp	.+0      	; 0xf50 <_ZN16Adafruit_ILI93405beginEv+0x148>
     f50:	00 00       	nop
  _delay_ms(20);
  digitalWrite(_rst, HIGH);
     f52:	61 e0       	ldi	r22, 0x01	; 1
     f54:	8e a1       	ldd	r24, Y+38	; 0x26
     f56:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <digitalWrite>
     f5a:	9f ef       	ldi	r25, 0xFF	; 255
     f5c:	22 e5       	ldi	r18, 0x52	; 82
     f5e:	87 e0       	ldi	r24, 0x07	; 7
     f60:	91 50       	subi	r25, 0x01	; 1
     f62:	20 40       	sbci	r18, 0x00	; 0
     f64:	80 40       	sbci	r24, 0x00	; 0
     f66:	e1 f7       	brne	.-8      	; 0xf60 <_ZN16Adafruit_ILI93405beginEv+0x158>
     f68:	00 c0       	rjmp	.+0      	; 0xf6a <_ZN16Adafruit_ILI93405beginEv+0x162>
     f6a:	00 00       	nop
  Serial.print("\nSelf Diagnostic: 0x"); Serial.println(x, HEX);
  */

  //if(cmdList) commandList(cmdList);
  
  writecommand(0xEF);
     f6c:	6f ee       	ldi	r22, 0xEF	; 239
     f6e:	ce 01       	movw	r24, r28
     f70:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN16Adafruit_ILI934012writecommandEh>
  writedata(0x03);
     f74:	63 e0       	ldi	r22, 0x03	; 3
     f76:	ce 01       	movw	r24, r28
     f78:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x80);
     f7c:	60 e8       	ldi	r22, 0x80	; 128
     f7e:	ce 01       	movw	r24, r28
     f80:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x02);
     f84:	62 e0       	ldi	r22, 0x02	; 2
     f86:	ce 01       	movw	r24, r28
     f88:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>

  writecommand(0xCF);  
     f8c:	6f ec       	ldi	r22, 0xCF	; 207
     f8e:	ce 01       	movw	r24, r28
     f90:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN16Adafruit_ILI934012writecommandEh>
  writedata(0x00); 
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	ce 01       	movw	r24, r28
     f98:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0XC1); 
     f9c:	61 ec       	ldi	r22, 0xC1	; 193
     f9e:	ce 01       	movw	r24, r28
     fa0:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0X30); 
     fa4:	60 e3       	ldi	r22, 0x30	; 48
     fa6:	ce 01       	movw	r24, r28
     fa8:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>

  writecommand(0xED);  
     fac:	6d ee       	ldi	r22, 0xED	; 237
     fae:	ce 01       	movw	r24, r28
     fb0:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN16Adafruit_ILI934012writecommandEh>
  writedata(0x64); 
     fb4:	64 e6       	ldi	r22, 0x64	; 100
     fb6:	ce 01       	movw	r24, r28
     fb8:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x03); 
     fbc:	63 e0       	ldi	r22, 0x03	; 3
     fbe:	ce 01       	movw	r24, r28
     fc0:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0X12); 
     fc4:	62 e1       	ldi	r22, 0x12	; 18
     fc6:	ce 01       	movw	r24, r28
     fc8:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0X81); 
     fcc:	61 e8       	ldi	r22, 0x81	; 129
     fce:	ce 01       	movw	r24, r28
     fd0:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
 
  writecommand(0xE8);  
     fd4:	68 ee       	ldi	r22, 0xE8	; 232
     fd6:	ce 01       	movw	r24, r28
     fd8:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN16Adafruit_ILI934012writecommandEh>
  writedata(0x85); 
     fdc:	65 e8       	ldi	r22, 0x85	; 133
     fde:	ce 01       	movw	r24, r28
     fe0:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x00); 
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	ce 01       	movw	r24, r28
     fe8:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x78); 
     fec:	68 e7       	ldi	r22, 0x78	; 120
     fee:	ce 01       	movw	r24, r28
     ff0:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>

  writecommand(0xCB);  
     ff4:	6b ec       	ldi	r22, 0xCB	; 203
     ff6:	ce 01       	movw	r24, r28
     ff8:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN16Adafruit_ILI934012writecommandEh>
  writedata(0x39); 
     ffc:	69 e3       	ldi	r22, 0x39	; 57
     ffe:	ce 01       	movw	r24, r28
    1000:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x2C); 
    1004:	6c e2       	ldi	r22, 0x2C	; 44
    1006:	ce 01       	movw	r24, r28
    1008:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x00); 
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	ce 01       	movw	r24, r28
    1010:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x34); 
    1014:	64 e3       	ldi	r22, 0x34	; 52
    1016:	ce 01       	movw	r24, r28
    1018:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x02); 
    101c:	62 e0       	ldi	r22, 0x02	; 2
    101e:	ce 01       	movw	r24, r28
    1020:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
 
  writecommand(0xF7);  
    1024:	67 ef       	ldi	r22, 0xF7	; 247
    1026:	ce 01       	movw	r24, r28
    1028:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN16Adafruit_ILI934012writecommandEh>
  writedata(0x20); 
    102c:	60 e2       	ldi	r22, 0x20	; 32
    102e:	ce 01       	movw	r24, r28
    1030:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>

  writecommand(0xEA);  
    1034:	6a ee       	ldi	r22, 0xEA	; 234
    1036:	ce 01       	movw	r24, r28
    1038:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN16Adafruit_ILI934012writecommandEh>
  writedata(0x00); 
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	ce 01       	movw	r24, r28
    1040:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x00); 
    1044:	60 e0       	ldi	r22, 0x00	; 0
    1046:	ce 01       	movw	r24, r28
    1048:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
 
  writecommand(ILI9340_PWCTR1);    //Power control 
    104c:	60 ec       	ldi	r22, 0xC0	; 192
    104e:	ce 01       	movw	r24, r28
    1050:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN16Adafruit_ILI934012writecommandEh>
  writedata(0x23);   //VRH[5:0] 
    1054:	63 e2       	ldi	r22, 0x23	; 35
    1056:	ce 01       	movw	r24, r28
    1058:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
 
  writecommand(ILI9340_PWCTR2);    //Power control 
    105c:	61 ec       	ldi	r22, 0xC1	; 193
    105e:	ce 01       	movw	r24, r28
    1060:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN16Adafruit_ILI934012writecommandEh>
  writedata(0x10);   //SAP[2:0];BT[3:0] 
    1064:	60 e1       	ldi	r22, 0x10	; 16
    1066:	ce 01       	movw	r24, r28
    1068:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
 
  writecommand(ILI9340_VMCTR1);    //VCM control 
    106c:	65 ec       	ldi	r22, 0xC5	; 197
    106e:	ce 01       	movw	r24, r28
    1070:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN16Adafruit_ILI934012writecommandEh>
  writedata(0x3e); //�Աȶȵ���
    1074:	6e e3       	ldi	r22, 0x3E	; 62
    1076:	ce 01       	movw	r24, r28
    1078:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x28); 
    107c:	68 e2       	ldi	r22, 0x28	; 40
    107e:	ce 01       	movw	r24, r28
    1080:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  
  writecommand(ILI9340_VMCTR2);    //VCM control2 
    1084:	67 ec       	ldi	r22, 0xC7	; 199
    1086:	ce 01       	movw	r24, r28
    1088:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN16Adafruit_ILI934012writecommandEh>
  writedata(0x86);  //--
    108c:	66 e8       	ldi	r22, 0x86	; 134
    108e:	ce 01       	movw	r24, r28
    1090:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
 
  writecommand(ILI9340_MADCTL);    // Memory Access Control 
    1094:	66 e3       	ldi	r22, 0x36	; 54
    1096:	ce 01       	movw	r24, r28
    1098:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN16Adafruit_ILI934012writecommandEh>
  writedata(ILI9340_MADCTL_MX | ILI9340_MADCTL_BGR);
    109c:	68 e4       	ldi	r22, 0x48	; 72
    109e:	ce 01       	movw	r24, r28
    10a0:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>

  writecommand(ILI9340_PIXFMT);    
    10a4:	6a e3       	ldi	r22, 0x3A	; 58
    10a6:	ce 01       	movw	r24, r28
    10a8:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN16Adafruit_ILI934012writecommandEh>
  writedata(0x55); 
    10ac:	65 e5       	ldi	r22, 0x55	; 85
    10ae:	ce 01       	movw	r24, r28
    10b0:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  
  writecommand(ILI9340_FRMCTR1);    
    10b4:	61 eb       	ldi	r22, 0xB1	; 177
    10b6:	ce 01       	movw	r24, r28
    10b8:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN16Adafruit_ILI934012writecommandEh>
  writedata(0x00);  
    10bc:	60 e0       	ldi	r22, 0x00	; 0
    10be:	ce 01       	movw	r24, r28
    10c0:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x18); 
    10c4:	68 e1       	ldi	r22, 0x18	; 24
    10c6:	ce 01       	movw	r24, r28
    10c8:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
 
  writecommand(ILI9340_DFUNCTR);    // Display Function Control 
    10cc:	66 eb       	ldi	r22, 0xB6	; 182
    10ce:	ce 01       	movw	r24, r28
    10d0:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN16Adafruit_ILI934012writecommandEh>
  writedata(0x08); 
    10d4:	68 e0       	ldi	r22, 0x08	; 8
    10d6:	ce 01       	movw	r24, r28
    10d8:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x82);
    10dc:	62 e8       	ldi	r22, 0x82	; 130
    10de:	ce 01       	movw	r24, r28
    10e0:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x27);  
    10e4:	67 e2       	ldi	r22, 0x27	; 39
    10e6:	ce 01       	movw	r24, r28
    10e8:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
 
  writecommand(0xF2);    // 3Gamma Function Disable 
    10ec:	62 ef       	ldi	r22, 0xF2	; 242
    10ee:	ce 01       	movw	r24, r28
    10f0:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN16Adafruit_ILI934012writecommandEh>
  writedata(0x00); 
    10f4:	60 e0       	ldi	r22, 0x00	; 0
    10f6:	ce 01       	movw	r24, r28
    10f8:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
 
  writecommand(ILI9340_GAMMASET);    //Gamma curve selected 
    10fc:	66 e2       	ldi	r22, 0x26	; 38
    10fe:	ce 01       	movw	r24, r28
    1100:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN16Adafruit_ILI934012writecommandEh>
  writedata(0x01); 
    1104:	61 e0       	ldi	r22, 0x01	; 1
    1106:	ce 01       	movw	r24, r28
    1108:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
 
  writecommand(ILI9340_GMCTRP1);    //Set Gamma 
    110c:	60 ee       	ldi	r22, 0xE0	; 224
    110e:	ce 01       	movw	r24, r28
    1110:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN16Adafruit_ILI934012writecommandEh>
  writedata(0x0F); 
    1114:	6f e0       	ldi	r22, 0x0F	; 15
    1116:	ce 01       	movw	r24, r28
    1118:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x31); 
    111c:	61 e3       	ldi	r22, 0x31	; 49
    111e:	ce 01       	movw	r24, r28
    1120:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x2B); 
    1124:	6b e2       	ldi	r22, 0x2B	; 43
    1126:	ce 01       	movw	r24, r28
    1128:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x0C); 
    112c:	6c e0       	ldi	r22, 0x0C	; 12
    112e:	ce 01       	movw	r24, r28
    1130:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x0E); 
    1134:	6e e0       	ldi	r22, 0x0E	; 14
    1136:	ce 01       	movw	r24, r28
    1138:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x08); 
    113c:	68 e0       	ldi	r22, 0x08	; 8
    113e:	ce 01       	movw	r24, r28
    1140:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x4E); 
    1144:	6e e4       	ldi	r22, 0x4E	; 78
    1146:	ce 01       	movw	r24, r28
    1148:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0xF1); 
    114c:	61 ef       	ldi	r22, 0xF1	; 241
    114e:	ce 01       	movw	r24, r28
    1150:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x37); 
    1154:	67 e3       	ldi	r22, 0x37	; 55
    1156:	ce 01       	movw	r24, r28
    1158:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x07); 
    115c:	67 e0       	ldi	r22, 0x07	; 7
    115e:	ce 01       	movw	r24, r28
    1160:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x10); 
    1164:	60 e1       	ldi	r22, 0x10	; 16
    1166:	ce 01       	movw	r24, r28
    1168:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x03); 
    116c:	63 e0       	ldi	r22, 0x03	; 3
    116e:	ce 01       	movw	r24, r28
    1170:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x0E); 
    1174:	6e e0       	ldi	r22, 0x0E	; 14
    1176:	ce 01       	movw	r24, r28
    1178:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x09); 
    117c:	69 e0       	ldi	r22, 0x09	; 9
    117e:	ce 01       	movw	r24, r28
    1180:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x00); 
    1184:	60 e0       	ldi	r22, 0x00	; 0
    1186:	ce 01       	movw	r24, r28
    1188:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  
  writecommand(ILI9340_GMCTRN1);    //Set Gamma 
    118c:	61 ee       	ldi	r22, 0xE1	; 225
    118e:	ce 01       	movw	r24, r28
    1190:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN16Adafruit_ILI934012writecommandEh>
  writedata(0x00); 
    1194:	60 e0       	ldi	r22, 0x00	; 0
    1196:	ce 01       	movw	r24, r28
    1198:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x0E); 
    119c:	6e e0       	ldi	r22, 0x0E	; 14
    119e:	ce 01       	movw	r24, r28
    11a0:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x14); 
    11a4:	64 e1       	ldi	r22, 0x14	; 20
    11a6:	ce 01       	movw	r24, r28
    11a8:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x03); 
    11ac:	63 e0       	ldi	r22, 0x03	; 3
    11ae:	ce 01       	movw	r24, r28
    11b0:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x11); 
    11b4:	61 e1       	ldi	r22, 0x11	; 17
    11b6:	ce 01       	movw	r24, r28
    11b8:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x07); 
    11bc:	67 e0       	ldi	r22, 0x07	; 7
    11be:	ce 01       	movw	r24, r28
    11c0:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x31); 
    11c4:	61 e3       	ldi	r22, 0x31	; 49
    11c6:	ce 01       	movw	r24, r28
    11c8:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0xC1); 
    11cc:	61 ec       	ldi	r22, 0xC1	; 193
    11ce:	ce 01       	movw	r24, r28
    11d0:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x48); 
    11d4:	68 e4       	ldi	r22, 0x48	; 72
    11d6:	ce 01       	movw	r24, r28
    11d8:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x08); 
    11dc:	68 e0       	ldi	r22, 0x08	; 8
    11de:	ce 01       	movw	r24, r28
    11e0:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x0F); 
    11e4:	6f e0       	ldi	r22, 0x0F	; 15
    11e6:	ce 01       	movw	r24, r28
    11e8:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x0C); 
    11ec:	6c e0       	ldi	r22, 0x0C	; 12
    11ee:	ce 01       	movw	r24, r28
    11f0:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x31); 
    11f4:	61 e3       	ldi	r22, 0x31	; 49
    11f6:	ce 01       	movw	r24, r28
    11f8:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x36); 
    11fc:	66 e3       	ldi	r22, 0x36	; 54
    11fe:	ce 01       	movw	r24, r28
    1200:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(0x0F); 
    1204:	6f e0       	ldi	r22, 0x0F	; 15
    1206:	ce 01       	movw	r24, r28
    1208:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>

  writecommand(ILI9340_SLPOUT);    //Exit Sleep 
    120c:	61 e1       	ldi	r22, 0x11	; 17
    120e:	ce 01       	movw	r24, r28
    1210:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN16Adafruit_ILI934012writecommandEh>
    1214:	9f ef       	ldi	r25, 0xFF	; 255
    1216:	2b ed       	ldi	r18, 0xDB	; 219
    1218:	85 e0       	ldi	r24, 0x05	; 5
    121a:	91 50       	subi	r25, 0x01	; 1
    121c:	20 40       	sbci	r18, 0x00	; 0
    121e:	80 40       	sbci	r24, 0x00	; 0
    1220:	e1 f7       	brne	.-8      	; 0x121a <_ZN16Adafruit_ILI93405beginEv+0x412>
    1222:	00 c0       	rjmp	.+0      	; 0x1224 <_ZN16Adafruit_ILI93405beginEv+0x41c>
    1224:	00 00       	nop
  _delay_ms(120); 		
  writecommand(ILI9340_DISPON);    //Display on 
    1226:	69 e2       	ldi	r22, 0x29	; 41
    1228:	ce 01       	movw	r24, r28
    122a:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN16Adafruit_ILI934012writecommandEh>
}
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	08 95       	ret

00001234 <_ZN16Adafruit_ILI934013setAddrWindowEjjjj>:


void Adafruit_ILI9340::setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1,
 uint16_t y1) {
    1234:	af 92       	push	r10
    1236:	bf 92       	push	r11
    1238:	cf 92       	push	r12
    123a:	df 92       	push	r13
    123c:	ef 92       	push	r14
    123e:	ff 92       	push	r15
    1240:	0f 93       	push	r16
    1242:	1f 93       	push	r17
    1244:	cf 93       	push	r28
    1246:	df 93       	push	r29
    1248:	ec 01       	movw	r28, r24
    124a:	b6 2e       	mov	r11, r22
    124c:	a7 2e       	mov	r10, r23
    124e:	f4 2e       	mov	r15, r20
    1250:	e5 2e       	mov	r14, r21
    1252:	d2 2e       	mov	r13, r18
    1254:	c3 2e       	mov	r12, r19

  writecommand(ILI9340_CASET); // Column addr set
    1256:	6a e2       	ldi	r22, 0x2A	; 42
    1258:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN16Adafruit_ILI934012writecommandEh>
  writedata(x0 >> 8);
    125c:	6a 2d       	mov	r22, r10
    125e:	ce 01       	movw	r24, r28
    1260:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(x0 & 0xFF);     // XSTART 
    1264:	6b 2d       	mov	r22, r11
    1266:	ce 01       	movw	r24, r28
    1268:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(x1 >> 8);
    126c:	6c 2d       	mov	r22, r12
    126e:	ce 01       	movw	r24, r28
    1270:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(x1 & 0xFF);     // XEND
    1274:	6d 2d       	mov	r22, r13
    1276:	ce 01       	movw	r24, r28
    1278:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>

  writecommand(ILI9340_PASET); // Row addr set
    127c:	6b e2       	ldi	r22, 0x2B	; 43
    127e:	ce 01       	movw	r24, r28
    1280:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN16Adafruit_ILI934012writecommandEh>
  writedata(y0>>8);
    1284:	6e 2d       	mov	r22, r14
    1286:	ce 01       	movw	r24, r28
    1288:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(y0);     // YSTART
    128c:	6f 2d       	mov	r22, r15
    128e:	ce 01       	movw	r24, r28
    1290:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(y1>>8);
    1294:	61 2f       	mov	r22, r17
    1296:	ce 01       	movw	r24, r28
    1298:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>
  writedata(y1);     // YEND
    129c:	60 2f       	mov	r22, r16
    129e:	ce 01       	movw	r24, r28
    12a0:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN16Adafruit_ILI93409writedataEh>

  writecommand(ILI9340_RAMWR); // write to RAM
    12a4:	6c e2       	ldi	r22, 0x2C	; 44
    12a6:	ce 01       	movw	r24, r28
    12a8:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN16Adafruit_ILI934012writecommandEh>
}
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	1f 91       	pop	r17
    12b2:	0f 91       	pop	r16
    12b4:	ff 90       	pop	r15
    12b6:	ef 90       	pop	r14
    12b8:	df 90       	pop	r13
    12ba:	cf 90       	pop	r12
    12bc:	bf 90       	pop	r11
    12be:	af 90       	pop	r10
    12c0:	08 95       	ret

000012c2 <_ZN16Adafruit_ILI93409drawPixelEiij>:

  SET_BIT(csport, cspinmask);
  //digitalWrite(_cs, HIGH);
}

void Adafruit_ILI9340::drawPixel(int16_t x, int16_t y, uint16_t color) {
    12c2:	ef 92       	push	r14
    12c4:	ff 92       	push	r15
    12c6:	0f 93       	push	r16
    12c8:	1f 93       	push	r17
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29

  if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) return;
    12ce:	77 23       	and	r23, r23
    12d0:	bc f1       	brlt	.+110    	; 0x1340 <_ZN16Adafruit_ILI93409drawPixelEiij+0x7e>
    12d2:	dc 01       	movw	r26, r24
    12d4:	18 96       	adiw	r26, 0x08	; 8
    12d6:	ed 91       	ld	r30, X+
    12d8:	fc 91       	ld	r31, X
    12da:	19 97       	sbiw	r26, 0x09	; 9
    12dc:	6e 17       	cp	r22, r30
    12de:	7f 07       	cpc	r23, r31
    12e0:	7c f5       	brge	.+94     	; 0x1340 <_ZN16Adafruit_ILI93409drawPixelEiij+0x7e>
    12e2:	55 23       	and	r21, r21
    12e4:	6c f1       	brlt	.+90     	; 0x1340 <_ZN16Adafruit_ILI93409drawPixelEiij+0x7e>
    12e6:	1a 96       	adiw	r26, 0x0a	; 10
    12e8:	ed 91       	ld	r30, X+
    12ea:	fc 91       	ld	r31, X
    12ec:	1b 97       	sbiw	r26, 0x0b	; 11
    12ee:	4e 17       	cp	r20, r30
    12f0:	5f 07       	cpc	r21, r31
    12f2:	34 f5       	brge	.+76     	; 0x1340 <_ZN16Adafruit_ILI93409drawPixelEiij+0x7e>
    12f4:	e3 2e       	mov	r14, r19
    12f6:	f2 2e       	mov	r15, r18
    12f8:	ec 01       	movw	r28, r24

  setAddrWindow(x,y,x+1,y+1);
    12fa:	8a 01       	movw	r16, r20
    12fc:	0f 5f       	subi	r16, 0xFF	; 255
    12fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1300:	9b 01       	movw	r18, r22
    1302:	2f 5f       	subi	r18, 0xFF	; 255
    1304:	3f 4f       	sbci	r19, 0xFF	; 255
    1306:	0e 94 1a 09 	call	0x1234	; 0x1234 <_ZN16Adafruit_ILI934013setAddrWindowEjjjj>

  //digitalWrite(_dc, HIGH);
  SET_BIT(dcport, dcpinmask);
    130a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    130c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    130e:	90 81       	ld	r25, Z
    1310:	8d a5       	ldd	r24, Y+45	; 0x2d
    1312:	89 2b       	or	r24, r25
    1314:	80 83       	st	Z, r24
  //digitalWrite(_cs, LOW);
  CLEAR_BIT(csport, cspinmask);
    1316:	ea a1       	ldd	r30, Y+34	; 0x22
    1318:	fb a1       	ldd	r31, Y+35	; 0x23
    131a:	90 81       	ld	r25, Z
    131c:	8c a5       	ldd	r24, Y+44	; 0x2c
    131e:	80 95       	com	r24
    1320:	89 23       	and	r24, r25
    1322:	80 83       	st	Z, r24

  spiwrite(color >> 8);
    1324:	6e 2d       	mov	r22, r14
    1326:	ce 01       	movw	r24, r28
    1328:	0e 94 86 06 	call	0xd0c	; 0xd0c <_ZN16Adafruit_ILI93408spiwriteEh>
  spiwrite(color);
    132c:	6f 2d       	mov	r22, r15
    132e:	ce 01       	movw	r24, r28
    1330:	0e 94 86 06 	call	0xd0c	; 0xd0c <_ZN16Adafruit_ILI93408spiwriteEh>

  SET_BIT(csport, cspinmask);
    1334:	ea a1       	ldd	r30, Y+34	; 0x22
    1336:	fb a1       	ldd	r31, Y+35	; 0x23
    1338:	90 81       	ld	r25, Z
    133a:	8c a5       	ldd	r24, Y+44	; 0x2c
    133c:	89 2b       	or	r24, r25
    133e:	80 83       	st	Z, r24
  //digitalWrite(_cs, HIGH);
}
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	1f 91       	pop	r17
    1346:	0f 91       	pop	r16
    1348:	ff 90       	pop	r15
    134a:	ef 90       	pop	r14
    134c:	08 95       	ret

0000134e <_ZN16Adafruit_ILI934013drawFastVLineEiiij>:


void Adafruit_ILI9340::drawFastVLine(int16_t x, int16_t y, int16_t h,
 uint16_t color) {
    134e:	cf 92       	push	r12
    1350:	df 92       	push	r13
    1352:	ef 92       	push	r14
    1354:	ff 92       	push	r15
    1356:	0f 93       	push	r16
    1358:	1f 93       	push	r17
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	7c 01       	movw	r14, r24
    1360:	e9 01       	movw	r28, r18
    1362:	c0 2e       	mov	r12, r16
    1364:	d1 2e       	mov	r13, r17

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
    1366:	dc 01       	movw	r26, r24
    1368:	18 96       	adiw	r26, 0x08	; 8
    136a:	8d 91       	ld	r24, X+
    136c:	9c 91       	ld	r25, X
    136e:	19 97       	sbiw	r26, 0x09	; 9
    1370:	68 17       	cp	r22, r24
    1372:	79 07       	cpc	r23, r25
    1374:	0c f0       	brlt	.+2      	; 0x1378 <_ZN16Adafruit_ILI934013drawFastVLineEiiij+0x2a>
    1376:	49 c0       	rjmp	.+146    	; 0x140a <_ZN16Adafruit_ILI934013drawFastVLineEiiij+0xbc>
    1378:	1a 96       	adiw	r26, 0x0a	; 10
    137a:	8d 91       	ld	r24, X+
    137c:	9c 91       	ld	r25, X
    137e:	1b 97       	sbiw	r26, 0x0b	; 11
    1380:	48 17       	cp	r20, r24
    1382:	59 07       	cpc	r21, r25
    1384:	0c f0       	brlt	.+2      	; 0x1388 <_ZN16Adafruit_ILI934013drawFastVLineEiiij+0x3a>
    1386:	41 c0       	rjmp	.+130    	; 0x140a <_ZN16Adafruit_ILI934013drawFastVLineEiiij+0xbc>

  if((y+h-1) >= _height) 
    1388:	9a 01       	movw	r18, r20
    138a:	2c 0f       	add	r18, r28
    138c:	3d 1f       	adc	r19, r29
    138e:	21 50       	subi	r18, 0x01	; 1
    1390:	31 09       	sbc	r19, r1
    1392:	28 17       	cp	r18, r24
    1394:	39 07       	cpc	r19, r25
    1396:	1c f0       	brlt	.+6      	; 0x139e <_ZN16Adafruit_ILI934013drawFastVLineEiiij+0x50>
    h = _height-y;
    1398:	ec 01       	movw	r28, r24
    139a:	c4 1b       	sub	r28, r20
    139c:	d5 0b       	sbc	r29, r21

  setAddrWindow(x, y, x, y+h-1);
    139e:	8a 01       	movw	r16, r20
    13a0:	0c 0f       	add	r16, r28
    13a2:	1d 1f       	adc	r17, r29
    13a4:	01 50       	subi	r16, 0x01	; 1
    13a6:	11 09       	sbc	r17, r1
    13a8:	9b 01       	movw	r18, r22
    13aa:	c7 01       	movw	r24, r14
    13ac:	0e 94 1a 09 	call	0x1234	; 0x1234 <_ZN16Adafruit_ILI934013setAddrWindowEjjjj>

  uint8_t hi = color >> 8, lo = color;
    13b0:	1d 2d       	mov	r17, r13
    13b2:	0c 2d       	mov	r16, r12

  SET_BIT(dcport, dcpinmask);
    13b4:	d7 01       	movw	r26, r14
    13b6:	5e 96       	adiw	r26, 0x1e	; 30
    13b8:	ed 91       	ld	r30, X+
    13ba:	fc 91       	ld	r31, X
    13bc:	5f 97       	sbiw	r26, 0x1f	; 31
    13be:	90 81       	ld	r25, Z
    13c0:	9d 96       	adiw	r26, 0x2d	; 45
    13c2:	8c 91       	ld	r24, X
    13c4:	9d 97       	sbiw	r26, 0x2d	; 45
    13c6:	89 2b       	or	r24, r25
    13c8:	80 83       	st	Z, r24
  //digitalWrite(_dc, HIGH);
  CLEAR_BIT(csport, cspinmask);
    13ca:	92 96       	adiw	r26, 0x22	; 34
    13cc:	ed 91       	ld	r30, X+
    13ce:	fc 91       	ld	r31, X
    13d0:	93 97       	sbiw	r26, 0x23	; 35
    13d2:	90 81       	ld	r25, Z
    13d4:	9c 96       	adiw	r26, 0x2c	; 44
    13d6:	8c 91       	ld	r24, X
    13d8:	80 95       	com	r24
    13da:	89 23       	and	r24, r25
    13dc:	80 83       	st	Z, r24
  //digitalWrite(_cs, LOW);

  while (h--) {
    13de:	20 97       	sbiw	r28, 0x00	; 0
    13e0:	51 f0       	breq	.+20     	; 0x13f6 <_ZN16Adafruit_ILI934013drawFastVLineEiiij+0xa8>
    spiwrite(hi);
    13e2:	61 2f       	mov	r22, r17
    13e4:	c7 01       	movw	r24, r14
    13e6:	0e 94 86 06 	call	0xd0c	; 0xd0c <_ZN16Adafruit_ILI93408spiwriteEh>
    spiwrite(lo);
    13ea:	60 2f       	mov	r22, r16
    13ec:	c7 01       	movw	r24, r14
    13ee:	0e 94 86 06 	call	0xd0c	; 0xd0c <_ZN16Adafruit_ILI93408spiwriteEh>
    13f2:	21 97       	sbiw	r28, 0x01	; 1
  SET_BIT(dcport, dcpinmask);
  //digitalWrite(_dc, HIGH);
  CLEAR_BIT(csport, cspinmask);
  //digitalWrite(_cs, LOW);

  while (h--) {
    13f4:	b1 f7       	brne	.-20     	; 0x13e2 <_ZN16Adafruit_ILI934013drawFastVLineEiiij+0x94>
    spiwrite(hi);
    spiwrite(lo);
  }
  SET_BIT(csport, cspinmask);
    13f6:	d7 01       	movw	r26, r14
    13f8:	92 96       	adiw	r26, 0x22	; 34
    13fa:	ed 91       	ld	r30, X+
    13fc:	fc 91       	ld	r31, X
    13fe:	93 97       	sbiw	r26, 0x23	; 35
    1400:	90 81       	ld	r25, Z
    1402:	9c 96       	adiw	r26, 0x2c	; 44
    1404:	8c 91       	ld	r24, X
    1406:	89 2b       	or	r24, r25
    1408:	80 83       	st	Z, r24
  //digitalWrite(_cs, HIGH);
}
    140a:	df 91       	pop	r29
    140c:	cf 91       	pop	r28
    140e:	1f 91       	pop	r17
    1410:	0f 91       	pop	r16
    1412:	ff 90       	pop	r15
    1414:	ef 90       	pop	r14
    1416:	df 90       	pop	r13
    1418:	cf 90       	pop	r12
    141a:	08 95       	ret

0000141c <_ZN16Adafruit_ILI934013drawFastHLineEiiij>:


void Adafruit_ILI9340::drawFastHLine(int16_t x, int16_t y, int16_t w,
  uint16_t color) {
    141c:	cf 92       	push	r12
    141e:	df 92       	push	r13
    1420:	ef 92       	push	r14
    1422:	ff 92       	push	r15
    1424:	0f 93       	push	r16
    1426:	1f 93       	push	r17
    1428:	cf 93       	push	r28
    142a:	df 93       	push	r29
    142c:	7c 01       	movw	r14, r24
    142e:	e9 01       	movw	r28, r18
    1430:	c0 2e       	mov	r12, r16
    1432:	d1 2e       	mov	r13, r17

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
    1434:	dc 01       	movw	r26, r24
    1436:	18 96       	adiw	r26, 0x08	; 8
    1438:	8d 91       	ld	r24, X+
    143a:	9c 91       	ld	r25, X
    143c:	19 97       	sbiw	r26, 0x09	; 9
    143e:	68 17       	cp	r22, r24
    1440:	79 07       	cpc	r23, r25
    1442:	0c f0       	brlt	.+2      	; 0x1446 <_ZN16Adafruit_ILI934013drawFastHLineEiiij+0x2a>
    1444:	49 c0       	rjmp	.+146    	; 0x14d8 <_ZN16Adafruit_ILI934013drawFastHLineEiiij+0xbc>
    1446:	1a 96       	adiw	r26, 0x0a	; 10
    1448:	2d 91       	ld	r18, X+
    144a:	3c 91       	ld	r19, X
    144c:	1b 97       	sbiw	r26, 0x0b	; 11
    144e:	42 17       	cp	r20, r18
    1450:	53 07       	cpc	r21, r19
    1452:	0c f0       	brlt	.+2      	; 0x1456 <_ZN16Adafruit_ILI934013drawFastHLineEiiij+0x3a>
    1454:	41 c0       	rjmp	.+130    	; 0x14d8 <_ZN16Adafruit_ILI934013drawFastHLineEiiij+0xbc>
  if((x+w-1) >= _width)  w = _width-x;
    1456:	9b 01       	movw	r18, r22
    1458:	2c 0f       	add	r18, r28
    145a:	3d 1f       	adc	r19, r29
    145c:	21 50       	subi	r18, 0x01	; 1
    145e:	31 09       	sbc	r19, r1
    1460:	28 17       	cp	r18, r24
    1462:	39 07       	cpc	r19, r25
    1464:	1c f0       	brlt	.+6      	; 0x146c <_ZN16Adafruit_ILI934013drawFastHLineEiiij+0x50>
    1466:	ec 01       	movw	r28, r24
    1468:	c6 1b       	sub	r28, r22
    146a:	d7 0b       	sbc	r29, r23
  setAddrWindow(x, y, x+w-1, y);
    146c:	9b 01       	movw	r18, r22
    146e:	2c 0f       	add	r18, r28
    1470:	3d 1f       	adc	r19, r29
    1472:	21 50       	subi	r18, 0x01	; 1
    1474:	31 09       	sbc	r19, r1
    1476:	8a 01       	movw	r16, r20
    1478:	c7 01       	movw	r24, r14
    147a:	0e 94 1a 09 	call	0x1234	; 0x1234 <_ZN16Adafruit_ILI934013setAddrWindowEjjjj>

  uint8_t hi = color >> 8, lo = color;
    147e:	1d 2d       	mov	r17, r13
    1480:	0c 2d       	mov	r16, r12
  SET_BIT(dcport, dcpinmask);
    1482:	d7 01       	movw	r26, r14
    1484:	5e 96       	adiw	r26, 0x1e	; 30
    1486:	ed 91       	ld	r30, X+
    1488:	fc 91       	ld	r31, X
    148a:	5f 97       	sbiw	r26, 0x1f	; 31
    148c:	90 81       	ld	r25, Z
    148e:	9d 96       	adiw	r26, 0x2d	; 45
    1490:	8c 91       	ld	r24, X
    1492:	9d 97       	sbiw	r26, 0x2d	; 45
    1494:	89 2b       	or	r24, r25
    1496:	80 83       	st	Z, r24
  CLEAR_BIT(csport, cspinmask);
    1498:	92 96       	adiw	r26, 0x22	; 34
    149a:	ed 91       	ld	r30, X+
    149c:	fc 91       	ld	r31, X
    149e:	93 97       	sbiw	r26, 0x23	; 35
    14a0:	90 81       	ld	r25, Z
    14a2:	9c 96       	adiw	r26, 0x2c	; 44
    14a4:	8c 91       	ld	r24, X
    14a6:	80 95       	com	r24
    14a8:	89 23       	and	r24, r25
    14aa:	80 83       	st	Z, r24
  //digitalWrite(_dc, HIGH);
  //digitalWrite(_cs, LOW);
  while (w--) {
    14ac:	20 97       	sbiw	r28, 0x00	; 0
    14ae:	51 f0       	breq	.+20     	; 0x14c4 <_ZN16Adafruit_ILI934013drawFastHLineEiiij+0xa8>
    spiwrite(hi);
    14b0:	61 2f       	mov	r22, r17
    14b2:	c7 01       	movw	r24, r14
    14b4:	0e 94 86 06 	call	0xd0c	; 0xd0c <_ZN16Adafruit_ILI93408spiwriteEh>
    spiwrite(lo);
    14b8:	60 2f       	mov	r22, r16
    14ba:	c7 01       	movw	r24, r14
    14bc:	0e 94 86 06 	call	0xd0c	; 0xd0c <_ZN16Adafruit_ILI93408spiwriteEh>
    14c0:	21 97       	sbiw	r28, 0x01	; 1
  uint8_t hi = color >> 8, lo = color;
  SET_BIT(dcport, dcpinmask);
  CLEAR_BIT(csport, cspinmask);
  //digitalWrite(_dc, HIGH);
  //digitalWrite(_cs, LOW);
  while (w--) {
    14c2:	b1 f7       	brne	.-20     	; 0x14b0 <_ZN16Adafruit_ILI934013drawFastHLineEiiij+0x94>
    spiwrite(hi);
    spiwrite(lo);
  }
  SET_BIT(csport, cspinmask);
    14c4:	d7 01       	movw	r26, r14
    14c6:	92 96       	adiw	r26, 0x22	; 34
    14c8:	ed 91       	ld	r30, X+
    14ca:	fc 91       	ld	r31, X
    14cc:	93 97       	sbiw	r26, 0x23	; 35
    14ce:	90 81       	ld	r25, Z
    14d0:	9c 96       	adiw	r26, 0x2c	; 44
    14d2:	8c 91       	ld	r24, X
    14d4:	89 2b       	or	r24, r25
    14d6:	80 83       	st	Z, r24
  //digitalWrite(_cs, HIGH);
}
    14d8:	df 91       	pop	r29
    14da:	cf 91       	pop	r28
    14dc:	1f 91       	pop	r17
    14de:	0f 91       	pop	r16
    14e0:	ff 90       	pop	r15
    14e2:	ef 90       	pop	r14
    14e4:	df 90       	pop	r13
    14e6:	cf 90       	pop	r12
    14e8:	08 95       	ret

000014ea <_ZN16Adafruit_ILI93408fillRectEiiiij>:
  fillRect(0, 0,  _width, _height, color);
}

// fill a rectangle
void Adafruit_ILI9340::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
  uint16_t color) {
    14ea:	8f 92       	push	r8
    14ec:	9f 92       	push	r9
    14ee:	af 92       	push	r10
    14f0:	bf 92       	push	r11
    14f2:	cf 92       	push	r12
    14f4:	df 92       	push	r13
    14f6:	ef 92       	push	r14
    14f8:	ff 92       	push	r15
    14fa:	0f 93       	push	r16
    14fc:	1f 93       	push	r17
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
    1502:	6c 01       	movw	r12, r24
    1504:	59 01       	movw	r10, r18
    1506:	e8 01       	movw	r28, r16

  // rudimentary clipping (drawChar w/big text requires this)
  if((x >= _width) || (y >= _height)) return;
    1508:	dc 01       	movw	r26, r24
    150a:	18 96       	adiw	r26, 0x08	; 8
    150c:	8d 91       	ld	r24, X+
    150e:	9c 91       	ld	r25, X
    1510:	19 97       	sbiw	r26, 0x09	; 9
    1512:	68 17       	cp	r22, r24
    1514:	79 07       	cpc	r23, r25
    1516:	0c f0       	brlt	.+2      	; 0x151a <_ZN16Adafruit_ILI93408fillRectEiiiij+0x30>
    1518:	63 c0       	rjmp	.+198    	; 0x15e0 <_ZN16Adafruit_ILI93408fillRectEiiiij+0xf6>
    151a:	1a 96       	adiw	r26, 0x0a	; 10
    151c:	2d 91       	ld	r18, X+
    151e:	3c 91       	ld	r19, X
    1520:	1b 97       	sbiw	r26, 0x0b	; 11
    1522:	42 17       	cp	r20, r18
    1524:	53 07       	cpc	r21, r19
    1526:	0c f0       	brlt	.+2      	; 0x152a <_ZN16Adafruit_ILI93408fillRectEiiiij+0x40>
    1528:	5b c0       	rjmp	.+182    	; 0x15e0 <_ZN16Adafruit_ILI93408fillRectEiiiij+0xf6>
  if((x + w - 1) >= _width)  w = _width  - x;
    152a:	fb 01       	movw	r30, r22
    152c:	ea 0d       	add	r30, r10
    152e:	fb 1d       	adc	r31, r11
    1530:	31 97       	sbiw	r30, 0x01	; 1
    1532:	e8 17       	cp	r30, r24
    1534:	f9 07       	cpc	r31, r25
    1536:	1c f0       	brlt	.+6      	; 0x153e <_ZN16Adafruit_ILI93408fillRectEiiiij+0x54>
    1538:	5c 01       	movw	r10, r24
    153a:	a6 1a       	sub	r10, r22
    153c:	b7 0a       	sbc	r11, r23
  if((y + h - 1) >= _height) h = _height - y;
    153e:	ca 01       	movw	r24, r20
    1540:	8c 0f       	add	r24, r28
    1542:	9d 1f       	adc	r25, r29
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	82 17       	cp	r24, r18
    1548:	93 07       	cpc	r25, r19
    154a:	1c f0       	brlt	.+6      	; 0x1552 <_ZN16Adafruit_ILI93408fillRectEiiiij+0x68>
    154c:	e9 01       	movw	r28, r18
    154e:	c4 1b       	sub	r28, r20
    1550:	d5 0b       	sbc	r29, r21

  setAddrWindow(x, y, x+w-1, y+h-1);
    1552:	8a 01       	movw	r16, r20
    1554:	0c 0f       	add	r16, r28
    1556:	1d 1f       	adc	r17, r29
    1558:	01 50       	subi	r16, 0x01	; 1
    155a:	11 09       	sbc	r17, r1
    155c:	9b 01       	movw	r18, r22
    155e:	2a 0d       	add	r18, r10
    1560:	3b 1d       	adc	r19, r11
    1562:	21 50       	subi	r18, 0x01	; 1
    1564:	31 09       	sbc	r19, r1
    1566:	c6 01       	movw	r24, r12
    1568:	0e 94 1a 09 	call	0x1234	; 0x1234 <_ZN16Adafruit_ILI934013setAddrWindowEjjjj>

  uint8_t hi = color >> 8, lo = color;

  SET_BIT(dcport, dcpinmask);
    156c:	d6 01       	movw	r26, r12
    156e:	5e 96       	adiw	r26, 0x1e	; 30
    1570:	ed 91       	ld	r30, X+
    1572:	fc 91       	ld	r31, X
    1574:	5f 97       	sbiw	r26, 0x1f	; 31
    1576:	90 81       	ld	r25, Z
    1578:	9d 96       	adiw	r26, 0x2d	; 45
    157a:	8c 91       	ld	r24, X
    157c:	9d 97       	sbiw	r26, 0x2d	; 45
    157e:	89 2b       	or	r24, r25
    1580:	80 83       	st	Z, r24
  //digitalWrite(_dc, HIGH);
  CLEAR_BIT(csport, cspinmask);
    1582:	92 96       	adiw	r26, 0x22	; 34
    1584:	ed 91       	ld	r30, X+
    1586:	fc 91       	ld	r31, X
    1588:	93 97       	sbiw	r26, 0x23	; 35
    158a:	90 81       	ld	r25, Z
    158c:	9c 96       	adiw	r26, 0x2c	; 44
    158e:	8c 91       	ld	r24, X
    1590:	80 95       	com	r24
    1592:	89 23       	and	r24, r25
    1594:	80 83       	st	Z, r24
  //digitalWrite(_cs, LOW);

  for(y=h; y>0; y--) {
    1596:	1c 16       	cp	r1, r28
    1598:	1d 06       	cpc	r1, r29
    159a:	8c f0       	brlt	.+34     	; 0x15be <_ZN16Adafruit_ILI93408fillRectEiiiij+0xd4>
    159c:	17 c0       	rjmp	.+46     	; 0x15cc <_ZN16Adafruit_ILI93408fillRectEiiiij+0xe2>
    for(x=w; x>0; x--) {
    159e:	c8 2d       	mov	r28, r8
    15a0:	d9 2d       	mov	r29, r9
      spiwrite(hi);
    15a2:	6f 2d       	mov	r22, r15
    15a4:	c6 01       	movw	r24, r12
    15a6:	0e 94 86 06 	call	0xd0c	; 0xd0c <_ZN16Adafruit_ILI93408spiwriteEh>
      spiwrite(lo);
    15aa:	6e 2d       	mov	r22, r14
    15ac:	c6 01       	movw	r24, r12
    15ae:	0e 94 86 06 	call	0xd0c	; 0xd0c <_ZN16Adafruit_ILI93408spiwriteEh>
  //digitalWrite(_dc, HIGH);
  CLEAR_BIT(csport, cspinmask);
  //digitalWrite(_cs, LOW);

  for(y=h; y>0; y--) {
    for(x=w; x>0; x--) {
    15b2:	21 97       	sbiw	r28, 0x01	; 1
    15b4:	b1 f7       	brne	.-20     	; 0x15a2 <_ZN16Adafruit_ILI93408fillRectEiiiij+0xb8>
  SET_BIT(dcport, dcpinmask);
  //digitalWrite(_dc, HIGH);
  CLEAR_BIT(csport, cspinmask);
  //digitalWrite(_cs, LOW);

  for(y=h; y>0; y--) {
    15b6:	01 50       	subi	r16, 0x01	; 1
    15b8:	11 09       	sbc	r17, r1
    15ba:	21 f4       	brne	.+8      	; 0x15c4 <_ZN16Adafruit_ILI93408fillRectEiiiij+0xda>
    15bc:	07 c0       	rjmp	.+14     	; 0x15cc <_ZN16Adafruit_ILI93408fillRectEiiiij+0xe2>
    15be:	8e 01       	movw	r16, r28
    for(x=w; x>0; x--) {
    15c0:	8a 2c       	mov	r8, r10
    15c2:	9b 2c       	mov	r9, r11
    15c4:	1a 14       	cp	r1, r10
    15c6:	1b 04       	cpc	r1, r11
    15c8:	54 f3       	brlt	.-44     	; 0x159e <_ZN16Adafruit_ILI93408fillRectEiiiij+0xb4>
    15ca:	f5 cf       	rjmp	.-22     	; 0x15b6 <_ZN16Adafruit_ILI93408fillRectEiiiij+0xcc>
      spiwrite(hi);
      spiwrite(lo);
    }
  }
  //digitalWrite(_cs, HIGH);
  SET_BIT(csport, cspinmask);
    15cc:	d6 01       	movw	r26, r12
    15ce:	92 96       	adiw	r26, 0x22	; 34
    15d0:	ed 91       	ld	r30, X+
    15d2:	fc 91       	ld	r31, X
    15d4:	93 97       	sbiw	r26, 0x23	; 35
    15d6:	90 81       	ld	r25, Z
    15d8:	9c 96       	adiw	r26, 0x2c	; 44
    15da:	8c 91       	ld	r24, X
    15dc:	89 2b       	or	r24, r25
    15de:	80 83       	st	Z, r24
}
    15e0:	df 91       	pop	r29
    15e2:	cf 91       	pop	r28
    15e4:	1f 91       	pop	r17
    15e6:	0f 91       	pop	r16
    15e8:	ff 90       	pop	r15
    15ea:	ef 90       	pop	r14
    15ec:	df 90       	pop	r13
    15ee:	cf 90       	pop	r12
    15f0:	bf 90       	pop	r11
    15f2:	af 90       	pop	r10
    15f4:	9f 90       	pop	r9
    15f6:	8f 90       	pop	r8
    15f8:	08 95       	ret

000015fa <_Z7ReadADCi>:
Sources: http://extremeelectronics.co.in/avr-tutorials/using-adc-of-avr-microcontroller/
		 http://maxembedded.com/2011/06/the-adc-of-the-avr/
=================================*/
int ReadADC(int ADCchannel) {
	//select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
    15fa:	ec e7       	ldi	r30, 0x7C	; 124
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	90 81       	ld	r25, Z
    1600:	8f 70       	andi	r24, 0x0F	; 15
    1602:	90 7f       	andi	r25, 0xF0	; 240
    1604:	89 2b       	or	r24, r25
    1606:	80 83       	st	Z, r24
	//single conversion mode
	ADCSRA |= (1<<ADSC);
    1608:	ea e7       	ldi	r30, 0x7A	; 122
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	80 64       	ori	r24, 0x40	; 64
    1610:	80 83       	st	Z, r24
	// wait until ADC conversion is complete
	while ((ADCSRA & (1<<ADSC)));
    1612:	80 81       	ld	r24, Z
    1614:	86 fd       	sbrc	r24, 6
    1616:	fd cf       	rjmp	.-6      	; 0x1612 <_Z7ReadADCi+0x18>
	{
		
	}//end while
	return ADC;
    1618:	80 91 78 00 	lds	r24, 0x0078
    161c:	90 91 79 00 	lds	r25, 0x0079
}//end ReadADC
    1620:	08 95       	ret

00001622 <_Z9bowNockedv>:

Written by: Trevor Eckert
=================================*/
bool bowNocked() {
		//create a variable strength that reads the ADC
		int strength = ReadADC(0);
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <_Z7ReadADCi>
		//Set the nock threshold (we played with this for weeks and we found this value is best)
		int nockThresh = 280;
		//If the strength is less than the nock threshold, return true, otherwise return false
		//The strength is less than the nock thresh because as the string is pulled, resistance
		//increses and digital values (voltage) decrease
		if (strength < nockThresh){
    162a:	21 e0       	ldi	r18, 0x01	; 1
    162c:	88 31       	cpi	r24, 0x18	; 24
    162e:	91 40       	sbci	r25, 0x01	; 1
    1630:	0c f0       	brlt	.+2      	; 0x1634 <_Z9bowNockedv+0x12>
    1632:	20 e0       	ldi	r18, 0x00	; 0
		}
		else {
			//nock thresh not met, return false
			return false;
		}//end if
}//end bowNocked
    1634:	82 2f       	mov	r24, r18
    1636:	08 95       	ret

00001638 <_Z7isFiredPi>:
bool isFired(int adcArray[]) {
	//Some slope threshold to make a decision
	int slopeThresh = 35;
	
	//calculate the average slope of the past three adc values
	int slope = ((adcArray[0]-adcArray[5]));
    1638:	fc 01       	movw	r30, r24
    163a:	20 81       	ld	r18, Z
    163c:	31 81       	ldd	r19, Z+1	; 0x01
    163e:	82 85       	ldd	r24, Z+10	; 0x0a
    1640:	93 85       	ldd	r25, Z+11	; 0x0b
    1642:	28 1b       	sub	r18, r24
    1644:	39 0b       	sbc	r19, r25
	
	//int slope = (adcArray[1] - adcArray[0])/2;
	//Less than nocked...
	if(slope >= slopeThresh){
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	23 32       	cpi	r18, 0x23	; 35
    164a:	31 05       	cpc	r19, r1
    164c:	0c f4       	brge	.+2      	; 0x1650 <_Z7isFiredPi+0x18>
    164e:	80 e0       	ldi	r24, 0x00	; 0
		return true;
	}
	else{
		return false;
	}//end if
}//end isFired
    1650:	08 95       	ret

00001652 <_Z8FiveSixKii>:

Sends a 56 KHz wave high for the 
duration of count and low for the duration
of 150-count
=================================*/
void FiveSixK(int count, int pin) {
    1652:	ac 01       	movw	r20, r24
	//Get the wait time, which is 150-count
	int invCount = 150 - count;
    1654:	26 e9       	ldi	r18, 0x96	; 150
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	28 1b       	sub	r18, r24
    165a:	39 0b       	sbc	r19, r25
	
	//Send count number of packets (MIRP protocol)
	while(count > 0) {
    165c:	18 16       	cp	r1, r24
    165e:	19 06       	cpc	r1, r25
    1660:	c4 f4       	brge	.+48     	; 0x1692 <_Z8FiveSixKii+0x40>
		//Turn on pin
		PORTC |= pin;
		//Figured out delay with scope to get proper frequency
		_delay_us(8.66);
		//Turn off pin
		PORTC &= !pin;
    1662:	e1 e0       	ldi	r30, 0x01	; 1
    1664:	f0 e0       	ldi	r31, 0x00	; 0
	int invCount = 150 - count;
	
	//Send count number of packets (MIRP protocol)
	while(count > 0) {
		//Turn on pin
		PORTC |= pin;
    1666:	98 b1       	in	r25, 0x08	; 8
    1668:	96 2b       	or	r25, r22
    166a:	98 b9       	out	0x08, r25	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    166c:	8e e2       	ldi	r24, 0x2E	; 46
    166e:	8a 95       	dec	r24
    1670:	f1 f7       	brne	.-4      	; 0x166e <_Z8FiveSixKii+0x1c>
    1672:	00 00       	nop
		//Figured out delay with scope to get proper frequency
		_delay_us(8.66);
		//Turn off pin
		PORTC &= !pin;
    1674:	98 b1       	in	r25, 0x08	; 8
    1676:	8e 2f       	mov	r24, r30
    1678:	61 15       	cp	r22, r1
    167a:	71 05       	cpc	r23, r1
    167c:	09 f0       	breq	.+2      	; 0x1680 <_Z8FiveSixKii+0x2e>
    167e:	8f 2f       	mov	r24, r31
    1680:	98 23       	and	r25, r24
    1682:	98 b9       	out	0x08, r25	; 8
    1684:	8e e2       	ldi	r24, 0x2E	; 46
    1686:	8a 95       	dec	r24
    1688:	f1 f7       	brne	.-4      	; 0x1686 <_Z8FiveSixKii+0x34>
    168a:	00 00       	nop
		//Figured out delay with scope to get proper frequency
		_delay_us(8.66);
		
		count--;
    168c:	41 50       	subi	r20, 0x01	; 1
    168e:	51 09       	sbc	r21, r1
void FiveSixK(int count, int pin) {
	//Get the wait time, which is 150-count
	int invCount = 150 - count;
	
	//Send count number of packets (MIRP protocol)
	while(count > 0) {
    1690:	51 f7       	brne	.-44     	; 0x1666 <_Z8FiveSixKii+0x14>
		
		count--;
	}//end while
	
	//Wait 150 - count packets (MIRP protocol
	while(invCount > 0) {
    1692:	12 16       	cp	r1, r18
    1694:	13 06       	cpc	r1, r19
    1696:	3c f4       	brge	.+14     	; 0x16a6 <_Z8FiveSixKii+0x54>
    1698:	8c e5       	ldi	r24, 0x5C	; 92
    169a:	8a 95       	dec	r24
    169c:	f1 f7       	brne	.-4      	; 0x169a <_Z8FiveSixKii+0x48>
    169e:	00 c0       	rjmp	.+0      	; 0x16a0 <_Z8FiveSixKii+0x4e>
		_delay_us(17.32);
		invCount --;
    16a0:	21 50       	subi	r18, 0x01	; 1
    16a2:	31 09       	sbc	r19, r1
		
		count--;
	}//end while
	
	//Wait 150 - count packets (MIRP protocol
	while(invCount > 0) {
    16a4:	c9 f7       	brne	.-14     	; 0x1698 <_Z8FiveSixKii+0x46>
    16a6:	08 95       	ret

000016a8 <_Z9playAudioci>:

Written by: Michael Gotwald
=================================*/
void playAudio(char input, int value) {
	//Clear any interrupts while this is working
	cli();
    16a8:	f8 94       	cli
	
	// The soundInput is read from Trevor
	if(input == soundInput && value == 0) {
    16aa:	90 91 03 01 	lds	r25, 0x0103
    16ae:	89 13       	cpse	r24, r25
    16b0:	28 c0       	rjmp	.+80     	; 0x1702 <_Z9playAudioci+0x5a>
    16b2:	61 15       	cp	r22, r1
    16b4:	71 05       	cpc	r23, r1
    16b6:	29 f4       	brne	.+10     	; 0x16c2 <_Z9playAudioci+0x1a>
		//draw of 0 = nock
		PORTD = 0b11111111; //Turns off all sounds
    16b8:	8f ef       	ldi	r24, 0xFF	; 255
    16ba:	8b b9       	out	0x0b, r24	; 11
		PORTD = 0b00000111; //nock sound LOW to play
    16bc:	87 e0       	ldi	r24, 0x07	; 7
    16be:	8b b9       	out	0x0b, r24	; 11
    16c0:	55 c0       	rjmp	.+170    	; 0x176c <_Z9playAudioci+0xc4>
	}
	else if(input == soundInput && value == 1) {
    16c2:	61 30       	cpi	r22, 0x01	; 1
    16c4:	71 05       	cpc	r23, r1
    16c6:	29 f4       	brne	.+10     	; 0x16d2 <_Z9playAudioci+0x2a>
		//draw of 1 = small draw
		PORTD = 0b11111111; //Turns off all sounds
    16c8:	8f ef       	ldi	r24, 0xFF	; 255
    16ca:	8b b9       	out	0x0b, r24	; 11
		PORTD = 0b00000011; //turn on draw sound
    16cc:	83 e0       	ldi	r24, 0x03	; 3
    16ce:	8b b9       	out	0x0b, r24	; 11
    16d0:	4d c0       	rjmp	.+154    	; 0x176c <_Z9playAudioci+0xc4>
	}
	else if(input == soundInput && value == 2) {
    16d2:	62 30       	cpi	r22, 0x02	; 2
    16d4:	71 05       	cpc	r23, r1
    16d6:	29 f4       	brne	.+10     	; 0x16e2 <_Z9playAudioci+0x3a>
		//draw of 2 = med draw (small draw sound)
		PORTD = 0b11111111; //turn off all buttons
    16d8:	8f ef       	ldi	r24, 0xFF	; 255
    16da:	8b b9       	out	0x0b, r24	; 11
		PORTD = 0b00000011; //turn on draw sound
    16dc:	83 e0       	ldi	r24, 0x03	; 3
    16de:	8b b9       	out	0x0b, r24	; 11
    16e0:	45 c0       	rjmp	.+138    	; 0x176c <_Z9playAudioci+0xc4>
	}
	else if(input == soundInput && value == 3) {
    16e2:	63 30       	cpi	r22, 0x03	; 3
    16e4:	71 05       	cpc	r23, r1
    16e6:	29 f4       	brne	.+10     	; 0x16f2 <_Z9playAudioci+0x4a>
		//draw of 3 = far draw
		PORTD = 0b11111111; //turn off all buttons
    16e8:	8f ef       	ldi	r24, 0xFF	; 255
    16ea:	8b b9       	out	0x0b, r24	; 11
		//turn on loud draw sound
		PORTD = 0b00001111;
    16ec:	8f e0       	ldi	r24, 0x0F	; 15
    16ee:	8b b9       	out	0x0b, r24	; 11
    16f0:	3d c0       	rjmp	.+122    	; 0x176c <_Z9playAudioci+0xc4>
	}
	else if(input == soundInput && value == 4) {
    16f2:	64 30       	cpi	r22, 0x04	; 4
    16f4:	71 05       	cpc	r23, r1
    16f6:	49 f5       	brne	.+82     	; 0x174a <_Z9playAudioci+0xa2>
		//draw of 4 = extreme draw
		PORTD = 0b11111111; //turn off all buttons
    16f8:	8f ef       	ldi	r24, 0xFF	; 255
    16fa:	8b b9       	out	0x0b, r24	; 11
		PORTD = 0b00001111; //turn on loud draw sound
    16fc:	8f e0       	ldi	r24, 0x0F	; 15
    16fe:	8b b9       	out	0x0b, r24	; 11
    1700:	35 c0       	rjmp	.+106    	; 0x176c <_Z9playAudioci+0xc4>
	}
	else if(input == shoot && value == 1) {
    1702:	90 91 02 01 	lds	r25, 0x0102
    1706:	89 13       	cpse	r24, r25
    1708:	20 c0       	rjmp	.+64     	; 0x174a <_Z9playAudioci+0xa2>
    170a:	61 30       	cpi	r22, 0x01	; 1
    170c:	71 05       	cpc	r23, r1
    170e:	29 f4       	brne	.+10     	; 0x171a <_Z9playAudioci+0x72>
		//read from Katie for small fire
		PORTD = 0b11111111; //Turns off all sounds
    1710:	8f ef       	ldi	r24, 0xFF	; 255
    1712:	8b b9       	out	0x0b, r24	; 11
		PORTD = 0b00111111; //turn on quiet shoot sound
    1714:	8f e3       	ldi	r24, 0x3F	; 63
    1716:	8b b9       	out	0x0b, r24	; 11
    1718:	29 c0       	rjmp	.+82     	; 0x176c <_Z9playAudioci+0xc4>
	}
	else if(input == shoot && value == 2) {
    171a:	62 30       	cpi	r22, 0x02	; 2
    171c:	71 05       	cpc	r23, r1
    171e:	29 f4       	brne	.+10     	; 0x172a <_Z9playAudioci+0x82>
		//read from Katie for small fire
		PORTD = 0b11111111; //Turns off all sounds
    1720:	8f ef       	ldi	r24, 0xFF	; 255
    1722:	8b b9       	out	0x0b, r24	; 11
		PORTD = 0b00111111; //turn on quiet shoot sound
    1724:	8f e3       	ldi	r24, 0x3F	; 63
    1726:	8b b9       	out	0x0b, r24	; 11
    1728:	21 c0       	rjmp	.+66     	; 0x176c <_Z9playAudioci+0xc4>
	}
	else if(input == shoot && value == 3) {
    172a:	63 30       	cpi	r22, 0x03	; 3
    172c:	71 05       	cpc	r23, r1
    172e:	29 f4       	brne	.+10     	; 0x173a <_Z9playAudioci+0x92>
		//read from Katie for large fire
		PORTD = 0b11111111; //Turns off all sounds
    1730:	8f ef       	ldi	r24, 0xFF	; 255
    1732:	8b b9       	out	0x0b, r24	; 11
		PORTD = 0b01111111; //turn on loud shoot sound
    1734:	8f e7       	ldi	r24, 0x7F	; 127
    1736:	8b b9       	out	0x0b, r24	; 11
    1738:	19 c0       	rjmp	.+50     	; 0x176c <_Z9playAudioci+0xc4>
	}
	else if(input == shoot && value == 4) {
    173a:	64 30       	cpi	r22, 0x04	; 4
    173c:	71 05       	cpc	r23, r1
    173e:	29 f4       	brne	.+10     	; 0x174a <_Z9playAudioci+0xa2>
		//read from Katie for large fire
		PORTD = 0b11111111; //Turns off all sounds
    1740:	8f ef       	ldi	r24, 0xFF	; 255
    1742:	8b b9       	out	0x0b, r24	; 11
		PORTD = 0b01111111; //turn on loud shoot sound
    1744:	8f e7       	ldi	r24, 0x7F	; 127
    1746:	8b b9       	out	0x0b, r24	; 11
    1748:	11 c0       	rjmp	.+34     	; 0x176c <_Z9playAudioci+0xc4>
	}
	else if(input == cooldown) {
    174a:	90 91 01 01 	lds	r25, 0x0101
    174e:	89 13       	cpse	r24, r25
    1750:	05 c0       	rjmp	.+10     	; 0x175c <_Z9playAudioci+0xb4>
		PORTD = 0b11111111; //Turns off all sounds
    1752:	8f ef       	ldi	r24, 0xFF	; 255
    1754:	8b b9       	out	0x0b, r24	; 11
		PORTD = 0b00011111; //Turns on cool down mode
    1756:	8f e1       	ldi	r24, 0x1F	; 31
    1758:	8b b9       	out	0x0b, r24	; 11
    175a:	08 c0       	rjmp	.+16     	; 0x176c <_Z9playAudioci+0xc4>
	}
	else if(input == destroy) {
    175c:	90 91 00 01 	lds	r25, 0x0100
    1760:	89 13       	cpse	r24, r25
    1762:	04 c0       	rjmp	.+8      	; 0x176c <_Z9playAudioci+0xc4>
		PORTD = 0b11111111; //Turns off all sounds
    1764:	8f ef       	ldi	r24, 0xFF	; 255
    1766:	8b b9       	out	0x0b, r24	; 11
		PORTD = 0b00000011; //Turns on destroy mode
    1768:	83 e0       	ldi	r24, 0x03	; 3
    176a:	8b b9       	out	0x0b, r24	; 11
	}//end if
	
	//Enable interrupts again
	sei();
    176c:	78 94       	sei
    176e:	08 95       	ret

00001770 <_GLOBAL__sub_I_lcd>:
//DECLARE GLOBAL VARIABLES
//========================
// Written by Katie Hobble

//Create a new istance of the LCD Display
Adafruit_ILI9340 lcd = Adafruit_ILI9340(_cs, _dc, _rst);
    1770:	29 e0       	ldi	r18, 0x09	; 9
    1772:	48 e0       	ldi	r20, 0x08	; 8
    1774:	6a e0       	ldi	r22, 0x0A	; 10
    1776:	84 e0       	ldi	r24, 0x04	; 4
    1778:	92 e0       	ldi	r25, 0x02	; 2
    177a:	0e 94 66 06 	call	0xccc	; 0xccc <_ZN16Adafruit_ILI9340C1Ehhh>
    177e:	08 95       	ret

00001780 <_Z12initLCDSetupv>:
all the proper startup shapes and values

Written by: Ben Wellington
Source: https://github.com/adafruit/Adafruit_ILI9340 (the ILI9340 libraries provided by adafruit)
=================================*/
void initLCDSetup() {
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
	lcd.fillScreen(ILI9340_BLACK);
    1784:	60 e0       	ldi	r22, 0x00	; 0
    1786:	70 e0       	ldi	r23, 0x00	; 0
    1788:	84 e0       	ldi	r24, 0x04	; 4
    178a:	92 e0       	ldi	r25, 0x02	; 2
    178c:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN16Adafruit_ILI934010fillScreenEj>
	unsigned long start = micros();//micros is a function that I did not write
    1790:	0e 94 72 14 	call	0x28e4	; 0x28e4 <micros>
	//Write Health
	lcd.setCursor(0, 22);
    1794:	46 e1       	ldi	r20, 0x16	; 22
    1796:	50 e0       	ldi	r21, 0x00	; 0
    1798:	60 e0       	ldi	r22, 0x00	; 0
    179a:	70 e0       	ldi	r23, 0x00	; 0
    179c:	84 e0       	ldi	r24, 0x04	; 4
    179e:	92 e0       	ldi	r25, 0x02	; 2
    17a0:	0e 94 36 06 	call	0xc6c	; 0xc6c <_ZN12Adafruit_GFX9setCursorEii>
	lcd.setTextColor(ILI9340_WHITE);
    17a4:	6f ef       	ldi	r22, 0xFF	; 255
    17a6:	7f ef       	ldi	r23, 0xFF	; 255
    17a8:	84 e0       	ldi	r24, 0x04	; 4
    17aa:	92 e0       	ldi	r25, 0x02	; 2
    17ac:	0e 94 42 06 	call	0xc84	; 0xc84 <_ZN12Adafruit_GFX12setTextColorEj>
	lcd.setTextSize(4);
    17b0:	64 e0       	ldi	r22, 0x04	; 4
    17b2:	84 e0       	ldi	r24, 0x04	; 4
    17b4:	92 e0       	ldi	r25, 0x02	; 2
    17b6:	0e 94 3c 06 	call	0xc78	; 0xc78 <_ZN12Adafruit_GFX11setTextSizeEh>
	lcd.print("Health:");
    17ba:	6e e3       	ldi	r22, 0x3E	; 62
    17bc:	71 e0       	ldi	r23, 0x01	; 1
    17be:	84 e0       	ldi	r24, 0x04	; 4
    17c0:	92 e0       	ldi	r25, 0x02	; 2
    17c2:	0e 94 1c 13 	call	0x2638	; 0x2638 <_ZN5Print5printEPKc>
	
	//write Mana
	lcd.setCursor(0, 125);
    17c6:	4d e7       	ldi	r20, 0x7D	; 125
    17c8:	50 e0       	ldi	r21, 0x00	; 0
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	70 e0       	ldi	r23, 0x00	; 0
    17ce:	84 e0       	ldi	r24, 0x04	; 4
    17d0:	92 e0       	ldi	r25, 0x02	; 2
    17d2:	0e 94 36 06 	call	0xc6c	; 0xc6c <_ZN12Adafruit_GFX9setCursorEii>
	lcd.setTextColor(ILI9340_WHITE);
    17d6:	6f ef       	ldi	r22, 0xFF	; 255
    17d8:	7f ef       	ldi	r23, 0xFF	; 255
    17da:	84 e0       	ldi	r24, 0x04	; 4
    17dc:	92 e0       	ldi	r25, 0x02	; 2
    17de:	0e 94 42 06 	call	0xc84	; 0xc84 <_ZN12Adafruit_GFX12setTextColorEj>
	lcd.setTextSize(4);
    17e2:	64 e0       	ldi	r22, 0x04	; 4
    17e4:	84 e0       	ldi	r24, 0x04	; 4
    17e6:	92 e0       	ldi	r25, 0x02	; 2
    17e8:	0e 94 3c 06 	call	0xc78	; 0xc78 <_ZN12Adafruit_GFX11setTextSizeEh>
	lcd.print("Mana:");
    17ec:	66 e4       	ldi	r22, 0x46	; 70
    17ee:	71 e0       	ldi	r23, 0x01	; 1
    17f0:	84 e0       	ldi	r24, 0x04	; 4
    17f2:	92 e0       	ldi	r25, 0x02	; 2
    17f4:	0e 94 1c 13 	call	0x2638	; 0x2638 <_ZN5Print5printEPKc>
	
	// Health Hearts
	lcd.setCursor(300, 0);
    17f8:	40 e0       	ldi	r20, 0x00	; 0
    17fa:	50 e0       	ldi	r21, 0x00	; 0
    17fc:	6c e2       	ldi	r22, 0x2C	; 44
    17fe:	71 e0       	ldi	r23, 0x01	; 1
    1800:	84 e0       	ldi	r24, 0x04	; 4
    1802:	92 e0       	ldi	r25, 0x02	; 2
    1804:	0e 94 36 06 	call	0xc6c	; 0xc6c <_ZN12Adafruit_GFX9setCursorEii>
	lcd.setTextColor(ILI9340_RED);
    1808:	60 e0       	ldi	r22, 0x00	; 0
    180a:	78 ef       	ldi	r23, 0xF8	; 248
    180c:	84 e0       	ldi	r24, 0x04	; 4
    180e:	92 e0       	ldi	r25, 0x02	; 2
    1810:	0e 94 42 06 	call	0xc84	; 0xc84 <_ZN12Adafruit_GFX12setTextColorEj>
	lcd.setTextSize(7);
    1814:	67 e0       	ldi	r22, 0x07	; 7
    1816:	84 e0       	ldi	r24, 0x04	; 4
    1818:	92 e0       	ldi	r25, 0x02	; 2
    181a:	0e 94 3c 06 	call	0xc78	; 0xc78 <_ZN12Adafruit_GFX11setTextSizeEh>
	for(int i = 0; i<=health;i++) {
    181e:	80 91 02 02 	lds	r24, 0x0202
    1822:	90 91 03 02 	lds	r25, 0x0203
    1826:	99 23       	and	r25, r25
    1828:	84 f0       	brlt	.+32     	; 0x184a <_Z12initLCDSetupv+0xca>
    182a:	c0 e0       	ldi	r28, 0x00	; 0
    182c:	d0 e0       	ldi	r29, 0x00	; 0
		lcd.print("\3");//heart character
    182e:	6c e4       	ldi	r22, 0x4C	; 76
    1830:	71 e0       	ldi	r23, 0x01	; 1
    1832:	84 e0       	ldi	r24, 0x04	; 4
    1834:	92 e0       	ldi	r25, 0x02	; 2
    1836:	0e 94 1c 13 	call	0x2638	; 0x2638 <_ZN5Print5printEPKc>
	
	// Health Hearts
	lcd.setCursor(300, 0);
	lcd.setTextColor(ILI9340_RED);
	lcd.setTextSize(7);
	for(int i = 0; i<=health;i++) {
    183a:	21 96       	adiw	r28, 0x01	; 1
    183c:	80 91 02 02 	lds	r24, 0x0202
    1840:	90 91 03 02 	lds	r25, 0x0203
    1844:	8c 17       	cp	r24, r28
    1846:	9d 07       	cpc	r25, r29
    1848:	94 f7       	brge	.-28     	; 0x182e <_Z12initLCDSetupv+0xae>
		lcd.print("\3");//heart character
		
	}//end for
	
	//Mana Bar
	lcd.setCursor(300, 125);
    184a:	4d e7       	ldi	r20, 0x7D	; 125
    184c:	50 e0       	ldi	r21, 0x00	; 0
    184e:	6c e2       	ldi	r22, 0x2C	; 44
    1850:	71 e0       	ldi	r23, 0x01	; 1
    1852:	84 e0       	ldi	r24, 0x04	; 4
    1854:	92 e0       	ldi	r25, 0x02	; 2
    1856:	0e 94 36 06 	call	0xc6c	; 0xc6c <_ZN12Adafruit_GFX9setCursorEii>
	lcd.setTextColor(ILI9340_GREEN);
    185a:	60 ee       	ldi	r22, 0xE0	; 224
    185c:	77 e0       	ldi	r23, 0x07	; 7
    185e:	84 e0       	ldi	r24, 0x04	; 4
    1860:	92 e0       	ldi	r25, 0x02	; 2
    1862:	0e 94 42 06 	call	0xc84	; 0xc84 <_ZN12Adafruit_GFX12setTextColorEj>
	lcd.setTextSize(4);
    1866:	64 e0       	ldi	r22, 0x04	; 4
    1868:	84 e0       	ldi	r24, 0x04	; 4
    186a:	92 e0       	ldi	r25, 0x02	; 2
    186c:	0e 94 3c 06 	call	0xc78	; 0xc78 <_ZN12Adafruit_GFX11setTextSizeEh>
	for(int i = 0; i<=mana;i++){
    1870:	80 91 00 02 	lds	r24, 0x0200
    1874:	90 91 01 02 	lds	r25, 0x0201
    1878:	99 23       	and	r25, r25
    187a:	84 f0       	brlt	.+32     	; 0x189c <_Z12initLCDSetupv+0x11c>
    187c:	c0 e0       	ldi	r28, 0x00	; 0
    187e:	d0 e0       	ldi	r29, 0x00	; 0
		lcd.print("\5");//mana/tree character
    1880:	6e e4       	ldi	r22, 0x4E	; 78
    1882:	71 e0       	ldi	r23, 0x01	; 1
    1884:	84 e0       	ldi	r24, 0x04	; 4
    1886:	92 e0       	ldi	r25, 0x02	; 2
    1888:	0e 94 1c 13 	call	0x2638	; 0x2638 <_ZN5Print5printEPKc>
	
	//Mana Bar
	lcd.setCursor(300, 125);
	lcd.setTextColor(ILI9340_GREEN);
	lcd.setTextSize(4);
	for(int i = 0; i<=mana;i++){
    188c:	21 96       	adiw	r28, 0x01	; 1
    188e:	80 91 00 02 	lds	r24, 0x0200
    1892:	90 91 01 02 	lds	r25, 0x0201
    1896:	8c 17       	cp	r24, r28
    1898:	9d 07       	cpc	r25, r29
    189a:	94 f7       	brge	.-28     	; 0x1880 <_Z12initLCDSetupv+0x100>
		lcd.print("\5");//mana/tree character
	}//end for
	
	lcd.setCursor(0, 210);
    189c:	42 ed       	ldi	r20, 0xD2	; 210
    189e:	50 e0       	ldi	r21, 0x00	; 0
    18a0:	60 e0       	ldi	r22, 0x00	; 0
    18a2:	70 e0       	ldi	r23, 0x00	; 0
    18a4:	84 e0       	ldi	r24, 0x04	; 4
    18a6:	92 e0       	ldi	r25, 0x02	; 2
    18a8:	0e 94 36 06 	call	0xc6c	; 0xc6c <_ZN12Adafruit_GFX9setCursorEii>
	lcd.setTextColor(ILI9340_WHITE);
    18ac:	6f ef       	ldi	r22, 0xFF	; 255
    18ae:	7f ef       	ldi	r23, 0xFF	; 255
    18b0:	84 e0       	ldi	r24, 0x04	; 4
    18b2:	92 e0       	ldi	r25, 0x02	; 2
    18b4:	0e 94 42 06 	call	0xc84	; 0xc84 <_ZN12Adafruit_GFX12setTextColorEj>
	lcd.setTextSize(4);
    18b8:	64 e0       	ldi	r22, 0x04	; 4
    18ba:	84 e0       	ldi	r24, 0x04	; 4
    18bc:	92 e0       	ldi	r25, 0x02	; 2
    18be:	0e 94 3c 06 	call	0xc78	; 0xc78 <_ZN12Adafruit_GFX11setTextSizeEh>
	lcd.print("Power:");
    18c2:	60 e5       	ldi	r22, 0x50	; 80
    18c4:	71 e0       	ldi	r23, 0x01	; 1
    18c6:	84 e0       	ldi	r24, 0x04	; 4
    18c8:	92 e0       	ldi	r25, 0x02	; 2
    18ca:	0e 94 1c 13 	call	0x2638	; 0x2638 <_ZN5Print5printEPKc>
	
}//end initLCDDisplay
    18ce:	df 91       	pop	r29
    18d0:	cf 91       	pop	r28
    18d2:	08 95       	ret

000018d4 <_Z10initializev>:
void initialize() {
	
	//Intialize global variables
	//Written by: Katie Hobble
	//Set health to be MAX_HEALTH
	health = MAX_HEALTH;
    18d4:	85 e0       	ldi	r24, 0x05	; 5
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	90 93 03 02 	sts	0x0203, r25
    18dc:	80 93 02 02 	sts	0x0202, r24
	//Set mana to be MAX_MANA
	mana = MAX_MANA;
    18e0:	8a e0       	ldi	r24, 0x0A	; 10
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	90 93 01 02 	sts	0x0201, r25
    18e8:	80 93 00 02 	sts	0x0200, r24
	//Initialize the manaCount variable to be 0
	manaCount = 0;
    18ec:	10 92 ff 01 	sts	0x01FF, r1
    18f0:	10 92 fe 01 	sts	0x01FE, r1

	//Initialize ADC for pull sensor
	//Written by Trevor Eckert
	ADMUX = (1<<REFS0); //setting to VCC (01)
    18f4:	80 e4       	ldi	r24, 0x40	; 64
    18f6:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA =(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //prescalar by 128 so 125kHz
    18fa:	87 e8       	ldi	r24, 0x87	; 135
    18fc:	80 93 7a 00 	sts	0x007A, r24
	DDRC = 0b11011110; //Set PC0 to be input for ADC
    1900:	8e ed       	ldi	r24, 0xDE	; 222
    1902:	87 b9       	out	0x07, r24	; 7
	
	//Enable the TIMER0 Overflow Interrupt in the Timer0 Interrupt Mask Register
	//Written by Katie Hobble
	TIMSK0=(1<<TOIE0);
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	80 93 6e 00 	sts	0x006E, r24
	//Set the prescalar for the Timer Overflow to be 1024 in the Timer/Counter0 Control Register
	//using Clock Select bits 0 and 2 in the TCCR0B register
	TCCR0B = (1<<CS20)|(1<<CS22);
    190a:	95 e0       	ldi	r25, 0x05	; 5
    190c:	95 bd       	out	0x25, r25	; 37
	//Clear the TIMER0 overflow flag in the Timer0 Interrupt Flag Register
	TIFR0 = (1<<TOV0);
    190e:	85 bb       	out	0x15, r24	; 21
	
	//Call this instruction to enable all global interrupts
	//This is an internal instruction to set Bit 7 (global interrupt bit)
	//in the AVR status register (SREG)
	//Written by Katie Hobble
	sei();
    1910:	78 94       	sei
	
	//initialize audio
	//Written by Michael Gotwald
	DDRD = 0xFF; //Set all the pins of portD as output
    1912:	8f ef       	ldi	r24, 0xFF	; 255
    1914:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00; //Play the startup sound
    1916:	1b b8       	out	0x0b, r1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1918:	2f ef       	ldi	r18, 0xFF	; 255
    191a:	35 ea       	ldi	r19, 0xA5	; 165
    191c:	9e e0       	ldi	r25, 0x0E	; 14
    191e:	21 50       	subi	r18, 0x01	; 1
    1920:	30 40       	sbci	r19, 0x00	; 0
    1922:	90 40       	sbci	r25, 0x00	; 0
    1924:	e1 f7       	brne	.-8      	; 0x191e <_Z10initializev+0x4a>
    1926:	00 c0       	rjmp	.+0      	; 0x1928 <_Z10initializev+0x54>
    1928:	00 00       	nop
	_delay_ms(300); //delay a little bit to ensure it plays
	PORTD = 0xFF; //turn off all sounds
    192a:	8b b9       	out	0x0b, r24	; 11
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    192c:	26 e0       	ldi	r18, 0x06	; 6
    192e:	40 e0       	ldi	r20, 0x00	; 0
    1930:	52 ec       	ldi	r21, 0xC2	; 194
    1932:	61 e0       	ldi	r22, 0x01	; 1
    1934:	70 e0       	ldi	r23, 0x00	; 0
    1936:	82 e3       	ldi	r24, 0x32	; 50
    1938:	92 e0       	ldi	r25, 0x02	; 2
    193a:	0e 94 85 11 	call	0x230a	; 0x230a <_ZN14HardwareSerial5beginEmh>
	//initialize lcd
	//Written by Ben Wellington
	//Serial is a library that I did not write]
	Serial.begin(115200);
	//Begin the lcd instance
	lcd.begin();
    193e:	84 e0       	ldi	r24, 0x04	; 4
    1940:	92 e0       	ldi	r25, 0x02	; 2
    1942:	0e 94 04 07 	call	0xe08	; 0xe08 <_ZN16Adafruit_ILI93405beginEv>
	//call the initLCDSetup method to draw the bow's initial screen
	initLCDSetup();
    1946:	0e 94 c0 0b 	call	0x1780	; 0x1780 <_Z12initLCDSetupv>
    194a:	08 95       	ret

0000194c <_Z10LCDdisplayii>:
and tells it what to draw

Written by: Ben Wellington
Source: https://github.com/adafruit/Adafruit_ILI9340 (the ILI9340 libraries provided by adafruit)
=================================*/
void LCDdisplay(int element, int value){
    194c:	cf 92       	push	r12
    194e:	df 92       	push	r13
    1950:	ef 92       	push	r14
    1952:	ff 92       	push	r15
    1954:	0f 93       	push	r16
    1956:	1f 93       	push	r17
    1958:	cf 93       	push	r28
    195a:	df 93       	push	r29
    195c:	8c 01       	movw	r16, r24
    195e:	eb 01       	movw	r28, r22

	Serial.print(F("Test "));//simple communication test
    1960:	6e e6       	ldi	r22, 0x6E	; 110
    1962:	75 e0       	ldi	r23, 0x05	; 5
    1964:	82 e3       	ldi	r24, 0x32	; 50
    1966:	92 e0       	ldi	r25, 0x02	; 2
    1968:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_ZN5Print5printEPK19__FlashStringHelper>

	if(element==ice) {
    196c:	80 91 0a 01 	lds	r24, 0x010A
    1970:	90 91 0b 01 	lds	r25, 0x010B
    1974:	08 17       	cp	r16, r24
    1976:	19 07       	cpc	r17, r25
    1978:	09 f0       	breq	.+2      	; 0x197c <_Z10LCDdisplayii+0x30>
    197a:	4b c0       	rjmp	.+150    	; 0x1a12 <_Z10LCDdisplayii+0xc6>
		//display power as 0 and mana as value and print (Cooldown) mode in blue
		lcd.fillRect(0, 155, 280, 55, ILI9340_BLACK);
    197c:	e1 2c       	mov	r14, r1
    197e:	f1 2c       	mov	r15, r1
    1980:	07 e3       	ldi	r16, 0x37	; 55
    1982:	10 e0       	ldi	r17, 0x00	; 0
    1984:	28 e1       	ldi	r18, 0x18	; 24
    1986:	31 e0       	ldi	r19, 0x01	; 1
    1988:	4b e9       	ldi	r20, 0x9B	; 155
    198a:	50 e0       	ldi	r21, 0x00	; 0
    198c:	60 e0       	ldi	r22, 0x00	; 0
    198e:	70 e0       	ldi	r23, 0x00	; 0
    1990:	84 e0       	ldi	r24, 0x04	; 4
    1992:	92 e0       	ldi	r25, 0x02	; 2
    1994:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN16Adafruit_ILI93408fillRectEiiiij>
		lcd.setCursor(300, 112);
    1998:	40 e7       	ldi	r20, 0x70	; 112
    199a:	50 e0       	ldi	r21, 0x00	; 0
    199c:	6c e2       	ldi	r22, 0x2C	; 44
    199e:	71 e0       	ldi	r23, 0x01	; 1
    19a0:	84 e0       	ldi	r24, 0x04	; 4
    19a2:	92 e0       	ldi	r25, 0x02	; 2
    19a4:	0e 94 36 06 	call	0xc6c	; 0xc6c <_ZN12Adafruit_GFX9setCursorEii>
		lcd.setTextColor(ILI9340_CYAN);
    19a8:	6f ef       	ldi	r22, 0xFF	; 255
    19aa:	77 e0       	ldi	r23, 0x07	; 7
    19ac:	84 e0       	ldi	r24, 0x04	; 4
    19ae:	92 e0       	ldi	r25, 0x02	; 2
    19b0:	0e 94 42 06 	call	0xc84	; 0xc84 <_ZN12Adafruit_GFX12setTextColorEj>
		lcd.setTextSize(2);
    19b4:	62 e0       	ldi	r22, 0x02	; 2
    19b6:	84 e0       	ldi	r24, 0x04	; 4
    19b8:	92 e0       	ldi	r25, 0x02	; 2
    19ba:	0e 94 3c 06 	call	0xc78	; 0xc78 <_ZN12Adafruit_GFX11setTextSizeEh>
		lcd.print("           (Cooldown)");
    19be:	67 e5       	ldi	r22, 0x57	; 87
    19c0:	71 e0       	ldi	r23, 0x01	; 1
    19c2:	84 e0       	ldi	r24, 0x04	; 4
    19c4:	92 e0       	ldi	r25, 0x02	; 2
    19c6:	0e 94 1c 13 	call	0x2638	; 0x2638 <_ZN5Print5printEPKc>
		
		lcd.setCursor(300, 125);
    19ca:	4d e7       	ldi	r20, 0x7D	; 125
    19cc:	50 e0       	ldi	r21, 0x00	; 0
    19ce:	6c e2       	ldi	r22, 0x2C	; 44
    19d0:	71 e0       	ldi	r23, 0x01	; 1
    19d2:	84 e0       	ldi	r24, 0x04	; 4
    19d4:	92 e0       	ldi	r25, 0x02	; 2
    19d6:	0e 94 36 06 	call	0xc6c	; 0xc6c <_ZN12Adafruit_GFX9setCursorEii>
		lcd.setTextColor(ILI9340_GREEN);
    19da:	60 ee       	ldi	r22, 0xE0	; 224
    19dc:	77 e0       	ldi	r23, 0x07	; 7
    19de:	84 e0       	ldi	r24, 0x04	; 4
    19e0:	92 e0       	ldi	r25, 0x02	; 2
    19e2:	0e 94 42 06 	call	0xc84	; 0xc84 <_ZN12Adafruit_GFX12setTextColorEj>
		lcd.setTextSize(4);
    19e6:	64 e0       	ldi	r22, 0x04	; 4
    19e8:	84 e0       	ldi	r24, 0x04	; 4
    19ea:	92 e0       	ldi	r25, 0x02	; 2
    19ec:	0e 94 3c 06 	call	0xc78	; 0xc78 <_ZN12Adafruit_GFX11setTextSizeEh>
		for(int i = 0; i<=value;i++) {
    19f0:	dd 23       	and	r29, r29
    19f2:	0c f4       	brge	.+2      	; 0x19f6 <_Z10LCDdisplayii+0xaa>
    19f4:	3f c1       	rjmp	.+638    	; 0x1c74 <_Z10LCDdisplayii+0x328>
    19f6:	00 e0       	ldi	r16, 0x00	; 0
    19f8:	10 e0       	ldi	r17, 0x00	; 0
			lcd.print("\5");//mana/tree character
    19fa:	6e e4       	ldi	r22, 0x4E	; 78
    19fc:	71 e0       	ldi	r23, 0x01	; 1
    19fe:	84 e0       	ldi	r24, 0x04	; 4
    1a00:	92 e0       	ldi	r25, 0x02	; 2
    1a02:	0e 94 1c 13 	call	0x2638	; 0x2638 <_ZN5Print5printEPKc>
		lcd.print("           (Cooldown)");
		
		lcd.setCursor(300, 125);
		lcd.setTextColor(ILI9340_GREEN);
		lcd.setTextSize(4);
		for(int i = 0; i<=value;i++) {
    1a06:	0f 5f       	subi	r16, 0xFF	; 255
    1a08:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0a:	c0 17       	cp	r28, r16
    1a0c:	d1 07       	cpc	r29, r17
    1a0e:	ac f7       	brge	.-22     	; 0x19fa <_Z10LCDdisplayii+0xae>
    1a10:	31 c1       	rjmp	.+610    	; 0x1c74 <_Z10LCDdisplayii+0x328>
			lcd.print("\5");//mana/tree character
		}//end for
		//lcd.fillRect(ManaBar, 148, 280, 52, ILI9340_BLACK);
	}
	else if(element == power) {
    1a12:	80 91 08 01 	lds	r24, 0x0108
    1a16:	90 91 09 01 	lds	r25, 0x0109
    1a1a:	08 17       	cp	r16, r24
    1a1c:	19 07       	cpc	r17, r25
    1a1e:	29 f5       	brne	.+74     	; 0x1a6a <_Z10LCDdisplayii+0x11e>
		//display power as value
		lcd.fillRect(5, 245, (value*59), 60, ILI9340_YELLOW);
    1a20:	8b e3       	ldi	r24, 0x3B	; 59
    1a22:	8c 9f       	mul	r24, r28
    1a24:	60 01       	movw	r12, r0
    1a26:	8d 9f       	mul	r24, r29
    1a28:	d0 0c       	add	r13, r0
    1a2a:	11 24       	eor	r1, r1
    1a2c:	0f 2e       	mov	r0, r31
    1a2e:	f0 ee       	ldi	r31, 0xE0	; 224
    1a30:	ef 2e       	mov	r14, r31
    1a32:	ff 24       	eor	r15, r15
    1a34:	fa 94       	dec	r15
    1a36:	f0 2d       	mov	r31, r0
    1a38:	0c e3       	ldi	r16, 0x3C	; 60
    1a3a:	10 e0       	ldi	r17, 0x00	; 0
    1a3c:	96 01       	movw	r18, r12
    1a3e:	45 ef       	ldi	r20, 0xF5	; 245
    1a40:	50 e0       	ldi	r21, 0x00	; 0
    1a42:	65 e0       	ldi	r22, 0x05	; 5
    1a44:	70 e0       	ldi	r23, 0x00	; 0
    1a46:	84 e0       	ldi	r24, 0x04	; 4
    1a48:	92 e0       	ldi	r25, 0x02	; 2
    1a4a:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN16Adafruit_ILI93408fillRectEiiiij>
		lcd.fillRect(((value*59)+5), 245, 280, 60, ILI9340_BLACK);
    1a4e:	b6 01       	movw	r22, r12
    1a50:	6b 5f       	subi	r22, 0xFB	; 251
    1a52:	7f 4f       	sbci	r23, 0xFF	; 255
    1a54:	e1 2c       	mov	r14, r1
    1a56:	f1 2c       	mov	r15, r1
    1a58:	28 e1       	ldi	r18, 0x18	; 24
    1a5a:	31 e0       	ldi	r19, 0x01	; 1
    1a5c:	45 ef       	ldi	r20, 0xF5	; 245
    1a5e:	50 e0       	ldi	r21, 0x00	; 0
    1a60:	84 e0       	ldi	r24, 0x04	; 4
    1a62:	92 e0       	ldi	r25, 0x02	; 2
    1a64:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN16Adafruit_ILI93408fillRectEiiiij>
    1a68:	05 c1       	rjmp	.+522    	; 0x1c74 <_Z10LCDdisplayii+0x328>
	}
	else if(element == damage) {
    1a6a:	80 91 06 01 	lds	r24, 0x0106
    1a6e:	90 91 07 01 	lds	r25, 0x0107
    1a72:	08 17       	cp	r16, r24
    1a74:	19 07       	cpc	r17, r25
    1a76:	09 f0       	breq	.+2      	; 0x1a7a <_Z10LCDdisplayii+0x12e>
    1a78:	60 c0       	rjmp	.+192    	; 0x1b3a <_Z10LCDdisplayii+0x1ee>
		if(value ==0){
    1a7a:	20 97       	sbiw	r28, 0x00	; 0
    1a7c:	61 f5       	brne	.+88     	; 0x1ad6 <_Z10LCDdisplayii+0x18a>
			//display health as zero and then print bow is dead
			lcd.fillScreen(ILI9340_BLACK);
    1a7e:	60 e0       	ldi	r22, 0x00	; 0
    1a80:	70 e0       	ldi	r23, 0x00	; 0
    1a82:	84 e0       	ldi	r24, 0x04	; 4
    1a84:	92 e0       	ldi	r25, 0x02	; 2
    1a86:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN16Adafruit_ILI934010fillScreenEj>
			lcd.setCursor(0, 15);
    1a8a:	4f e0       	ldi	r20, 0x0F	; 15
    1a8c:	50 e0       	ldi	r21, 0x00	; 0
    1a8e:	60 e0       	ldi	r22, 0x00	; 0
    1a90:	70 e0       	ldi	r23, 0x00	; 0
    1a92:	84 e0       	ldi	r24, 0x04	; 4
    1a94:	92 e0       	ldi	r25, 0x02	; 2
    1a96:	0e 94 36 06 	call	0xc6c	; 0xc6c <_ZN12Adafruit_GFX9setCursorEii>
			lcd.setTextColor(ILI9340_WHITE);
    1a9a:	6f ef       	ldi	r22, 0xFF	; 255
    1a9c:	7f ef       	ldi	r23, 0xFF	; 255
    1a9e:	84 e0       	ldi	r24, 0x04	; 4
    1aa0:	92 e0       	ldi	r25, 0x02	; 2
    1aa2:	0e 94 42 06 	call	0xc84	; 0xc84 <_ZN12Adafruit_GFX12setTextColorEj>
			lcd.setTextSize(4);
    1aa6:	64 e0       	ldi	r22, 0x04	; 4
    1aa8:	84 e0       	ldi	r24, 0x04	; 4
    1aaa:	92 e0       	ldi	r25, 0x02	; 2
    1aac:	0e 94 3c 06 	call	0xc78	; 0xc78 <_ZN12Adafruit_GFX11setTextSizeEh>
			lcd.print("   Your   weapon has  no more health and  is now     dead! ");
    1ab0:	6d e6       	ldi	r22, 0x6D	; 109
    1ab2:	71 e0       	ldi	r23, 0x01	; 1
    1ab4:	84 e0       	ldi	r24, 0x04	; 4
    1ab6:	92 e0       	ldi	r25, 0x02	; 2
    1ab8:	0e 94 1c 13 	call	0x2638	; 0x2638 <_ZN5Print5printEPKc>
			lcd.setTextColor(ILI9340_RED);
    1abc:	60 e0       	ldi	r22, 0x00	; 0
    1abe:	78 ef       	ldi	r23, 0xF8	; 248
    1ac0:	84 e0       	ldi	r24, 0x04	; 4
    1ac2:	92 e0       	ldi	r25, 0x02	; 2
    1ac4:	0e 94 42 06 	call	0xc84	; 0xc84 <_ZN12Adafruit_GFX12setTextColorEj>
			lcd.print("     :( ");
    1ac8:	69 ea       	ldi	r22, 0xA9	; 169
    1aca:	71 e0       	ldi	r23, 0x01	; 1
    1acc:	84 e0       	ldi	r24, 0x04	; 4
    1ace:	92 e0       	ldi	r25, 0x02	; 2
    1ad0:	0e 94 1c 13 	call	0x2638	; 0x2638 <_ZN5Print5printEPKc>
    1ad4:	cf c0       	rjmp	.+414    	; 0x1c74 <_Z10LCDdisplayii+0x328>
		}
		else {
			//display health as value
			lcd.fillRect(0, 50, 280, 60, ILI9340_BLACK);
    1ad6:	e1 2c       	mov	r14, r1
    1ad8:	f1 2c       	mov	r15, r1
    1ada:	0c e3       	ldi	r16, 0x3C	; 60
    1adc:	10 e0       	ldi	r17, 0x00	; 0
    1ade:	28 e1       	ldi	r18, 0x18	; 24
    1ae0:	31 e0       	ldi	r19, 0x01	; 1
    1ae2:	42 e3       	ldi	r20, 0x32	; 50
    1ae4:	50 e0       	ldi	r21, 0x00	; 0
    1ae6:	60 e0       	ldi	r22, 0x00	; 0
    1ae8:	70 e0       	ldi	r23, 0x00	; 0
    1aea:	84 e0       	ldi	r24, 0x04	; 4
    1aec:	92 e0       	ldi	r25, 0x02	; 2
    1aee:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN16Adafruit_ILI93408fillRectEiiiij>
			lcd.setCursor(300, 0);
    1af2:	40 e0       	ldi	r20, 0x00	; 0
    1af4:	50 e0       	ldi	r21, 0x00	; 0
    1af6:	6c e2       	ldi	r22, 0x2C	; 44
    1af8:	71 e0       	ldi	r23, 0x01	; 1
    1afa:	84 e0       	ldi	r24, 0x04	; 4
    1afc:	92 e0       	ldi	r25, 0x02	; 2
    1afe:	0e 94 36 06 	call	0xc6c	; 0xc6c <_ZN12Adafruit_GFX9setCursorEii>
			lcd.setTextColor(ILI9340_RED);
    1b02:	60 e0       	ldi	r22, 0x00	; 0
    1b04:	78 ef       	ldi	r23, 0xF8	; 248
    1b06:	84 e0       	ldi	r24, 0x04	; 4
    1b08:	92 e0       	ldi	r25, 0x02	; 2
    1b0a:	0e 94 42 06 	call	0xc84	; 0xc84 <_ZN12Adafruit_GFX12setTextColorEj>
			lcd.setTextSize(7);
    1b0e:	67 e0       	ldi	r22, 0x07	; 7
    1b10:	84 e0       	ldi	r24, 0x04	; 4
    1b12:	92 e0       	ldi	r25, 0x02	; 2
    1b14:	0e 94 3c 06 	call	0xc78	; 0xc78 <_ZN12Adafruit_GFX11setTextSizeEh>
			for(int i = 0; i<=value;i++){
    1b18:	dd 23       	and	r29, r29
    1b1a:	0c f4       	brge	.+2      	; 0x1b1e <_Z10LCDdisplayii+0x1d2>
    1b1c:	ab c0       	rjmp	.+342    	; 0x1c74 <_Z10LCDdisplayii+0x328>
    1b1e:	00 e0       	ldi	r16, 0x00	; 0
    1b20:	10 e0       	ldi	r17, 0x00	; 0
				lcd.print("\3");//heart character
    1b22:	6c e4       	ldi	r22, 0x4C	; 76
    1b24:	71 e0       	ldi	r23, 0x01	; 1
    1b26:	84 e0       	ldi	r24, 0x04	; 4
    1b28:	92 e0       	ldi	r25, 0x02	; 2
    1b2a:	0e 94 1c 13 	call	0x2638	; 0x2638 <_ZN5Print5printEPKc>
			//display health as value
			lcd.fillRect(0, 50, 280, 60, ILI9340_BLACK);
			lcd.setCursor(300, 0);
			lcd.setTextColor(ILI9340_RED);
			lcd.setTextSize(7);
			for(int i = 0; i<=value;i++){
    1b2e:	0f 5f       	subi	r16, 0xFF	; 255
    1b30:	1f 4f       	sbci	r17, 0xFF	; 255
    1b32:	c0 17       	cp	r28, r16
    1b34:	d1 07       	cpc	r29, r17
    1b36:	ac f7       	brge	.-22     	; 0x1b22 <_Z10LCDdisplayii+0x1d6>
    1b38:	9d c0       	rjmp	.+314    	; 0x1c74 <_Z10LCDdisplayii+0x328>
				lcd.print("\3");//heart character
			}//end for
		}//end if
	}
	else if(element == plasma) {
    1b3a:	80 91 0c 01 	lds	r24, 0x010C
    1b3e:	90 91 0d 01 	lds	r25, 0x010D
    1b42:	08 17       	cp	r16, r24
    1b44:	19 07       	cpc	r17, r25
    1b46:	f1 f5       	brne	.+124    	; 0x1bc4 <_Z10LCDdisplayii+0x278>
		//bow has been fired
		lcd.fillRect(0, 245, 280, 60, ILI9340_BLACK);
    1b48:	e1 2c       	mov	r14, r1
    1b4a:	f1 2c       	mov	r15, r1
    1b4c:	0c e3       	ldi	r16, 0x3C	; 60
    1b4e:	10 e0       	ldi	r17, 0x00	; 0
    1b50:	28 e1       	ldi	r18, 0x18	; 24
    1b52:	31 e0       	ldi	r19, 0x01	; 1
    1b54:	45 ef       	ldi	r20, 0xF5	; 245
    1b56:	50 e0       	ldi	r21, 0x00	; 0
    1b58:	60 e0       	ldi	r22, 0x00	; 0
    1b5a:	70 e0       	ldi	r23, 0x00	; 0
    1b5c:	84 e0       	ldi	r24, 0x04	; 4
    1b5e:	92 e0       	ldi	r25, 0x02	; 2
    1b60:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN16Adafruit_ILI93408fillRectEiiiij>
		lcd.fillRect(0, 156, 280, 40, ILI9340_BLACK);//Paint over mana
    1b64:	08 e2       	ldi	r16, 0x28	; 40
    1b66:	10 e0       	ldi	r17, 0x00	; 0
    1b68:	28 e1       	ldi	r18, 0x18	; 24
    1b6a:	31 e0       	ldi	r19, 0x01	; 1
    1b6c:	4c e9       	ldi	r20, 0x9C	; 156
    1b6e:	50 e0       	ldi	r21, 0x00	; 0
    1b70:	60 e0       	ldi	r22, 0x00	; 0
    1b72:	70 e0       	ldi	r23, 0x00	; 0
    1b74:	84 e0       	ldi	r24, 0x04	; 4
    1b76:	92 e0       	ldi	r25, 0x02	; 2
    1b78:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN16Adafruit_ILI93408fillRectEiiiij>
		lcd.setCursor(300, 125);
    1b7c:	4d e7       	ldi	r20, 0x7D	; 125
    1b7e:	50 e0       	ldi	r21, 0x00	; 0
    1b80:	6c e2       	ldi	r22, 0x2C	; 44
    1b82:	71 e0       	ldi	r23, 0x01	; 1
    1b84:	84 e0       	ldi	r24, 0x04	; 4
    1b86:	92 e0       	ldi	r25, 0x02	; 2
    1b88:	0e 94 36 06 	call	0xc6c	; 0xc6c <_ZN12Adafruit_GFX9setCursorEii>
		lcd.setTextColor(ILI9340_GREEN);
    1b8c:	60 ee       	ldi	r22, 0xE0	; 224
    1b8e:	77 e0       	ldi	r23, 0x07	; 7
    1b90:	84 e0       	ldi	r24, 0x04	; 4
    1b92:	92 e0       	ldi	r25, 0x02	; 2
    1b94:	0e 94 42 06 	call	0xc84	; 0xc84 <_ZN12Adafruit_GFX12setTextColorEj>
		lcd.setTextSize(4);
    1b98:	64 e0       	ldi	r22, 0x04	; 4
    1b9a:	84 e0       	ldi	r24, 0x04	; 4
    1b9c:	92 e0       	ldi	r25, 0x02	; 2
    1b9e:	0e 94 3c 06 	call	0xc78	; 0xc78 <_ZN12Adafruit_GFX11setTextSizeEh>
		for(int i = 0; i<=value;i++){
    1ba2:	dd 23       	and	r29, r29
    1ba4:	0c f4       	brge	.+2      	; 0x1ba8 <_Z10LCDdisplayii+0x25c>
    1ba6:	66 c0       	rjmp	.+204    	; 0x1c74 <_Z10LCDdisplayii+0x328>
    1ba8:	00 e0       	ldi	r16, 0x00	; 0
    1baa:	10 e0       	ldi	r17, 0x00	; 0
			lcd.print("\5");//mana/tree character
    1bac:	6e e4       	ldi	r22, 0x4E	; 78
    1bae:	71 e0       	ldi	r23, 0x01	; 1
    1bb0:	84 e0       	ldi	r24, 0x04	; 4
    1bb2:	92 e0       	ldi	r25, 0x02	; 2
    1bb4:	0e 94 1c 13 	call	0x2638	; 0x2638 <_ZN5Print5printEPKc>
		lcd.fillRect(0, 245, 280, 60, ILI9340_BLACK);
		lcd.fillRect(0, 156, 280, 40, ILI9340_BLACK);//Paint over mana
		lcd.setCursor(300, 125);
		lcd.setTextColor(ILI9340_GREEN);
		lcd.setTextSize(4);
		for(int i = 0; i<=value;i++){
    1bb8:	0f 5f       	subi	r16, 0xFF	; 255
    1bba:	1f 4f       	sbci	r17, 0xFF	; 255
    1bbc:	c0 17       	cp	r28, r16
    1bbe:	d1 07       	cpc	r29, r17
    1bc0:	ac f7       	brge	.-22     	; 0x1bac <_Z10LCDdisplayii+0x260>
    1bc2:	58 c0       	rjmp	.+176    	; 0x1c74 <_Z10LCDdisplayii+0x328>
			lcd.print("\5");//mana/tree character
		}//end for
		//dipslay power as zero and retrieve mana or use value
	}
	else if(element == 10) {
    1bc4:	0a 30       	cpi	r16, 0x0A	; 10
    1bc6:	11 05       	cpc	r17, r1
    1bc8:	79 f4       	brne	.+30     	; 0x1be8 <_Z10LCDdisplayii+0x29c>
		//this is for when exiting cooldown 
		//erase (cooldown) message
		lcd.fillRect(120, 120, 280, 30, ILI9340_BLACK);
    1bca:	e1 2c       	mov	r14, r1
    1bcc:	f1 2c       	mov	r15, r1
    1bce:	0e e1       	ldi	r16, 0x1E	; 30
    1bd0:	10 e0       	ldi	r17, 0x00	; 0
    1bd2:	28 e1       	ldi	r18, 0x18	; 24
    1bd4:	31 e0       	ldi	r19, 0x01	; 1
    1bd6:	48 e7       	ldi	r20, 0x78	; 120
    1bd8:	50 e0       	ldi	r21, 0x00	; 0
    1bda:	68 e7       	ldi	r22, 0x78	; 120
    1bdc:	70 e0       	ldi	r23, 0x00	; 0
    1bde:	84 e0       	ldi	r24, 0x04	; 4
    1be0:	92 e0       	ldi	r25, 0x02	; 2
    1be2:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN16Adafruit_ILI93408fillRectEiiiij>
    1be6:	46 c0       	rjmp	.+140    	; 0x1c74 <_Z10LCDdisplayii+0x328>
	}
	else if(element == 5) {
    1be8:	05 30       	cpi	r16, 0x05	; 5
    1bea:	11 05       	cpc	r17, r1
    1bec:	21 f5       	brne	.+72     	; 0x1c36 <_Z10LCDdisplayii+0x2ea>
		//show power bar as red because bow was fired
		lcd.fillRect(5, 245, (value*59), 60, ILI9340_RED);
    1bee:	8b e3       	ldi	r24, 0x3B	; 59
    1bf0:	8c 9f       	mul	r24, r28
    1bf2:	60 01       	movw	r12, r0
    1bf4:	8d 9f       	mul	r24, r29
    1bf6:	d0 0c       	add	r13, r0
    1bf8:	11 24       	eor	r1, r1
    1bfa:	0f 2e       	mov	r0, r31
    1bfc:	e1 2c       	mov	r14, r1
    1bfe:	f8 ef       	ldi	r31, 0xF8	; 248
    1c00:	ff 2e       	mov	r15, r31
    1c02:	f0 2d       	mov	r31, r0
    1c04:	0c e3       	ldi	r16, 0x3C	; 60
    1c06:	10 e0       	ldi	r17, 0x00	; 0
    1c08:	96 01       	movw	r18, r12
    1c0a:	45 ef       	ldi	r20, 0xF5	; 245
    1c0c:	50 e0       	ldi	r21, 0x00	; 0
    1c0e:	65 e0       	ldi	r22, 0x05	; 5
    1c10:	70 e0       	ldi	r23, 0x00	; 0
    1c12:	84 e0       	ldi	r24, 0x04	; 4
    1c14:	92 e0       	ldi	r25, 0x02	; 2
    1c16:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN16Adafruit_ILI93408fillRectEiiiij>
		lcd.fillRect(((value*59)+5), 245, 280, 60, ILI9340_BLACK);
    1c1a:	b6 01       	movw	r22, r12
    1c1c:	6b 5f       	subi	r22, 0xFB	; 251
    1c1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c20:	e1 2c       	mov	r14, r1
    1c22:	f1 2c       	mov	r15, r1
    1c24:	28 e1       	ldi	r18, 0x18	; 24
    1c26:	31 e0       	ldi	r19, 0x01	; 1
    1c28:	45 ef       	ldi	r20, 0xF5	; 245
    1c2a:	50 e0       	ldi	r21, 0x00	; 0
    1c2c:	84 e0       	ldi	r24, 0x04	; 4
    1c2e:	92 e0       	ldi	r25, 0x02	; 2
    1c30:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN16Adafruit_ILI93408fillRectEiiiij>
    1c34:	1f c0       	rjmp	.+62     	; 0x1c74 <_Z10LCDdisplayii+0x328>
	}
	else {
		//invalid data received
		lcd.fillScreen(ILI9340_BLACK);
    1c36:	60 e0       	ldi	r22, 0x00	; 0
    1c38:	70 e0       	ldi	r23, 0x00	; 0
    1c3a:	84 e0       	ldi	r24, 0x04	; 4
    1c3c:	92 e0       	ldi	r25, 0x02	; 2
    1c3e:	0e 94 48 06 	call	0xc90	; 0xc90 <_ZN16Adafruit_ILI934010fillScreenEj>
		lcd.setCursor(0, 15);
    1c42:	4f e0       	ldi	r20, 0x0F	; 15
    1c44:	50 e0       	ldi	r21, 0x00	; 0
    1c46:	60 e0       	ldi	r22, 0x00	; 0
    1c48:	70 e0       	ldi	r23, 0x00	; 0
    1c4a:	84 e0       	ldi	r24, 0x04	; 4
    1c4c:	92 e0       	ldi	r25, 0x02	; 2
    1c4e:	0e 94 36 06 	call	0xc6c	; 0xc6c <_ZN12Adafruit_GFX9setCursorEii>
		lcd.setTextColor(ILI9340_WHITE);
    1c52:	6f ef       	ldi	r22, 0xFF	; 255
    1c54:	7f ef       	ldi	r23, 0xFF	; 255
    1c56:	84 e0       	ldi	r24, 0x04	; 4
    1c58:	92 e0       	ldi	r25, 0x02	; 2
    1c5a:	0e 94 42 06 	call	0xc84	; 0xc84 <_ZN12Adafruit_GFX12setTextColorEj>
		lcd.setTextSize(4);
    1c5e:	64 e0       	ldi	r22, 0x04	; 4
    1c60:	84 e0       	ldi	r24, 0x04	; 4
    1c62:	92 e0       	ldi	r25, 0x02	; 2
    1c64:	0e 94 3c 06 	call	0xc78	; 0xc78 <_ZN12Adafruit_GFX11setTextSizeEh>
		lcd.print("Invalid data was passed as an element.");
    1c68:	62 eb       	ldi	r22, 0xB2	; 178
    1c6a:	71 e0       	ldi	r23, 0x01	; 1
    1c6c:	84 e0       	ldi	r24, 0x04	; 4
    1c6e:	92 e0       	ldi	r25, 0x02	; 2
    1c70:	0e 94 1c 13 	call	0x2638	; 0x2638 <_ZN5Print5printEPKc>
	}//end if
	
	Serial.println(F("Done!"));
    1c74:	68 e6       	ldi	r22, 0x68	; 104
    1c76:	75 e0       	ldi	r23, 0x05	; 5
    1c78:	82 e3       	ldi	r24, 0x32	; 50
    1c7a:	92 e0       	ldi	r25, 0x02	; 2
    1c7c:	0e 94 46 13 	call	0x268c	; 0x268c <_ZN5Print7printlnEPK19__FlashStringHelper>
}//LCDDisplay
    1c80:	df 91       	pop	r29
    1c82:	cf 91       	pop	r28
    1c84:	1f 91       	pop	r17
    1c86:	0f 91       	pop	r16
    1c88:	ff 90       	pop	r15
    1c8a:	ef 90       	pop	r14
    1c8c:	df 90       	pop	r13
    1c8e:	cf 90       	pop	r12
    1c90:	08 95       	ret

00001c92 <__vector_16>:
is not at its maximum value and manaCount has not
reached the increase value, it increases manaCount by 1.

Written by: Katie Hobble
=================================*/
ISR(TIMER0_OVF_vect) {
    1c92:	1f 92       	push	r1
    1c94:	0f 92       	push	r0
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	0f 92       	push	r0
    1c9a:	11 24       	eor	r1, r1
    1c9c:	2f 93       	push	r18
    1c9e:	3f 93       	push	r19
    1ca0:	4f 93       	push	r20
    1ca2:	5f 93       	push	r21
    1ca4:	6f 93       	push	r22
    1ca6:	7f 93       	push	r23
    1ca8:	8f 93       	push	r24
    1caa:	9f 93       	push	r25
    1cac:	af 93       	push	r26
    1cae:	bf 93       	push	r27
    1cb0:	ef 93       	push	r30
    1cb2:	ff 93       	push	r31
	//Check to see if manaCount is at the increase amount (MANA_INCREASE) and
	//if mana is able to be increased (it is not at MAX_MANA)
	if (manaCount == MANA_INCREASE && mana < MAX_MANA) {
    1cb4:	80 91 fe 01 	lds	r24, 0x01FE
    1cb8:	90 91 ff 01 	lds	r25, 0x01FF
    1cbc:	86 39       	cpi	r24, 0x96	; 150
    1cbe:	91 05       	cpc	r25, r1
    1cc0:	c1 f4       	brne	.+48     	; 0x1cf2 <__vector_16+0x60>
    1cc2:	60 91 00 02 	lds	r22, 0x0200
    1cc6:	70 91 01 02 	lds	r23, 0x0201
    1cca:	6a 30       	cpi	r22, 0x0A	; 10
    1ccc:	71 05       	cpc	r23, r1
    1cce:	ec f4       	brge	.+58     	; 0x1d0a <__vector_16+0x78>
		//Reset manaCount to 0
		manaCount = 0;
    1cd0:	10 92 ff 01 	sts	0x01FF, r1
    1cd4:	10 92 fe 01 	sts	0x01FE, r1
		//Increase mana by 1
		++mana;
    1cd8:	6f 5f       	subi	r22, 0xFF	; 255
    1cda:	7f 4f       	sbci	r23, 0xFF	; 255
    1cdc:	70 93 01 02 	sts	0x0201, r23
    1ce0:	60 93 00 02 	sts	0x0200, r22
		//Display the new mana
		LCDdisplay(plasma, mana);
    1ce4:	80 91 0c 01 	lds	r24, 0x010C
    1ce8:	90 91 0d 01 	lds	r25, 0x010D
    1cec:	0e 94 a6 0c 	call	0x194c	; 0x194c <_Z10LCDdisplayii>
    1cf0:	0c c0       	rjmp	.+24     	; 0x1d0a <__vector_16+0x78>
	}
	else {
		//If mana is able to be increased, increase the manaCount by 1 to continue the
		//counter
		if(mana < MAX_MANA) {
    1cf2:	20 91 00 02 	lds	r18, 0x0200
    1cf6:	30 91 01 02 	lds	r19, 0x0201
    1cfa:	2a 30       	cpi	r18, 0x0A	; 10
    1cfc:	31 05       	cpc	r19, r1
    1cfe:	2c f4       	brge	.+10     	; 0x1d0a <__vector_16+0x78>
			//Increase manaCount by 1
			++manaCount;
    1d00:	01 96       	adiw	r24, 0x01	; 1
    1d02:	90 93 ff 01 	sts	0x01FF, r25
    1d06:	80 93 fe 01 	sts	0x01FE, r24
		}//end if
	}//end if
}//end ISR(TIMER0_OVF_vect)
    1d0a:	ff 91       	pop	r31
    1d0c:	ef 91       	pop	r30
    1d0e:	bf 91       	pop	r27
    1d10:	af 91       	pop	r26
    1d12:	9f 91       	pop	r25
    1d14:	8f 91       	pop	r24
    1d16:	7f 91       	pop	r23
    1d18:	6f 91       	pop	r22
    1d1a:	5f 91       	pop	r21
    1d1c:	4f 91       	pop	r20
    1d1e:	3f 91       	pop	r19
    1d20:	2f 91       	pop	r18
    1d22:	0f 90       	pop	r0
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	0f 90       	pop	r0
    1d28:	1f 90       	pop	r1
    1d2a:	18 95       	reti

00001d2c <_Z12coolDownModev>:

Written by: Katie Hobble
=================================*/
void coolDownMode() {
	//Reset manaCount to ensure we are starting from the beginning
	manaCount = 0;
    1d2c:	10 92 ff 01 	sts	0x01FF, r1
    1d30:	10 92 fe 01 	sts	0x01FE, r1
	//Play audio and display visual for cool down mode
	LCDdisplay(ice, 0);
    1d34:	60 e0       	ldi	r22, 0x00	; 0
    1d36:	70 e0       	ldi	r23, 0x00	; 0
    1d38:	80 91 0a 01 	lds	r24, 0x010A
    1d3c:	90 91 0b 01 	lds	r25, 0x010B
    1d40:	0e 94 a6 0c 	call	0x194c	; 0x194c <_Z10LCDdisplayii>
	playAudio(cooldown, 0);
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	70 e0       	ldi	r23, 0x00	; 0
    1d48:	80 91 01 01 	lds	r24, 0x0101
    1d4c:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <_Z9playAudioci>
	
	//This will check to see if mana is at the minimum
	//value it needs to be to exit cool down mode
	while(mana < MIN_MANA) {
    1d50:	80 91 00 02 	lds	r24, 0x0200
    1d54:	90 91 01 02 	lds	r25, 0x0201
    1d58:	03 97       	sbiw	r24, 0x03	; 3
    1d5a:	c4 f4       	brge	.+48     	; 0x1d8c <_Z12coolDownModev+0x60>
    1d5c:	24 e5       	ldi	r18, 0x54	; 84
    1d5e:	35 e8       	ldi	r19, 0x85	; 133
    1d60:	85 e4       	ldi	r24, 0x45	; 69
    1d62:	91 e0       	ldi	r25, 0x01	; 1
    1d64:	21 50       	subi	r18, 0x01	; 1
    1d66:	30 40       	sbci	r19, 0x00	; 0
    1d68:	80 40       	sbci	r24, 0x00	; 0
    1d6a:	90 40       	sbci	r25, 0x00	; 0
    1d6c:	d9 f7       	brne	.-10     	; 0x1d64 <_Z12coolDownModev+0x38>
    1d6e:	00 c0       	rjmp	.+0      	; 0x1d70 <_Z12coolDownModev+0x44>
    1d70:	00 c0       	rjmp	.+0      	; 0x1d72 <_Z12coolDownModev+0x46>
    1d72:	00 00       	nop
		//Do nothing, let timer overflow do its thing
		_delay_ms(8000);
		//Clear the LCD display	
		LCDdisplay(10,0);
    1d74:	60 e0       	ldi	r22, 0x00	; 0
    1d76:	70 e0       	ldi	r23, 0x00	; 0
    1d78:	8a e0       	ldi	r24, 0x0A	; 10
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	0e 94 a6 0c 	call	0x194c	; 0x194c <_Z10LCDdisplayii>
	LCDdisplay(ice, 0);
	playAudio(cooldown, 0);
	
	//This will check to see if mana is at the minimum
	//value it needs to be to exit cool down mode
	while(mana < MIN_MANA) {
    1d80:	80 91 00 02 	lds	r24, 0x0200
    1d84:	90 91 01 02 	lds	r25, 0x0201
    1d88:	03 97       	sbiw	r24, 0x03	; 3
    1d8a:	44 f3       	brlt	.-48     	; 0x1d5c <_Z12coolDownModev+0x30>
		LCDdisplay(10,0);
				
	}//end while
	
	//Turn off sound (in case the cooldown sound is trying to loop)
	PORTD = 0xFF;
    1d8c:	8f ef       	ldi	r24, 0xFF	; 255
    1d8e:	8b b9       	out	0x0b, r24	; 11
	//Because IR receive doesn't work, we are going to decrement health every time cooldown mode is entered
	//decrement health
	health--;
    1d90:	80 91 02 02 	lds	r24, 0x0202
    1d94:	90 91 03 02 	lds	r25, 0x0203
    1d98:	01 97       	sbiw	r24, 0x01	; 1
    1d9a:	90 93 03 02 	sts	0x0203, r25
    1d9e:	80 93 02 02 	sts	0x0202, r24
	
	//If health has reached zero, just turn off interrupts
	//Otherwise, display the health
	if(health<0){
    1da2:	80 91 02 02 	lds	r24, 0x0202
    1da6:	90 91 03 02 	lds	r25, 0x0203
    1daa:	99 23       	and	r25, r25
    1dac:	14 f4       	brge	.+4      	; 0x1db2 <_Z12coolDownModev+0x86>
		//Clear the interrupts
		cli();
    1dae:	f8 94       	cli
    1db0:	08 95       	ret
	}
	else{
		//Display new health
		LCDdisplay(damage, health);
    1db2:	60 91 02 02 	lds	r22, 0x0202
    1db6:	70 91 03 02 	lds	r23, 0x0203
    1dba:	80 91 06 01 	lds	r24, 0x0106
    1dbe:	90 91 07 01 	lds	r25, 0x0107
    1dc2:	0e 94 a6 0c 	call	0x194c	; 0x194c <_Z10LCDdisplayii>
    1dc6:	08 95       	ret

00001dc8 <_Z19measureDrawStrengthv>:
when the bow fires

Written by: Trevor Eckert
Assistd by: Katie Hobble
=================================*/
int measureDrawStrength() {
    1dc8:	cf 92       	push	r12
    1dca:	df 92       	push	r13
    1dcc:	ef 92       	push	r14
    1dce:	ff 92       	push	r15
    1dd0:	0f 93       	push	r16
    1dd2:	1f 93       	push	r17
    1dd4:	cf 93       	push	r28
    1dd6:	df 93       	push	r29
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
    1ddc:	68 97       	sbiw	r28, 0x18	; 24
    1dde:	0f b6       	in	r0, 0x3f	; 63
    1de0:	f8 94       	cli
    1de2:	de bf       	out	0x3e, r29	; 62
    1de4:	0f be       	out	0x3f, r0	; 63
    1de6:	cd bf       	out	0x3d, r28	; 61
	int threeThresh = nockThresh - 55; //225
	int fourThresh = nockThresh - 75; //205
	
	//an array of the adc values initilized with the same threshold
	//value to make the initial slope zero
	int adcArray[6] = {nockThresh,nockThresh,nockThresh,nockThresh,nockThresh,nockThresh};
    1de8:	88 e1       	ldi	r24, 0x18	; 24
    1dea:	91 e0       	ldi	r25, 0x01	; 1
    1dec:	9e 87       	std	Y+14, r25	; 0x0e
    1dee:	8d 87       	std	Y+13, r24	; 0x0d
    1df0:	98 8b       	std	Y+16, r25	; 0x10
    1df2:	8f 87       	std	Y+15, r24	; 0x0f
    1df4:	9a 8b       	std	Y+18, r25	; 0x12
    1df6:	89 8b       	std	Y+17, r24	; 0x11
    1df8:	9c 8b       	std	Y+20, r25	; 0x14
    1dfa:	8b 8b       	std	Y+19, r24	; 0x13
    1dfc:	9e 8b       	std	Y+22, r25	; 0x16
    1dfe:	8d 8b       	std	Y+21, r24	; 0x15
    1e00:	98 8f       	std	Y+24, r25	; 0x18
    1e02:	8f 8b       	std	Y+23, r24	; 0x17
	
	//get the adc value
	adc_val = ReadADC(0);
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <_Z7ReadADCi>
=================================*/
int measureDrawStrength() {
	//range values
	int adc_val;
	int nockThresh = 280;
	int returnValue = 0;
    1e0c:	e1 2c       	mov	r14, r1
    1e0e:	f1 2c       	mov	r15, r1
	
	//get the adc value
	adc_val = ReadADC(0);
	
	//continue to read in adc while the bow hasn't been fired
	while(!isFired(adcArray)){
    1e10:	8e 01       	movw	r16, r28
    1e12:	03 5f       	subi	r16, 0xF3	; 243
    1e14:	1f 4f       	sbci	r17, 0xFF	; 255
    1e16:	86 c0       	rjmp	.+268    	; 0x1f24 <_Z19measureDrawStrengthv+0x15c>
		//get the adc value
		adc_val = ReadADC(0);
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <_Z7ReadADCi>
    1e20:	6c 01       	movw	r12, r24
		//this if statment checks to see if the bow has been returned to the initial state without being fired
		if(!bowNocked() && adcArray[0] < nockThresh) {
    1e22:	0e 94 11 0b 	call	0x1622	; 0x1622 <_Z9bowNockedv>
    1e26:	81 11       	cpse	r24, r1
    1e28:	c3 c0       	rjmp	.+390    	; 0x1fb0 <_Z19measureDrawStrengthv+0x1e8>
    1e2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e2e:	88 31       	cpi	r24, 0x18	; 24
    1e30:	91 40       	sbci	r25, 0x01	; 1
    1e32:	0c f0       	brlt	.+2      	; 0x1e36 <_Z19measureDrawStrengthv+0x6e>
    1e34:	bd c0       	rjmp	.+378    	; 0x1fb0 <_Z19measureDrawStrengthv+0x1e8>
    1e36:	af c0       	rjmp	.+350    	; 0x1f96 <_Z19measureDrawStrengthv+0x1ce>
			break;
		}//end if
	
		//play drawback audio if the bow hasn't been fired or returned
		if(returnValue > 0) {
			playAudio(soundInput, returnValue);
    1e38:	b7 01       	movw	r22, r14
    1e3a:	80 91 03 01 	lds	r24, 0x0103
    1e3e:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <_Z9playAudioci>
		}//end if
		
		//compare the adc values to the thresholds and set display its corresponding power
		//also set the return value to be what that power is
		
		if (adc_val <= oneThresh && adc_val > twoThresh) {
    1e42:	84 e1       	ldi	r24, 0x14	; 20
    1e44:	c8 16       	cp	r12, r24
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	d8 06       	cpc	r13, r24
    1e4a:	84 f4       	brge	.+32     	; 0x1e6c <_Z19measureDrawStrengthv+0xa4>
    1e4c:	26 ef       	ldi	r18, 0xF6	; 246
    1e4e:	c2 16       	cp	r12, r18
    1e50:	d1 04       	cpc	r13, r1
    1e52:	84 f0       	brlt	.+32     	; 0x1e74 <_Z19measureDrawStrengthv+0xac>
			//Call visual passing 1
			LCDdisplay(power,1);
    1e54:	61 e0       	ldi	r22, 0x01	; 1
    1e56:	70 e0       	ldi	r23, 0x00	; 0
    1e58:	80 91 08 01 	lds	r24, 0x0108
    1e5c:	90 91 09 01 	lds	r25, 0x0109
    1e60:	0e 94 a6 0c 	call	0x194c	; 0x194c <_Z10LCDdisplayii>
			returnValue = 1;
    1e64:	ee 24       	eor	r14, r14
    1e66:	e3 94       	inc	r14
    1e68:	f1 2c       	mov	r15, r1
    1e6a:	3b c0       	rjmp	.+118    	; 0x1ee2 <_Z19measureDrawStrengthv+0x11a>
		}
		else if (adc_val <= twoThresh && adc_val > threeThresh) {
    1e6c:	86 ef       	ldi	r24, 0xF6	; 246
    1e6e:	c8 16       	cp	r12, r24
    1e70:	d1 04       	cpc	r13, r1
    1e72:	8c f4       	brge	.+34     	; 0x1e96 <_Z19measureDrawStrengthv+0xce>
    1e74:	22 ee       	ldi	r18, 0xE2	; 226
    1e76:	c2 16       	cp	r12, r18
    1e78:	d1 04       	cpc	r13, r1
    1e7a:	8c f0       	brlt	.+34     	; 0x1e9e <_Z19measureDrawStrengthv+0xd6>
			//Call visual passing 2
			LCDdisplay(power,2);
    1e7c:	62 e0       	ldi	r22, 0x02	; 2
    1e7e:	70 e0       	ldi	r23, 0x00	; 0
    1e80:	80 91 08 01 	lds	r24, 0x0108
    1e84:	90 91 09 01 	lds	r25, 0x0109
    1e88:	0e 94 a6 0c 	call	0x194c	; 0x194c <_Z10LCDdisplayii>
			returnValue = 2;
    1e8c:	68 94       	set
    1e8e:	ee 24       	eor	r14, r14
    1e90:	e1 f8       	bld	r14, 1
    1e92:	f1 2c       	mov	r15, r1
    1e94:	26 c0       	rjmp	.+76     	; 0x1ee2 <_Z19measureDrawStrengthv+0x11a>
		}
		else if (adc_val <= threeThresh && adc_val > fourThresh) {
    1e96:	82 ee       	ldi	r24, 0xE2	; 226
    1e98:	c8 16       	cp	r12, r24
    1e9a:	d1 04       	cpc	r13, r1
    1e9c:	94 f4       	brge	.+36     	; 0x1ec2 <_Z19measureDrawStrengthv+0xfa>
    1e9e:	2e ec       	ldi	r18, 0xCE	; 206
    1ea0:	c2 16       	cp	r12, r18
    1ea2:	d1 04       	cpc	r13, r1
    1ea4:	94 f0       	brlt	.+36     	; 0x1eca <_Z19measureDrawStrengthv+0x102>
			//Call visual passing 3
			LCDdisplay(power,3);
    1ea6:	63 e0       	ldi	r22, 0x03	; 3
    1ea8:	70 e0       	ldi	r23, 0x00	; 0
    1eaa:	80 91 08 01 	lds	r24, 0x0108
    1eae:	90 91 09 01 	lds	r25, 0x0109
    1eb2:	0e 94 a6 0c 	call	0x194c	; 0x194c <_Z10LCDdisplayii>
			returnValue = 3;
    1eb6:	0f 2e       	mov	r0, r31
    1eb8:	f3 e0       	ldi	r31, 0x03	; 3
    1eba:	ef 2e       	mov	r14, r31
    1ebc:	f1 2c       	mov	r15, r1
    1ebe:	f0 2d       	mov	r31, r0
    1ec0:	10 c0       	rjmp	.+32     	; 0x1ee2 <_Z19measureDrawStrengthv+0x11a>
		}
		else if(adc_val <= fourThresh) {
    1ec2:	8e ec       	ldi	r24, 0xCE	; 206
    1ec4:	c8 16       	cp	r12, r24
    1ec6:	d1 04       	cpc	r13, r1
    1ec8:	64 f4       	brge	.+24     	; 0x1ee2 <_Z19measureDrawStrengthv+0x11a>
			//Call visual passing 4
			LCDdisplay(power, 4);
    1eca:	64 e0       	ldi	r22, 0x04	; 4
    1ecc:	70 e0       	ldi	r23, 0x00	; 0
    1ece:	80 91 08 01 	lds	r24, 0x0108
    1ed2:	90 91 09 01 	lds	r25, 0x0109
    1ed6:	0e 94 a6 0c 	call	0x194c	; 0x194c <_Z10LCDdisplayii>
			returnValue = 4;
    1eda:	68 94       	set
    1edc:	ee 24       	eor	r14, r14
    1ede:	e2 f8       	bld	r14, 2
    1ee0:	f1 2c       	mov	r15, r1
		}//end if
		
		//create a temporary array with the new adc_val
		int temp[6] = {adc_val, adcArray[0],adcArray[1],adcArray[2],adcArray[3],adcArray[4]};
    1ee2:	da 82       	std	Y+2, r13	; 0x02
    1ee4:	c9 82       	std	Y+1, r12	; 0x01
    1ee6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ee8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eea:	9c 83       	std	Y+4, r25	; 0x04
    1eec:	8b 83       	std	Y+3, r24	; 0x03
    1eee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ef0:	98 89       	ldd	r25, Y+16	; 0x10
    1ef2:	9e 83       	std	Y+6, r25	; 0x06
    1ef4:	8d 83       	std	Y+5, r24	; 0x05
    1ef6:	89 89       	ldd	r24, Y+17	; 0x11
    1ef8:	9a 89       	ldd	r25, Y+18	; 0x12
    1efa:	98 87       	std	Y+8, r25	; 0x08
    1efc:	8f 83       	std	Y+7, r24	; 0x07
    1efe:	8b 89       	ldd	r24, Y+19	; 0x13
    1f00:	9c 89       	ldd	r25, Y+20	; 0x14
    1f02:	9a 87       	std	Y+10, r25	; 0x0a
    1f04:	89 87       	std	Y+9, r24	; 0x09
    1f06:	8d 89       	ldd	r24, Y+21	; 0x15
    1f08:	9e 89       	ldd	r25, Y+22	; 0x16
    1f0a:	9c 87       	std	Y+12, r25	; 0x0c
    1f0c:	8b 87       	std	Y+11, r24	; 0x0b
    1f0e:	fe 01       	movw	r30, r28
    1f10:	31 96       	adiw	r30, 0x01	; 1
    1f12:	d8 01       	movw	r26, r16
    1f14:	c8 01       	movw	r24, r16
		//set adcArray to be the temporary array
		for(int i = 0; i < 6; i ++) {
			adcArray[i] = temp[i];
    1f16:	21 91       	ld	r18, Z+
    1f18:	31 91       	ld	r19, Z+
    1f1a:	2d 93       	st	X+, r18
    1f1c:	3d 93       	st	X+, r19
		}//end if
		
		//create a temporary array with the new adc_val
		int temp[6] = {adc_val, adcArray[0],adcArray[1],adcArray[2],adcArray[3],adcArray[4]};
		//set adcArray to be the temporary array
		for(int i = 0; i < 6; i ++) {
    1f1e:	e8 17       	cp	r30, r24
    1f20:	f9 07       	cpc	r31, r25
    1f22:	c9 f7       	brne	.-14     	; 0x1f16 <_Z19measureDrawStrengthv+0x14e>
	
	//get the adc value
	adc_val = ReadADC(0);
	
	//continue to read in adc while the bow hasn't been fired
	while(!isFired(adcArray)){
    1f24:	c8 01       	movw	r24, r16
    1f26:	0e 94 1c 0b 	call	0x1638	; 0x1638 <_Z7isFiredPi>
    1f2a:	88 23       	and	r24, r24
    1f2c:	09 f4       	brne	.+2      	; 0x1f30 <_Z19measureDrawStrengthv+0x168>
    1f2e:	74 cf       	rjmp	.-280    	; 0x1e18 <_Z19measureDrawStrengthv+0x50>
		}//end for
	}//end while
	
	//Return the final ADC value by looking at thresholds
	//we look at adcArray[5] to see where the bow was at when it was fired
	if(adcArray[5] <= oneThresh && adcArray[5] > twoThresh) {
    1f30:	8f 89       	ldd	r24, Y+23	; 0x17
    1f32:	98 8d       	ldd	r25, Y+24	; 0x18
    1f34:	84 31       	cpi	r24, 0x14	; 20
    1f36:	21 e0       	ldi	r18, 0x01	; 1
    1f38:	92 07       	cpc	r25, r18
    1f3a:	24 f4       	brge	.+8      	; 0x1f44 <_Z19measureDrawStrengthv+0x17c>
    1f3c:	86 3f       	cpi	r24, 0xF6	; 246
    1f3e:	91 05       	cpc	r25, r1
    1f40:	24 f0       	brlt	.+8      	; 0x1f4a <_Z19measureDrawStrengthv+0x182>
    1f42:	1a c0       	rjmp	.+52     	; 0x1f78 <_Z19measureDrawStrengthv+0x1b0>
		returnValue = 1;
	}
	else if(adcArray[5] <= twoThresh && adcArray[5] > threeThresh) {
    1f44:	86 3f       	cpi	r24, 0xF6	; 246
    1f46:	91 05       	cpc	r25, r1
    1f48:	24 f4       	brge	.+8      	; 0x1f52 <_Z19measureDrawStrengthv+0x18a>
    1f4a:	82 3e       	cpi	r24, 0xE2	; 226
    1f4c:	91 05       	cpc	r25, r1
    1f4e:	c4 f4       	brge	.+48     	; 0x1f80 <_Z19measureDrawStrengthv+0x1b8>
    1f50:	03 c0       	rjmp	.+6      	; 0x1f58 <_Z19measureDrawStrengthv+0x190>
		returnValue = 2;
	}
	else if (adcArray[5] <= threeThresh && adcArray[5] > fourThresh) {
    1f52:	82 3e       	cpi	r24, 0xE2	; 226
    1f54:	91 05       	cpc	r25, r1
    1f56:	44 f4       	brge	.+16     	; 0x1f68 <_Z19measureDrawStrengthv+0x1a0>
    1f58:	8e 3c       	cpi	r24, 0xCE	; 206
    1f5a:	91 05       	cpc	r25, r1
    1f5c:	b4 f4       	brge	.+44     	; 0x1f8a <_Z19measureDrawStrengthv+0x1c2>
		returnValue = 3;
	}
	else if(adcArray[5] <= fourThresh) {
		returnValue = 4;
    1f5e:	68 94       	set
    1f60:	ee 24       	eor	r14, r14
    1f62:	e2 f8       	bld	r14, 2
    1f64:	f1 2c       	mov	r15, r1
    1f66:	29 c0       	rjmp	.+82     	; 0x1fba <_Z19measureDrawStrengthv+0x1f2>
		returnValue = 2;
	}
	else if (adcArray[5] <= threeThresh && adcArray[5] > fourThresh) {
		returnValue = 3;
	}
	else if(adcArray[5] <= fourThresh) {
    1f68:	8e 3c       	cpi	r24, 0xCE	; 206
    1f6a:	91 05       	cpc	r25, r1
    1f6c:	34 f5       	brge	.+76     	; 0x1fba <_Z19measureDrawStrengthv+0x1f2>
		returnValue = 4;
    1f6e:	68 94       	set
    1f70:	ee 24       	eor	r14, r14
    1f72:	e2 f8       	bld	r14, 2
    1f74:	f1 2c       	mov	r15, r1
    1f76:	21 c0       	rjmp	.+66     	; 0x1fba <_Z19measureDrawStrengthv+0x1f2>
	}//end while
	
	//Return the final ADC value by looking at thresholds
	//we look at adcArray[5] to see where the bow was at when it was fired
	if(adcArray[5] <= oneThresh && adcArray[5] > twoThresh) {
		returnValue = 1;
    1f78:	ee 24       	eor	r14, r14
    1f7a:	e3 94       	inc	r14
    1f7c:	f1 2c       	mov	r15, r1
    1f7e:	1d c0       	rjmp	.+58     	; 0x1fba <_Z19measureDrawStrengthv+0x1f2>
	}
	else if(adcArray[5] <= twoThresh && adcArray[5] > threeThresh) {
		returnValue = 2;
    1f80:	68 94       	set
    1f82:	ee 24       	eor	r14, r14
    1f84:	e1 f8       	bld	r14, 1
    1f86:	f1 2c       	mov	r15, r1
    1f88:	18 c0       	rjmp	.+48     	; 0x1fba <_Z19measureDrawStrengthv+0x1f2>
	}
	else if (adcArray[5] <= threeThresh && adcArray[5] > fourThresh) {
		returnValue = 3;
    1f8a:	0f 2e       	mov	r0, r31
    1f8c:	f3 e0       	ldi	r31, 0x03	; 3
    1f8e:	ef 2e       	mov	r14, r31
    1f90:	f1 2c       	mov	r15, r1
    1f92:	f0 2d       	mov	r31, r0
    1f94:	12 c0       	rjmp	.+36     	; 0x1fba <_Z19measureDrawStrengthv+0x1f2>
		//this if statment checks to see if the bow has been returned to the initial state without being fired
		if(!bowNocked() && adcArray[0] < nockThresh) {
			//bow has returned, set the return value to zero
			returnValue=0;
			//clear the power bar
			LCDdisplay(power, 0);
    1f96:	60 e0       	ldi	r22, 0x00	; 0
    1f98:	70 e0       	ldi	r23, 0x00	; 0
    1f9a:	80 91 08 01 	lds	r24, 0x0108
    1f9e:	90 91 09 01 	lds	r25, 0x0109
    1fa2:	0e 94 a6 0c 	call	0x194c	; 0x194c <_Z10LCDdisplayii>
			//turn off sound
			PORTD = 0xFF;
    1fa6:	8f ef       	ldi	r24, 0xFF	; 255
    1fa8:	8b b9       	out	0x0b, r24	; 11
		//get the adc value
		adc_val = ReadADC(0);
		//this if statment checks to see if the bow has been returned to the initial state without being fired
		if(!bowNocked() && adcArray[0] < nockThresh) {
			//bow has returned, set the return value to zero
			returnValue=0;
    1faa:	e1 2c       	mov	r14, r1
    1fac:	f1 2c       	mov	r15, r1
    1fae:	c0 cf       	rjmp	.-128    	; 0x1f30 <_Z19measureDrawStrengthv+0x168>
			//break out of the loop
			break;
		}//end if
	
		//play drawback audio if the bow hasn't been fired or returned
		if(returnValue > 0) {
    1fb0:	1e 14       	cp	r1, r14
    1fb2:	1f 04       	cpc	r1, r15
    1fb4:	0c f4       	brge	.+2      	; 0x1fb8 <_Z19measureDrawStrengthv+0x1f0>
    1fb6:	40 cf       	rjmp	.-384    	; 0x1e38 <_Z19measureDrawStrengthv+0x70>
    1fb8:	44 cf       	rjmp	.-376    	; 0x1e42 <_Z19measureDrawStrengthv+0x7a>
	else if(adcArray[5] <= fourThresh) {
		returnValue = 4;
	}//end if
	
	return returnValue;
}//end measureDrawStrength
    1fba:	c7 01       	movw	r24, r14
    1fbc:	68 96       	adiw	r28, 0x18	; 24
    1fbe:	0f b6       	in	r0, 0x3f	; 63
    1fc0:	f8 94       	cli
    1fc2:	de bf       	out	0x3e, r29	; 62
    1fc4:	0f be       	out	0x3f, r0	; 63
    1fc6:	cd bf       	out	0x3d, r28	; 61
    1fc8:	df 91       	pop	r29
    1fca:	cf 91       	pop	r28
    1fcc:	1f 91       	pop	r17
    1fce:	0f 91       	pop	r16
    1fd0:	ff 90       	pop	r15
    1fd2:	ef 90       	pop	r14
    1fd4:	df 90       	pop	r13
    1fd6:	cf 90       	pop	r12
    1fd8:	08 95       	ret

00001fda <_Z6sendIRi>:
of drawStrength. Also decreases mana based
on the drawStrength.

Written by: Katie Hobble
=================================*/
void sendIR(int drawStrength) {
    1fda:	0f 93       	push	r16
    1fdc:	1f 93       	push	r17
    1fde:	cf 93       	push	r28
    1fe0:	df 93       	push	r29
	//Decrease mana if the strength is greater than 0
	if (drawStrength > 0) {
    1fe2:	18 16       	cp	r1, r24
    1fe4:	19 06       	cpc	r1, r25
    1fe6:	0c f0       	brlt	.+2      	; 0x1fea <_Z6sendIRi+0x10>
    1fe8:	5d c0       	rjmp	.+186    	; 0x20a4 <_Z6sendIRi+0xca>
		//Decrease mana according to its value (it'll be either 0 or mana-drawStrength)
		if(mana - drawStrength < 0) {
    1fea:	20 91 00 02 	lds	r18, 0x0200
    1fee:	30 91 01 02 	lds	r19, 0x0201
    1ff2:	28 1b       	sub	r18, r24
    1ff4:	39 0b       	sbc	r19, r25
    1ff6:	4a f4       	brpl	.+18     	; 0x200a <_Z6sendIRi+0x30>
			//Set mana to be zero if it was going to be negative
			mana = 0;
    1ff8:	10 92 01 02 	sts	0x0201, r1
    1ffc:	10 92 00 02 	sts	0x0200, r1
			manaCount = 0;
    2000:	10 92 ff 01 	sts	0x01FF, r1
    2004:	10 92 fe 01 	sts	0x01FE, r1
    2008:	39 c0       	rjmp	.+114    	; 0x207c <_Z6sendIRi+0xa2>
		}
		else {
			//Set mana to be itself minus the drawstrength
			mana = mana - drawStrength;
    200a:	30 93 01 02 	sts	0x0201, r19
    200e:	20 93 00 02 	sts	0x0200, r18
			manaCount = 0;
    2012:	10 92 ff 01 	sts	0x01FF, r1
    2016:	10 92 fe 01 	sts	0x01FE, r1
    201a:	30 c0       	rjmp	.+96     	; 0x207c <_Z6sendIRi+0xa2>
		PORTD = 0xFF;
		
		//Send Damage Packet to PC4 (long range)
		for (int i = 0; i < drawStrength; i ++) {
			//Send start envelope
			FiveSixK(10, 0x10);
    201c:	60 e1       	ldi	r22, 0x10	; 16
    201e:	70 e0       	ldi	r23, 0x00	; 0
    2020:	8a e0       	ldi	r24, 0x0A	; 10
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	0e 94 29 0b 	call	0x1652	; 0x1652 <_Z8FiveSixKii>
			//Send damage data envelope
			FiveSixK(20, 0x10);
    2028:	60 e1       	ldi	r22, 0x10	; 16
    202a:	70 e0       	ldi	r23, 0x00	; 0
    202c:	84 e1       	ldi	r24, 0x14	; 20
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	0e 94 29 0b 	call	0x1652	; 0x1652 <_Z8FiveSixKii>
			//Send damage repeat data evelope
			FiveSixK(20, 0x10);
    2034:	60 e1       	ldi	r22, 0x10	; 16
    2036:	70 e0       	ldi	r23, 0x00	; 0
    2038:	84 e1       	ldi	r24, 0x14	; 20
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	0e 94 29 0b 	call	0x1652	; 0x1652 <_Z8FiveSixKii>
			//Send stop envelope
			FiveSixK(150, 0x10);
    2040:	60 e1       	ldi	r22, 0x10	; 16
    2042:	70 e0       	ldi	r23, 0x00	; 0
    2044:	86 e9       	ldi	r24, 0x96	; 150
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	0e 94 29 0b 	call	0x1652	; 0x1652 <_Z8FiveSixKii>
    204c:	2f ef       	ldi	r18, 0xFF	; 255
    204e:	80 e7       	ldi	r24, 0x70	; 112
    2050:	92 e0       	ldi	r25, 0x02	; 2
    2052:	21 50       	subi	r18, 0x01	; 1
    2054:	80 40       	sbci	r24, 0x00	; 0
    2056:	90 40       	sbci	r25, 0x00	; 0
    2058:	e1 f7       	brne	.-8      	; 0x2052 <_Z6sendIRi+0x78>
    205a:	00 c0       	rjmp	.+0      	; 0x205c <_Z6sendIRi+0x82>
    205c:	00 00       	nop
		_delay_ms(300);
		//Turn off sound
		PORTD = 0xFF;
		
		//Send Damage Packet to PC4 (long range)
		for (int i = 0; i < drawStrength; i ++) {
    205e:	21 96       	adiw	r28, 0x01	; 1
    2060:	c0 17       	cp	r28, r16
    2062:	d1 07       	cpc	r29, r17
    2064:	d9 f6       	brne	.-74     	; 0x201c <_Z6sendIRi+0x42>
			//Delay for a little
			_delay_ms(50);
		}//end for
		
		//Display the new mana
		LCDdisplay(plasma, mana);
    2066:	60 91 00 02 	lds	r22, 0x0200
    206a:	70 91 01 02 	lds	r23, 0x0201
    206e:	80 91 0c 01 	lds	r24, 0x010C
    2072:	90 91 0d 01 	lds	r25, 0x010D
    2076:	0e 94 a6 0c 	call	0x194c	; 0x194c <_Z10LCDdisplayii>
    207a:	14 c0       	rjmp	.+40     	; 0x20a4 <_Z6sendIRi+0xca>
    207c:	8c 01       	movw	r16, r24
			mana = mana - drawStrength;
			manaCount = 0;
		}//end if
		
		//Play the firing sound
		playAudio(shoot, drawStrength);
    207e:	bc 01       	movw	r22, r24
    2080:	80 91 02 01 	lds	r24, 0x0102
    2084:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <_Z9playAudioci>
    2088:	2f ef       	ldi	r18, 0xFF	; 255
    208a:	85 ea       	ldi	r24, 0xA5	; 165
    208c:	9e e0       	ldi	r25, 0x0E	; 14
    208e:	21 50       	subi	r18, 0x01	; 1
    2090:	80 40       	sbci	r24, 0x00	; 0
    2092:	90 40       	sbci	r25, 0x00	; 0
    2094:	e1 f7       	brne	.-8      	; 0x208e <_Z6sendIRi+0xb4>
    2096:	00 c0       	rjmp	.+0      	; 0x2098 <_Z6sendIRi+0xbe>
    2098:	00 00       	nop
		//Delay for a little to let it play
		_delay_ms(300);
		//Turn off sound
		PORTD = 0xFF;
    209a:	8f ef       	ldi	r24, 0xFF	; 255
    209c:	8b b9       	out	0x0b, r24	; 11
    209e:	c0 e0       	ldi	r28, 0x00	; 0
    20a0:	d0 e0       	ldi	r29, 0x00	; 0
    20a2:	bc cf       	rjmp	.-136    	; 0x201c <_Z6sendIRi+0x42>
		}//end for
		
		//Display the new mana
		LCDdisplay(plasma, mana);
	}//end if
}//end sendIR
    20a4:	df 91       	pop	r29
    20a6:	cf 91       	pop	r28
    20a8:	1f 91       	pop	r17
    20aa:	0f 91       	pop	r16
    20ac:	08 95       	ret

000020ae <_Z8mainLoopv>:
by calling drawStrength(), and calls sendIR() using
the drawStrength variable.

Written by: Katie Hobble
=================================*/
void mainLoop() {
    20ae:	cf 93       	push	r28
    20b0:	df 93       	push	r29
	//Create an infinite loop to run while the bow is in use
	while(health > 0) {
    20b2:	23 c0       	rjmp	.+70     	; 0x20fa <_Z8mainLoopv+0x4c>
		//First, check to see if mana is less than 0. If it is, enter
		//cool down mode to replenish mana
		if(mana <= 0) {
    20b4:	80 91 00 02 	lds	r24, 0x0200
    20b8:	90 91 01 02 	lds	r25, 0x0201
    20bc:	18 16       	cp	r1, r24
    20be:	19 06       	cpc	r1, r25
    20c0:	14 f0       	brlt	.+4      	; 0x20c6 <_Z8mainLoopv+0x18>
			//Mana needs to be replenished, enter cool down mode.
			coolDownMode();
    20c2:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <_Z12coolDownModev>
		}//end if
		
		//We get here only if mana is at an acceptable amount.
		//Poll the bowNocked method to see if there has been any user input
		if(bowNocked()) {
    20c6:	0e 94 11 0b 	call	0x1622	; 0x1622 <_Z9bowNockedv>
    20ca:	88 23       	and	r24, r24
    20cc:	b1 f0       	breq	.+44     	; 0x20fa <_Z8mainLoopv+0x4c>
	
			//Play the bow nocked sound
			playAudio(soundInput, 0);
    20ce:	60 e0       	ldi	r22, 0x00	; 0
    20d0:	70 e0       	ldi	r23, 0x00	; 0
    20d2:	80 91 03 01 	lds	r24, 0x0103
    20d6:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <_Z9playAudioci>
			//User input was detected by bowNocked() method. Call the
			//drawStrength() method to get the draw strength of the user's
			//shot in the form of a uint8_t
			int drawStrength = measureDrawStrength();
    20da:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_Z19measureDrawStrengthv>
    20de:	ec 01       	movw	r28, r24
			
			//Pass the uint8_t drawStrength to the sendIR method if its greater than 0
			if(drawStrength > 0) {
    20e0:	18 16       	cp	r1, r24
    20e2:	19 06       	cpc	r1, r25
    20e4:	54 f4       	brge	.+20     	; 0x20fa <_Z8mainLoopv+0x4c>
				//Display the bow's firing power
				LCDdisplay(fire,drawStrength);
    20e6:	bc 01       	movw	r22, r24
    20e8:	80 91 04 01 	lds	r24, 0x0104
    20ec:	90 91 05 01 	lds	r25, 0x0105
    20f0:	0e 94 a6 0c 	call	0x194c	; 0x194c <_Z10LCDdisplayii>
				//Send the damage packets
				sendIR(drawStrength);
    20f4:	ce 01       	movw	r24, r28
    20f6:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <_Z6sendIRi>

Written by: Katie Hobble
=================================*/
void mainLoop() {
	//Create an infinite loop to run while the bow is in use
	while(health > 0) {
    20fa:	80 91 02 02 	lds	r24, 0x0202
    20fe:	90 91 03 02 	lds	r25, 0x0203
    2102:	18 16       	cp	r1, r24
    2104:	19 06       	cpc	r1, r25
    2106:	b4 f2       	brlt	.-84     	; 0x20b4 <_Z8mainLoopv+0x6>
    2108:	c5 e0       	ldi	r28, 0x05	; 5
    210a:	d0 e0       	ldi	r29, 0x00	; 0
	}//end while
	
	//Health is less than zero, send out some stun packets through PC3 (short range)
	for(int i = 0; i < 5; i++){
		//Send the start envelope
		FiveSixK(10, 0x08);
    210c:	68 e0       	ldi	r22, 0x08	; 8
    210e:	70 e0       	ldi	r23, 0x00	; 0
    2110:	8a e0       	ldi	r24, 0x0A	; 10
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	0e 94 29 0b 	call	0x1652	; 0x1652 <_Z8FiveSixKii>
		//Send the first stun data envelpe
		FiveSixK(40, 0x08);
    2118:	68 e0       	ldi	r22, 0x08	; 8
    211a:	70 e0       	ldi	r23, 0x00	; 0
    211c:	88 e2       	ldi	r24, 0x28	; 40
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	0e 94 29 0b 	call	0x1652	; 0x1652 <_Z8FiveSixKii>
		//Repeat the stun data envelope
		FiveSixK(40, 0x08);
    2124:	68 e0       	ldi	r22, 0x08	; 8
    2126:	70 e0       	ldi	r23, 0x00	; 0
    2128:	88 e2       	ldi	r24, 0x28	; 40
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	0e 94 29 0b 	call	0x1652	; 0x1652 <_Z8FiveSixKii>
		//Send stop envelope
		FiveSixK(150, 0x08);
    2130:	68 e0       	ldi	r22, 0x08	; 8
    2132:	70 e0       	ldi	r23, 0x00	; 0
    2134:	86 e9       	ldi	r24, 0x96	; 150
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	0e 94 29 0b 	call	0x1652	; 0x1652 <_Z8FiveSixKii>
    213c:	2f ef       	ldi	r18, 0xFF	; 255
    213e:	80 e7       	ldi	r24, 0x70	; 112
    2140:	92 e0       	ldi	r25, 0x02	; 2
    2142:	21 50       	subi	r18, 0x01	; 1
    2144:	80 40       	sbci	r24, 0x00	; 0
    2146:	90 40       	sbci	r25, 0x00	; 0
    2148:	e1 f7       	brne	.-8      	; 0x2142 <_Z8mainLoopv+0x94>
    214a:	00 c0       	rjmp	.+0      	; 0x214c <_Z8mainLoopv+0x9e>
    214c:	00 00       	nop
    214e:	21 97       	sbiw	r28, 0x01	; 1
			}//end if
		}//end if
	}//end while
	
	//Health is less than zero, send out some stun packets through PC3 (short range)
	for(int i = 0; i < 5; i++){
    2150:	e9 f6       	brne	.-70     	; 0x210c <_Z8mainLoopv+0x5e>
		//Send stop envelope
		FiveSixK(150, 0x08);
		//Delay a little bit
		_delay_ms(50);
	}//end for
}//end mainLoop
    2152:	df 91       	pop	r29
    2154:	cf 91       	pop	r28
    2156:	08 95       	ret

00002158 <main>:
	
	Written by: Katie Hobble
=============================================*/
int main() {
	//Call the initialize function
	initialize();
    2158:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <_Z10initializev>
	
	//Once all pins, communications, and global variables are initialized
	//enter the main loop of the program
	mainLoop();
    215c:	0e 94 57 10 	call	0x20ae	; 0x20ae <_Z8mainLoopv>
	
	//Main loop has exited, this means the bow has no health
	//disable any other interrupts
	cli();
    2160:	f8 94       	cli
	//Display the bow destroyed screen
	LCDdisplay(4, 0);
    2162:	60 e0       	ldi	r22, 0x00	; 0
    2164:	70 e0       	ldi	r23, 0x00	; 0
    2166:	84 e0       	ldi	r24, 0x04	; 4
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	0e 94 a6 0c 	call	0x194c	; 0x194c <_Z10LCDdisplayii>
	
	//return 0, end main
	return 0;
}//end main
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	08 95       	ret

00002174 <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    2174:	0e 94 5f 15 	call	0x2abe	; 0x2abe <abort>

00002178 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2178:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    217a:	91 8d       	ldd	r25, Z+25	; 0x19
    217c:	22 8d       	ldd	r18, Z+26	; 0x1a
    217e:	89 2f       	mov	r24, r25
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	80 5c       	subi	r24, 0xC0	; 192
    2184:	9f 4f       	sbci	r25, 0xFF	; 255
    2186:	82 1b       	sub	r24, r18
    2188:	91 09       	sbc	r25, r1
}
    218a:	8f 73       	andi	r24, 0x3F	; 63
    218c:	99 27       	eor	r25, r25
    218e:	08 95       	ret

00002190 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2190:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    2192:	91 8d       	ldd	r25, Z+25	; 0x19
    2194:	82 8d       	ldd	r24, Z+26	; 0x1a
    2196:	98 17       	cp	r25, r24
    2198:	31 f0       	breq	.+12     	; 0x21a6 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    219a:	82 8d       	ldd	r24, Z+26	; 0x1a
    219c:	e8 0f       	add	r30, r24
    219e:	f1 1d       	adc	r31, r1
    21a0:	85 8d       	ldd	r24, Z+29	; 0x1d
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    21a6:	8f ef       	ldi	r24, 0xFF	; 255
    21a8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    21aa:	08 95       	ret

000021ac <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    21ac:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    21ae:	91 8d       	ldd	r25, Z+25	; 0x19
    21b0:	82 8d       	ldd	r24, Z+26	; 0x1a
    21b2:	98 17       	cp	r25, r24
    21b4:	61 f0       	breq	.+24     	; 0x21ce <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    21b6:	82 8d       	ldd	r24, Z+26	; 0x1a
    21b8:	df 01       	movw	r26, r30
    21ba:	a8 0f       	add	r26, r24
    21bc:	b1 1d       	adc	r27, r1
    21be:	5d 96       	adiw	r26, 0x1d	; 29
    21c0:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    21c2:	92 8d       	ldd	r25, Z+26	; 0x1a
    21c4:	9f 5f       	subi	r25, 0xFF	; 255
    21c6:	9f 73       	andi	r25, 0x3F	; 63
    21c8:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    21ce:	8f ef       	ldi	r24, 0xFF	; 255
    21d0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    21d2:	08 95       	ret

000021d4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    21d4:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    21d6:	84 8d       	ldd	r24, Z+28	; 0x1c
    21d8:	df 01       	movw	r26, r30
    21da:	a8 0f       	add	r26, r24
    21dc:	b1 1d       	adc	r27, r1
    21de:	a3 5a       	subi	r26, 0xA3	; 163
    21e0:	bf 4f       	sbci	r27, 0xFF	; 255
    21e2:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    21e4:	24 8d       	ldd	r18, Z+28	; 0x1c
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	2f 5f       	subi	r18, 0xFF	; 255
    21ea:	3f 4f       	sbci	r19, 0xFF	; 255
    21ec:	2f 73       	andi	r18, 0x3F	; 63
    21ee:	30 78       	andi	r19, 0x80	; 128
    21f0:	33 23       	and	r19, r19
    21f2:	34 f4       	brge	.+12     	; 0x2200 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
    21f4:	21 50       	subi	r18, 0x01	; 1
    21f6:	31 09       	sbc	r19, r1
    21f8:	20 6c       	ori	r18, 0xC0	; 192
    21fa:	3f 6f       	ori	r19, 0xFF	; 255
    21fc:	2f 5f       	subi	r18, 0xFF	; 255
    21fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2200:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
    2202:	a6 89       	ldd	r26, Z+22	; 0x16
    2204:	b7 89       	ldd	r27, Z+23	; 0x17
    2206:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    2208:	a0 89       	ldd	r26, Z+16	; 0x10
    220a:	b1 89       	ldd	r27, Z+17	; 0x11
    220c:	8c 91       	ld	r24, X
    220e:	80 64       	ori	r24, 0x40	; 64
    2210:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    2212:	93 8d       	ldd	r25, Z+27	; 0x1b
    2214:	84 8d       	ldd	r24, Z+28	; 0x1c
    2216:	98 13       	cpse	r25, r24
    2218:	06 c0       	rjmp	.+12     	; 0x2226 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    221a:	02 88       	ldd	r0, Z+18	; 0x12
    221c:	f3 89       	ldd	r31, Z+19	; 0x13
    221e:	e0 2d       	mov	r30, r0
    2220:	80 81       	ld	r24, Z
    2222:	8f 7d       	andi	r24, 0xDF	; 223
    2224:	80 83       	st	Z, r24
    2226:	08 95       	ret

00002228 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2228:	cf 93       	push	r28
    222a:	df 93       	push	r29
    222c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    222e:	88 8d       	ldd	r24, Y+24	; 0x18
    2230:	81 11       	cpse	r24, r1
    2232:	0f c0       	rjmp	.+30     	; 0x2252 <_ZN14HardwareSerial5flushEv+0x2a>
    2234:	18 c0       	rjmp	.+48     	; 0x2266 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	07 fc       	sbrc	r0, 7
    223a:	0d c0       	rjmp	.+26     	; 0x2256 <_ZN14HardwareSerial5flushEv+0x2e>
    223c:	90 81       	ld	r25, Z
    223e:	95 ff       	sbrs	r25, 5
    2240:	0a c0       	rjmp	.+20     	; 0x2256 <_ZN14HardwareSerial5flushEv+0x2e>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    2242:	a8 89       	ldd	r26, Y+16	; 0x10
    2244:	b9 89       	ldd	r27, Y+17	; 0x11
    2246:	8c 91       	ld	r24, X
    2248:	85 ff       	sbrs	r24, 5
    224a:	05 c0       	rjmp	.+10     	; 0x2256 <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
    224c:	ce 01       	movw	r24, r28
    224e:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2252:	ea 89       	ldd	r30, Y+18	; 0x12
    2254:	fb 89       	ldd	r31, Y+19	; 0x13
    2256:	90 81       	ld	r25, Z
    2258:	95 fd       	sbrc	r25, 5
    225a:	ed cf       	rjmp	.-38     	; 0x2236 <_ZN14HardwareSerial5flushEv+0xe>
    225c:	a8 89       	ldd	r26, Y+16	; 0x10
    225e:	b9 89       	ldd	r27, Y+17	; 0x11
    2260:	8c 91       	ld	r24, X
    2262:	86 ff       	sbrs	r24, 6
    2264:	e8 cf       	rjmp	.-48     	; 0x2236 <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2266:	df 91       	pop	r29
    2268:	cf 91       	pop	r28
    226a:	08 95       	ret

0000226c <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    226c:	0f 93       	push	r16
    226e:	1f 93       	push	r17
    2270:	cf 93       	push	r28
    2272:	df 93       	push	r29
    2274:	fc 01       	movw	r30, r24
  _written = true;
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	80 8f       	std	Z+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    227a:	93 8d       	ldd	r25, Z+27	; 0x1b
    227c:	84 8d       	ldd	r24, Z+28	; 0x1c
    227e:	98 13       	cpse	r25, r24
    2280:	22 c0       	rjmp	.+68     	; 0x22c6 <_ZN14HardwareSerial5writeEh+0x5a>
    2282:	a0 89       	ldd	r26, Z+16	; 0x10
    2284:	b1 89       	ldd	r27, Z+17	; 0x11
    2286:	8c 91       	ld	r24, X
    2288:	85 fd       	sbrc	r24, 5
    228a:	2f c0       	rjmp	.+94     	; 0x22ea <_ZN14HardwareSerial5writeEh+0x7e>
    228c:	1c c0       	rjmp	.+56     	; 0x22c6 <_ZN14HardwareSerial5writeEh+0x5a>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
    228e:	0f b6       	in	r0, 0x3f	; 63
    2290:	07 fc       	sbrc	r0, 7
    2292:	08 c0       	rjmp	.+16     	; 0x22a4 <_ZN14HardwareSerial5writeEh+0x38>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2294:	e8 89       	ldd	r30, Y+16	; 0x10
    2296:	f9 89       	ldd	r31, Y+17	; 0x11
    2298:	80 81       	ld	r24, Z
    229a:	85 ff       	sbrs	r24, 5
    229c:	03 c0       	rjmp	.+6      	; 0x22a4 <_ZN14HardwareSerial5writeEh+0x38>
	_tx_udr_empty_irq();
    229e:	ce 01       	movw	r24, r28
    22a0:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    22a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22a6:	09 17       	cp	r16, r25
    22a8:	91 f3       	breq	.-28     	; 0x228e <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    22aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22ac:	fe 01       	movw	r30, r28
    22ae:	e8 0f       	add	r30, r24
    22b0:	f1 1d       	adc	r31, r1
    22b2:	e3 5a       	subi	r30, 0xA3	; 163
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	10 83       	st	Z, r17
  _tx_buffer_head = i;
    22b8:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    22ba:	ea 89       	ldd	r30, Y+18	; 0x12
    22bc:	fb 89       	ldd	r31, Y+19	; 0x13
    22be:	80 81       	ld	r24, Z
    22c0:	80 62       	ori	r24, 0x20	; 32
    22c2:	80 83       	st	Z, r24
  
  return 1;
    22c4:	1b c0       	rjmp	.+54     	; 0x22fc <_ZN14HardwareSerial5writeEh+0x90>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    22c6:	23 8d       	ldd	r18, Z+27	; 0x1b
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	2f 5f       	subi	r18, 0xFF	; 255
    22cc:	3f 4f       	sbci	r19, 0xFF	; 255
    22ce:	2f 73       	andi	r18, 0x3F	; 63
    22d0:	30 78       	andi	r19, 0x80	; 128
    22d2:	33 23       	and	r19, r19
    22d4:	34 f4       	brge	.+12     	; 0x22e2 <_ZN14HardwareSerial5writeEh+0x76>
    22d6:	21 50       	subi	r18, 0x01	; 1
    22d8:	31 09       	sbc	r19, r1
    22da:	20 6c       	ori	r18, 0xC0	; 192
    22dc:	3f 6f       	ori	r19, 0xFF	; 255
    22de:	2f 5f       	subi	r18, 0xFF	; 255
    22e0:	3f 4f       	sbci	r19, 0xFF	; 255
    22e2:	16 2f       	mov	r17, r22
    22e4:	ef 01       	movw	r28, r30
    22e6:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    22e8:	dd cf       	rjmp	.-70     	; 0x22a4 <_ZN14HardwareSerial5writeEh+0x38>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    22ea:	a6 89       	ldd	r26, Z+22	; 0x16
    22ec:	b7 89       	ldd	r27, Z+23	; 0x17
    22ee:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
    22f0:	00 88       	ldd	r0, Z+16	; 0x10
    22f2:	f1 89       	ldd	r31, Z+17	; 0x11
    22f4:	e0 2d       	mov	r30, r0
    22f6:	80 81       	ld	r24, Z
    22f8:	80 64       	ori	r24, 0x40	; 64
    22fa:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	df 91       	pop	r29
    2302:	cf 91       	pop	r28
    2304:	1f 91       	pop	r17
    2306:	0f 91       	pop	r16
    2308:	08 95       	ret

0000230a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    230a:	bf 92       	push	r11
    230c:	cf 92       	push	r12
    230e:	df 92       	push	r13
    2310:	ef 92       	push	r14
    2312:	ff 92       	push	r15
    2314:	0f 93       	push	r16
    2316:	1f 93       	push	r17
    2318:	cf 93       	push	r28
    231a:	df 93       	push	r29
    231c:	ec 01       	movw	r28, r24
    231e:	6a 01       	movw	r12, r20
    2320:	7b 01       	movw	r14, r22
    2322:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    2324:	e8 89       	ldd	r30, Y+16	; 0x10
    2326:	f9 89       	ldd	r31, Y+17	; 0x11
    2328:	82 e0       	ldi	r24, 0x02	; 2
    232a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    232c:	41 15       	cp	r20, r1
    232e:	51 4e       	sbci	r21, 0xE1	; 225
    2330:	61 05       	cpc	r22, r1
    2332:	71 05       	cpc	r23, r1
    2334:	b1 f0       	breq	.+44     	; 0x2362 <_ZN14HardwareSerial5beginEmh+0x58>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2336:	60 e0       	ldi	r22, 0x00	; 0
    2338:	79 e0       	ldi	r23, 0x09	; 9
    233a:	8d e3       	ldi	r24, 0x3D	; 61
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	a7 01       	movw	r20, r14
    2340:	96 01       	movw	r18, r12
    2342:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__udivmodsi4>
    2346:	89 01       	movw	r16, r18
    2348:	9a 01       	movw	r18, r20
    234a:	01 50       	subi	r16, 0x01	; 1
    234c:	11 09       	sbc	r17, r1
    234e:	21 09       	sbc	r18, r1
    2350:	31 09       	sbc	r19, r1
    2352:	36 95       	lsr	r19
    2354:	27 95       	ror	r18
    2356:	17 95       	ror	r17
    2358:	07 95       	ror	r16
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    235a:	01 15       	cp	r16, r1
    235c:	80 e1       	ldi	r24, 0x10	; 16
    235e:	18 07       	cpc	r17, r24
    2360:	a8 f0       	brcs	.+42     	; 0x238c <_ZN14HardwareSerial5beginEmh+0x82>
  {
    *_ucsra = 0;
    2362:	e8 89       	ldd	r30, Y+16	; 0x10
    2364:	f9 89       	ldd	r31, Y+17	; 0x11
    2366:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2368:	60 e8       	ldi	r22, 0x80	; 128
    236a:	74 e8       	ldi	r23, 0x84	; 132
    236c:	8e e1       	ldi	r24, 0x1E	; 30
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	a7 01       	movw	r20, r14
    2372:	96 01       	movw	r18, r12
    2374:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__udivmodsi4>
    2378:	da 01       	movw	r26, r20
    237a:	c9 01       	movw	r24, r18
    237c:	01 97       	sbiw	r24, 0x01	; 1
    237e:	a1 09       	sbc	r26, r1
    2380:	b1 09       	sbc	r27, r1
    2382:	b6 95       	lsr	r27
    2384:	a7 95       	ror	r26
    2386:	97 95       	ror	r25
    2388:	87 95       	ror	r24
    238a:	8c 01       	movw	r16, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    238c:	ec 85       	ldd	r30, Y+12	; 0x0c
    238e:	fd 85       	ldd	r31, Y+13	; 0x0d
    2390:	10 83       	st	Z, r17
  *_ubrrl = baud_setting;
    2392:	ee 85       	ldd	r30, Y+14	; 0x0e
    2394:	ff 85       	ldd	r31, Y+15	; 0x0f
    2396:	00 83       	st	Z, r16

  _written = false;
    2398:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    239a:	ec 89       	ldd	r30, Y+20	; 0x14
    239c:	fd 89       	ldd	r31, Y+21	; 0x15
    239e:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
    23a0:	ea 89       	ldd	r30, Y+18	; 0x12
    23a2:	fb 89       	ldd	r31, Y+19	; 0x13
    23a4:	80 81       	ld	r24, Z
    23a6:	80 61       	ori	r24, 0x10	; 16
    23a8:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    23aa:	ea 89       	ldd	r30, Y+18	; 0x12
    23ac:	fb 89       	ldd	r31, Y+19	; 0x13
    23ae:	80 81       	ld	r24, Z
    23b0:	88 60       	ori	r24, 0x08	; 8
    23b2:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    23b4:	ea 89       	ldd	r30, Y+18	; 0x12
    23b6:	fb 89       	ldd	r31, Y+19	; 0x13
    23b8:	80 81       	ld	r24, Z
    23ba:	80 68       	ori	r24, 0x80	; 128
    23bc:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    23be:	ea 89       	ldd	r30, Y+18	; 0x12
    23c0:	fb 89       	ldd	r31, Y+19	; 0x13
    23c2:	80 81       	ld	r24, Z
    23c4:	8f 7d       	andi	r24, 0xDF	; 223
    23c6:	80 83       	st	Z, r24
}
    23c8:	df 91       	pop	r29
    23ca:	cf 91       	pop	r28
    23cc:	1f 91       	pop	r17
    23ce:	0f 91       	pop	r16
    23d0:	ff 90       	pop	r15
    23d2:	ef 90       	pop	r14
    23d4:	df 90       	pop	r13
    23d6:	cf 90       	pop	r12
    23d8:	bf 90       	pop	r11
    23da:	08 95       	ret

000023dc <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    23dc:	1f 92       	push	r1
    23de:	0f 92       	push	r0
    23e0:	0f b6       	in	r0, 0x3f	; 63
    23e2:	0f 92       	push	r0
    23e4:	11 24       	eor	r1, r1
    23e6:	2f 93       	push	r18
    23e8:	8f 93       	push	r24
    23ea:	9f 93       	push	r25
    23ec:	af 93       	push	r26
    23ee:	bf 93       	push	r27
    23f0:	ef 93       	push	r30
    23f2:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    23f4:	e0 91 42 02 	lds	r30, 0x0242
    23f8:	f0 91 43 02 	lds	r31, 0x0243
    23fc:	80 81       	ld	r24, Z
    23fe:	82 fd       	sbrc	r24, 2
    2400:	14 c0       	rjmp	.+40     	; 0x242a <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2402:	e2 e3       	ldi	r30, 0x32	; 50
    2404:	f2 e0       	ldi	r31, 0x02	; 2
    2406:	a6 89       	ldd	r26, Z+22	; 0x16
    2408:	b7 89       	ldd	r27, Z+23	; 0x17
    240a:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    240c:	81 8d       	ldd	r24, Z+25	; 0x19
    240e:	8f 5f       	subi	r24, 0xFF	; 255
    2410:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2412:	92 8d       	ldd	r25, Z+26	; 0x1a
    2414:	89 17       	cp	r24, r25
    2416:	71 f0       	breq	.+28     	; 0x2434 <__vector_18+0x58>
      _rx_buffer[_rx_buffer_head] = c;
    2418:	df 01       	movw	r26, r30
    241a:	e1 8d       	ldd	r30, Z+25	; 0x19
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	ee 5c       	subi	r30, 0xCE	; 206
    2420:	fd 4f       	sbci	r31, 0xFD	; 253
    2422:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
    2424:	59 96       	adiw	r26, 0x19	; 25
    2426:	8c 93       	st	X, r24
    2428:	05 c0       	rjmp	.+10     	; 0x2434 <__vector_18+0x58>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    242a:	e0 91 48 02 	lds	r30, 0x0248
    242e:	f0 91 49 02 	lds	r31, 0x0249
    2432:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    2434:	ff 91       	pop	r31
    2436:	ef 91       	pop	r30
    2438:	bf 91       	pop	r27
    243a:	af 91       	pop	r26
    243c:	9f 91       	pop	r25
    243e:	8f 91       	pop	r24
    2440:	2f 91       	pop	r18
    2442:	0f 90       	pop	r0
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	0f 90       	pop	r0
    2448:	1f 90       	pop	r1
    244a:	18 95       	reti

0000244c <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    244c:	1f 92       	push	r1
    244e:	0f 92       	push	r0
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	0f 92       	push	r0
    2454:	11 24       	eor	r1, r1
    2456:	2f 93       	push	r18
    2458:	3f 93       	push	r19
    245a:	4f 93       	push	r20
    245c:	5f 93       	push	r21
    245e:	6f 93       	push	r22
    2460:	7f 93       	push	r23
    2462:	8f 93       	push	r24
    2464:	9f 93       	push	r25
    2466:	af 93       	push	r26
    2468:	bf 93       	push	r27
    246a:	ef 93       	push	r30
    246c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    246e:	82 e3       	ldi	r24, 0x32	; 50
    2470:	92 e0       	ldi	r25, 0x02	; 2
    2472:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    2476:	ff 91       	pop	r31
    2478:	ef 91       	pop	r30
    247a:	bf 91       	pop	r27
    247c:	af 91       	pop	r26
    247e:	9f 91       	pop	r25
    2480:	8f 91       	pop	r24
    2482:	7f 91       	pop	r23
    2484:	6f 91       	pop	r22
    2486:	5f 91       	pop	r21
    2488:	4f 91       	pop	r20
    248a:	3f 91       	pop	r19
    248c:	2f 91       	pop	r18
    248e:	0f 90       	pop	r0
    2490:	0f be       	out	0x3f, r0	; 63
    2492:	0f 90       	pop	r0
    2494:	1f 90       	pop	r1
    2496:	18 95       	reti

00002498 <_GLOBAL__sub_I___vector_18>:
    2498:	e2 e3       	ldi	r30, 0x32	; 50
    249a:	f2 e0       	ldi	r31, 0x02	; 2
    249c:	13 82       	std	Z+3, r1	; 0x03
    249e:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    24a0:	88 ee       	ldi	r24, 0xE8	; 232
    24a2:	93 e0       	ldi	r25, 0x03	; 3
    24a4:	a0 e0       	ldi	r26, 0x00	; 0
    24a6:	b0 e0       	ldi	r27, 0x00	; 0
    24a8:	84 83       	std	Z+4, r24	; 0x04
    24aa:	95 83       	std	Z+5, r25	; 0x05
    24ac:	a6 83       	std	Z+6, r26	; 0x06
    24ae:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    24b0:	8d ed       	ldi	r24, 0xDD	; 221
    24b2:	91 e0       	ldi	r25, 0x01	; 1
    24b4:	91 83       	std	Z+1, r25	; 0x01
    24b6:	80 83       	st	Z, r24
    24b8:	85 ec       	ldi	r24, 0xC5	; 197
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	95 87       	std	Z+13, r25	; 0x0d
    24be:	84 87       	std	Z+12, r24	; 0x0c
    24c0:	84 ec       	ldi	r24, 0xC4	; 196
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	97 87       	std	Z+15, r25	; 0x0f
    24c6:	86 87       	std	Z+14, r24	; 0x0e
    24c8:	80 ec       	ldi	r24, 0xC0	; 192
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	91 8b       	std	Z+17, r25	; 0x11
    24ce:	80 8b       	std	Z+16, r24	; 0x10
    24d0:	81 ec       	ldi	r24, 0xC1	; 193
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	93 8b       	std	Z+19, r25	; 0x13
    24d6:	82 8b       	std	Z+18, r24	; 0x12
    24d8:	82 ec       	ldi	r24, 0xC2	; 194
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	95 8b       	std	Z+21, r25	; 0x15
    24de:	84 8b       	std	Z+20, r24	; 0x14
    24e0:	86 ec       	ldi	r24, 0xC6	; 198
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	97 8b       	std	Z+23, r25	; 0x17
    24e6:	86 8b       	std	Z+22, r24	; 0x16
    24e8:	11 8e       	std	Z+25, r1	; 0x19
    24ea:	12 8e       	std	Z+26, r1	; 0x1a
    24ec:	13 8e       	std	Z+27, r1	; 0x1b
    24ee:	14 8e       	std	Z+28, r1	; 0x1c
    24f0:	08 95       	ret

000024f2 <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    24f2:	8f 92       	push	r8
    24f4:	9f 92       	push	r9
    24f6:	af 92       	push	r10
    24f8:	bf 92       	push	r11
    24fa:	cf 92       	push	r12
    24fc:	df 92       	push	r13
    24fe:	ef 92       	push	r14
    2500:	ff 92       	push	r15
    2502:	0f 93       	push	r16
    2504:	1f 93       	push	r17
    2506:	cf 93       	push	r28
    2508:	df 93       	push	r29
    250a:	5c 01       	movw	r10, r24
    250c:	7b 01       	movw	r14, r22
    250e:	4c 01       	movw	r8, r24
    2510:	82 e0       	ldi	r24, 0x02	; 2
    2512:	88 0e       	add	r8, r24
    2514:	91 1c       	adc	r9, r1
    2516:	65 01       	movw	r12, r10
    2518:	e5 e0       	ldi	r30, 0x05	; 5
    251a:	ce 0e       	add	r12, r30
    251c:	d1 1c       	adc	r13, r1
    size_t n = 0;
    251e:	00 e0       	ldi	r16, 0x00	; 0
    2520:	10 e0       	ldi	r17, 0x00	; 0
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
    2522:	f4 01       	movw	r30, r8
    2524:	61 91       	ld	r22, Z+
    2526:	4f 01       	movw	r8, r30
    2528:	4a e0       	ldi	r20, 0x0A	; 10
    252a:	50 e0       	ldi	r21, 0x00	; 0
    252c:	c7 01       	movw	r24, r14
    252e:	0e 94 da 13 	call	0x27b4	; 0x27b4 <_ZN5Print5printEhi>
    2532:	ec 01       	movw	r28, r24
        n += p.print('.');
    2534:	6e e2       	ldi	r22, 0x2E	; 46
    2536:	c7 01       	movw	r24, r14
    2538:	0e 94 32 13 	call	0x2664	; 0x2664 <_ZN5Print5printEc>
    253c:	8c 0f       	add	r24, r28
    253e:	9d 1f       	adc	r25, r29
    2540:	08 0f       	add	r16, r24
    2542:	19 1f       	adc	r17, r25
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    2544:	8c 14       	cp	r8, r12
    2546:	9d 04       	cpc	r9, r13
    2548:	61 f7       	brne	.-40     	; 0x2522 <_ZNK9IPAddress7printToER5Print+0x30>
    {
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    254a:	4a e0       	ldi	r20, 0x0A	; 10
    254c:	50 e0       	ldi	r21, 0x00	; 0
    254e:	f5 01       	movw	r30, r10
    2550:	65 81       	ldd	r22, Z+5	; 0x05
    2552:	c7 01       	movw	r24, r14
    2554:	0e 94 da 13 	call	0x27b4	; 0x27b4 <_ZN5Print5printEhi>
    return n;
}
    2558:	80 0f       	add	r24, r16
    255a:	91 1f       	adc	r25, r17
    255c:	df 91       	pop	r29
    255e:	cf 91       	pop	r28
    2560:	1f 91       	pop	r17
    2562:	0f 91       	pop	r16
    2564:	ff 90       	pop	r15
    2566:	ef 90       	pop	r14
    2568:	df 90       	pop	r13
    256a:	cf 90       	pop	r12
    256c:	bf 90       	pop	r11
    256e:	af 90       	pop	r10
    2570:	9f 90       	pop	r9
    2572:	8f 90       	pop	r8
    2574:	08 95       	ret

00002576 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    2576:	ef ec       	ldi	r30, 0xCF	; 207
    2578:	f2 e0       	ldi	r31, 0x02	; 2
    257a:	8d ee       	ldi	r24, 0xED	; 237
    257c:	91 e0       	ldi	r25, 0x01	; 1
    257e:	91 83       	std	Z+1, r25	; 0x01
    2580:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
    2582:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
    2584:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
    2586:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
    2588:	15 82       	std	Z+5, r1	; 0x05
    258a:	08 95       	ret

0000258c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    258c:	cf 92       	push	r12
    258e:	df 92       	push	r13
    2590:	ef 92       	push	r14
    2592:	ff 92       	push	r15
    2594:	0f 93       	push	r16
    2596:	1f 93       	push	r17
    2598:	cf 93       	push	r28
    259a:	df 93       	push	r29
  size_t n = 0;
  while (size--) {
    259c:	41 15       	cp	r20, r1
    259e:	51 05       	cpc	r21, r1
    25a0:	b1 f0       	breq	.+44     	; 0x25ce <_ZN5Print5writeEPKhj+0x42>
    25a2:	8c 01       	movw	r16, r24
    25a4:	e6 2e       	mov	r14, r22
    25a6:	f7 2e       	mov	r15, r23
    25a8:	ea 01       	movw	r28, r20
    25aa:	c1 2c       	mov	r12, r1
    25ac:	d1 2c       	mov	r13, r1
    n += write(*buffer++);
    25ae:	d7 01       	movw	r26, r14
    25b0:	6d 91       	ld	r22, X+
    25b2:	7d 01       	movw	r14, r26
    25b4:	d8 01       	movw	r26, r16
    25b6:	ed 91       	ld	r30, X+
    25b8:	fc 91       	ld	r31, X
    25ba:	01 90       	ld	r0, Z+
    25bc:	f0 81       	ld	r31, Z
    25be:	e0 2d       	mov	r30, r0
    25c0:	c8 01       	movw	r24, r16
    25c2:	09 95       	icall
    25c4:	c8 0e       	add	r12, r24
    25c6:	d9 1e       	adc	r13, r25
    25c8:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    25ca:	89 f7       	brne	.-30     	; 0x25ae <_ZN5Print5writeEPKhj+0x22>
    25cc:	02 c0       	rjmp	.+4      	; 0x25d2 <_ZN5Print5writeEPKhj+0x46>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
    25ce:	c1 2c       	mov	r12, r1
    25d0:	d1 2c       	mov	r13, r1
  while (size--) {
    n += write(*buffer++);
  }
  return n;
}
    25d2:	c6 01       	movw	r24, r12
    25d4:	df 91       	pop	r29
    25d6:	cf 91       	pop	r28
    25d8:	1f 91       	pop	r17
    25da:	0f 91       	pop	r16
    25dc:	ff 90       	pop	r15
    25de:	ef 90       	pop	r14
    25e0:	df 90       	pop	r13
    25e2:	cf 90       	pop	r12
    25e4:	08 95       	ret

000025e6 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    25e6:	ef 92       	push	r14
    25e8:	ff 92       	push	r15
    25ea:	0f 93       	push	r16
    25ec:	1f 93       	push	r17
    25ee:	cf 93       	push	r28
    25f0:	df 93       	push	r29
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    25f2:	eb 01       	movw	r28, r22
    25f4:	21 96       	adiw	r28, 0x01	; 1
    25f6:	fb 01       	movw	r30, r22
    25f8:	64 91       	lpm	r22, Z
    if (c == 0) break;
    25fa:	66 23       	and	r22, r22
    25fc:	99 f0       	breq	.+38     	; 0x2624 <_ZN5Print5printEPK19__FlashStringHelper+0x3e>
    25fe:	8c 01       	movw	r16, r24
    2600:	e1 2c       	mov	r14, r1
    2602:	f1 2c       	mov	r15, r1
    n += write(c);
    2604:	d8 01       	movw	r26, r16
    2606:	ed 91       	ld	r30, X+
    2608:	fc 91       	ld	r31, X
    260a:	01 90       	ld	r0, Z+
    260c:	f0 81       	ld	r31, Z
    260e:	e0 2d       	mov	r30, r0
    2610:	c8 01       	movw	r24, r16
    2612:	09 95       	icall
    2614:	e8 0e       	add	r14, r24
    2616:	f9 1e       	adc	r15, r25
size_t Print::print(const __FlashStringHelper *ifsh)
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    2618:	fe 01       	movw	r30, r28
    261a:	64 91       	lpm	r22, Z
    261c:	21 96       	adiw	r28, 0x01	; 1
    if (c == 0) break;
    261e:	61 11       	cpse	r22, r1
    2620:	f1 cf       	rjmp	.-30     	; 0x2604 <_ZN5Print5printEPK19__FlashStringHelper+0x1e>
    2622:	02 c0       	rjmp	.+4      	; 0x2628 <_ZN5Print5printEPK19__FlashStringHelper+0x42>
}

size_t Print::print(const __FlashStringHelper *ifsh)
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
    2624:	e1 2c       	mov	r14, r1
    2626:	f1 2c       	mov	r15, r1
    unsigned char c = pgm_read_byte(p++);
    if (c == 0) break;
    n += write(c);
  }
  return n;
}
    2628:	c7 01       	movw	r24, r14
    262a:	df 91       	pop	r29
    262c:	cf 91       	pop	r28
    262e:	1f 91       	pop	r17
    2630:	0f 91       	pop	r16
    2632:	ff 90       	pop	r15
    2634:	ef 90       	pop	r14
    2636:	08 95       	ret

00002638 <_ZN5Print5printEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    2638:	61 15       	cp	r22, r1
    263a:	71 05       	cpc	r23, r1
    263c:	81 f0       	breq	.+32     	; 0x265e <_ZN5Print5printEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
    263e:	fb 01       	movw	r30, r22
    2640:	01 90       	ld	r0, Z+
    2642:	00 20       	and	r0, r0
    2644:	e9 f7       	brne	.-6      	; 0x2640 <_ZN5Print5printEPKc+0x8>
    2646:	31 97       	sbiw	r30, 0x01	; 1
    2648:	af 01       	movw	r20, r30
    264a:	46 1b       	sub	r20, r22
    264c:	57 0b       	sbc	r21, r23
    264e:	dc 01       	movw	r26, r24
    2650:	ed 91       	ld	r30, X+
    2652:	fc 91       	ld	r31, X
    2654:	02 80       	ldd	r0, Z+2	; 0x02
    2656:	f3 81       	ldd	r31, Z+3	; 0x03
    2658:	e0 2d       	mov	r30, r0
    265a:	09 95       	icall
    265c:	08 95       	ret
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	90 e0       	ldi	r25, 0x00	; 0
}

size_t Print::print(const char str[])
{
  return write(str);
}
    2662:	08 95       	ret

00002664 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
    2664:	dc 01       	movw	r26, r24
    2666:	ed 91       	ld	r30, X+
    2668:	fc 91       	ld	r31, X
    266a:	01 90       	ld	r0, Z+
    266c:	f0 81       	ld	r31, Z
    266e:	e0 2d       	mov	r30, r0
    2670:	09 95       	icall
}
    2672:	08 95       	ret

00002674 <_ZN5Print7printlnEv>:
      return write((const uint8_t *)str, strlen(str));
    2674:	dc 01       	movw	r26, r24
    2676:	ed 91       	ld	r30, X+
    2678:	fc 91       	ld	r31, X
    267a:	02 80       	ldd	r0, Z+2	; 0x02
    267c:	f3 81       	ldd	r31, Z+3	; 0x03
    267e:	e0 2d       	mov	r30, r0
    2680:	42 e0       	ldi	r20, 0x02	; 2
    2682:	50 e0       	ldi	r21, 0x00	; 0
    2684:	6f ee       	ldi	r22, 0xEF	; 239
    2686:	71 e0       	ldi	r23, 0x01	; 1
    2688:	09 95       	icall
}

size_t Print::println(void)
{
  return write("\r\n");
}
    268a:	08 95       	ret

0000268c <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
    268c:	0f 93       	push	r16
    268e:	1f 93       	push	r17
    2690:	cf 93       	push	r28
    2692:	df 93       	push	r29
    2694:	ec 01       	movw	r28, r24
  size_t n = print(ifsh);
    2696:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <_ZN5Print5printEPK19__FlashStringHelper>
    269a:	8c 01       	movw	r16, r24
  n += println();
    269c:	ce 01       	movw	r24, r28
    269e:	0e 94 3a 13 	call	0x2674	; 0x2674 <_ZN5Print7printlnEv>
  return n;
}
    26a2:	80 0f       	add	r24, r16
    26a4:	91 1f       	adc	r25, r17
    26a6:	df 91       	pop	r29
    26a8:	cf 91       	pop	r28
    26aa:	1f 91       	pop	r17
    26ac:	0f 91       	pop	r16
    26ae:	08 95       	ret

000026b0 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    26b0:	4f 92       	push	r4
    26b2:	5f 92       	push	r5
    26b4:	6f 92       	push	r6
    26b6:	7f 92       	push	r7
    26b8:	9f 92       	push	r9
    26ba:	af 92       	push	r10
    26bc:	bf 92       	push	r11
    26be:	cf 92       	push	r12
    26c0:	df 92       	push	r13
    26c2:	ef 92       	push	r14
    26c4:	ff 92       	push	r15
    26c6:	0f 93       	push	r16
    26c8:	1f 93       	push	r17
    26ca:	cf 93       	push	r28
    26cc:	df 93       	push	r29
    26ce:	cd b7       	in	r28, 0x3d	; 61
    26d0:	de b7       	in	r29, 0x3e	; 62
    26d2:	a1 97       	sbiw	r28, 0x21	; 33
    26d4:	0f b6       	in	r0, 0x3f	; 63
    26d6:	f8 94       	cli
    26d8:	de bf       	out	0x3e, r29	; 62
    26da:	0f be       	out	0x3f, r0	; 63
    26dc:	cd bf       	out	0x3d, r28	; 61
    26de:	5c 01       	movw	r10, r24
    26e0:	6a 01       	movw	r12, r20
    26e2:	7b 01       	movw	r14, r22
    26e4:	92 2e       	mov	r9, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    26e6:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	82 17       	cp	r24, r18
    26ec:	20 f0       	brcs	.+8      	; 0x26f6 <_ZN5Print11printNumberEmh+0x46>
    26ee:	0f 2e       	mov	r0, r31
    26f0:	fa e0       	ldi	r31, 0x0A	; 10
    26f2:	9f 2e       	mov	r9, r31
    26f4:	f0 2d       	mov	r31, r0
    26f6:	8e 01       	movw	r16, r28
    26f8:	0f 5d       	subi	r16, 0xDF	; 223
    26fa:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    unsigned long m = n;
    n /= base;
    26fc:	49 2c       	mov	r4, r9
    26fe:	51 2c       	mov	r5, r1
    2700:	61 2c       	mov	r6, r1
    2702:	71 2c       	mov	r7, r1
    2704:	c7 01       	movw	r24, r14
    2706:	b6 01       	movw	r22, r12
    2708:	a3 01       	movw	r20, r6
    270a:	92 01       	movw	r18, r4
    270c:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__udivmodsi4>
    char c = m - base * n;
    2710:	8c 2d       	mov	r24, r12
    2712:	92 9e       	mul	r9, r18
    2714:	80 19       	sub	r24, r0
    2716:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    2718:	01 50       	subi	r16, 0x01	; 1
    271a:	11 09       	sbc	r17, r1
    271c:	8a 30       	cpi	r24, 0x0A	; 10
    271e:	10 f4       	brcc	.+4      	; 0x2724 <_ZN5Print11printNumberEmh+0x74>
    2720:	80 5d       	subi	r24, 0xD0	; 208
    2722:	01 c0       	rjmp	.+2      	; 0x2726 <_ZN5Print11printNumberEmh+0x76>
    2724:	89 5c       	subi	r24, 0xC9	; 201
    2726:	d8 01       	movw	r26, r16
    2728:	8c 93       	st	X, r24
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    272a:	c2 2e       	mov	r12, r18
    272c:	d3 2e       	mov	r13, r19
    272e:	e4 2e       	mov	r14, r20
    2730:	f5 2e       	mov	r15, r21
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    2732:	c1 14       	cp	r12, r1
    2734:	d1 04       	cpc	r13, r1
    2736:	e1 04       	cpc	r14, r1
    2738:	f1 04       	cpc	r15, r1
    273a:	21 f7       	brne	.-56     	; 0x2704 <_ZN5Print11printNumberEmh+0x54>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    273c:	01 15       	cp	r16, r1
    273e:	11 05       	cpc	r17, r1
    2740:	91 f0       	breq	.+36     	; 0x2766 <_ZN5Print11printNumberEmh+0xb6>
      return write((const uint8_t *)str, strlen(str));
    2742:	f8 01       	movw	r30, r16
    2744:	01 90       	ld	r0, Z+
    2746:	00 20       	and	r0, r0
    2748:	e9 f7       	brne	.-6      	; 0x2744 <_ZN5Print11printNumberEmh+0x94>
    274a:	31 97       	sbiw	r30, 0x01	; 1
    274c:	af 01       	movw	r20, r30
    274e:	40 1b       	sub	r20, r16
    2750:	51 0b       	sbc	r21, r17
    2752:	d5 01       	movw	r26, r10
    2754:	ed 91       	ld	r30, X+
    2756:	fc 91       	ld	r31, X
    2758:	02 80       	ldd	r0, Z+2	; 0x02
    275a:	f3 81       	ldd	r31, Z+3	; 0x03
    275c:	e0 2d       	mov	r30, r0
    275e:	b8 01       	movw	r22, r16
    2760:	c5 01       	movw	r24, r10
    2762:	09 95       	icall
    2764:	02 c0       	rjmp	.+4      	; 0x276a <_ZN5Print11printNumberEmh+0xba>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	90 e0       	ldi	r25, 0x00	; 0
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
    276a:	a1 96       	adiw	r28, 0x21	; 33
    276c:	0f b6       	in	r0, 0x3f	; 63
    276e:	f8 94       	cli
    2770:	de bf       	out	0x3e, r29	; 62
    2772:	0f be       	out	0x3f, r0	; 63
    2774:	cd bf       	out	0x3d, r28	; 61
    2776:	df 91       	pop	r29
    2778:	cf 91       	pop	r28
    277a:	1f 91       	pop	r17
    277c:	0f 91       	pop	r16
    277e:	ff 90       	pop	r15
    2780:	ef 90       	pop	r14
    2782:	df 90       	pop	r13
    2784:	cf 90       	pop	r12
    2786:	bf 90       	pop	r11
    2788:	af 90       	pop	r10
    278a:	9f 90       	pop	r9
    278c:	7f 90       	pop	r7
    278e:	6f 90       	pop	r6
    2790:	5f 90       	pop	r5
    2792:	4f 90       	pop	r4
    2794:	08 95       	ret

00002796 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    2796:	21 15       	cp	r18, r1
    2798:	31 05       	cpc	r19, r1
    279a:	49 f4       	brne	.+18     	; 0x27ae <_ZN5Print5printEmi+0x18>
    279c:	dc 01       	movw	r26, r24
    279e:	ed 91       	ld	r30, X+
    27a0:	fc 91       	ld	r31, X
    27a2:	01 90       	ld	r0, Z+
    27a4:	f0 81       	ld	r31, Z
    27a6:	e0 2d       	mov	r30, r0
    27a8:	64 2f       	mov	r22, r20
    27aa:	09 95       	icall
    27ac:	08 95       	ret
  else return printNumber(n, base);
    27ae:	0e 94 58 13 	call	0x26b0	; 0x26b0 <_ZN5Print11printNumberEmh>
}
    27b2:	08 95       	ret

000027b4 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    27b4:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    27b6:	46 2f       	mov	r20, r22
    27b8:	50 e0       	ldi	r21, 0x00	; 0
    27ba:	60 e0       	ldi	r22, 0x00	; 0
    27bc:	70 e0       	ldi	r23, 0x00	; 0
    27be:	0e 94 cb 13 	call	0x2796	; 0x2796 <_ZN5Print5printEmi>
}
    27c2:	08 95       	ret

000027c4 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    27c4:	cf 93       	push	r28
  uint8_t sreg = SREG;
    27c6:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    27c8:	f8 94       	cli
  if (!initialized) {
    27ca:	80 91 d5 02 	lds	r24, 0x02D5
    27ce:	81 11       	cpse	r24, r1
    27d0:	27 c0       	rjmp	.+78     	; 0x2820 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    27d2:	e6 ea       	ldi	r30, 0xA6	; 166
    27d4:	f5 e0       	ldi	r31, 0x05	; 5
    27d6:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    27d8:	e2 e9       	ldi	r30, 0x92	; 146
    27da:	f5 e0       	ldi	r31, 0x05	; 5
    27dc:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    27de:	e8 2f       	mov	r30, r24
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	ee 0f       	add	r30, r30
    27e4:	ff 1f       	adc	r31, r31
    27e6:	e6 54       	subi	r30, 0x46	; 70
    27e8:	fa 4f       	sbci	r31, 0xFA	; 250
    27ea:	a5 91       	lpm	r26, Z+
    27ec:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    27ee:	ec 91       	ld	r30, X
    27f0:	e9 23       	and	r30, r25
    27f2:	21 f4       	brne	.+8      	; 0x27fc <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    27f4:	61 e0       	ldi	r22, 0x01	; 1
    27f6:	8a e0       	ldi	r24, 0x0A	; 10
    27f8:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    27fc:	61 e0       	ldi	r22, 0x01	; 1
    27fe:	8a e0       	ldi	r24, 0x0A	; 10
    2800:	0e 94 c7 14 	call	0x298e	; 0x298e <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    2804:	8c b5       	in	r24, 0x2c	; 44
    2806:	80 61       	ori	r24, 0x10	; 16
    2808:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    280a:	8c b5       	in	r24, 0x2c	; 44
    280c:	80 64       	ori	r24, 0x40	; 64
    280e:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    2810:	61 e0       	ldi	r22, 0x01	; 1
    2812:	8d e0       	ldi	r24, 0x0D	; 13
    2814:	0e 94 c7 14 	call	0x298e	; 0x298e <pinMode>
    pinMode(MOSI, OUTPUT);
    2818:	61 e0       	ldi	r22, 0x01	; 1
    281a:	8b e0       	ldi	r24, 0x0B	; 11
    281c:	0e 94 c7 14 	call	0x298e	; 0x298e <pinMode>
  }
  initialized++; // reference count
    2820:	80 91 d5 02 	lds	r24, 0x02D5
    2824:	8f 5f       	subi	r24, 0xFF	; 255
    2826:	80 93 d5 02 	sts	0x02D5, r24
  SREG = sreg;
    282a:	cf bf       	out	0x3f, r28	; 63
}
    282c:	cf 91       	pop	r28
    282e:	08 95       	ret

00002830 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
    2830:	1f 92       	push	r1
    2832:	0f 92       	push	r0
    2834:	0f b6       	in	r0, 0x3f	; 63
    2836:	0f 92       	push	r0
    2838:	11 24       	eor	r1, r1
    283a:	2f 93       	push	r18
    283c:	3f 93       	push	r19
    283e:	4f 93       	push	r20
    2840:	5f 93       	push	r21
    2842:	6f 93       	push	r22
    2844:	7f 93       	push	r23
    2846:	8f 93       	push	r24
    2848:	9f 93       	push	r25
    284a:	af 93       	push	r26
    284c:	bf 93       	push	r27
    284e:	ef 93       	push	r30
    2850:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    2852:	80 91 d6 02 	lds	r24, 0x02D6
    2856:	90 91 d7 02 	lds	r25, 0x02D7
    285a:	89 2b       	or	r24, r25
    285c:	29 f0       	breq	.+10     	; 0x2868 <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
    285e:	e0 91 d6 02 	lds	r30, 0x02D6
    2862:	f0 91 d7 02 	lds	r31, 0x02D7
    2866:	09 95       	icall
}
    2868:	ff 91       	pop	r31
    286a:	ef 91       	pop	r30
    286c:	bf 91       	pop	r27
    286e:	af 91       	pop	r26
    2870:	9f 91       	pop	r25
    2872:	8f 91       	pop	r24
    2874:	7f 91       	pop	r23
    2876:	6f 91       	pop	r22
    2878:	5f 91       	pop	r21
    287a:	4f 91       	pop	r20
    287c:	3f 91       	pop	r19
    287e:	2f 91       	pop	r18
    2880:	0f 90       	pop	r0
    2882:	0f be       	out	0x3f, r0	; 63
    2884:	0f 90       	pop	r0
    2886:	1f 90       	pop	r1
    2888:	18 95       	reti

0000288a <__vector_2>:

ISR(INT1_vect) {
    288a:	1f 92       	push	r1
    288c:	0f 92       	push	r0
    288e:	0f b6       	in	r0, 0x3f	; 63
    2890:	0f 92       	push	r0
    2892:	11 24       	eor	r1, r1
    2894:	2f 93       	push	r18
    2896:	3f 93       	push	r19
    2898:	4f 93       	push	r20
    289a:	5f 93       	push	r21
    289c:	6f 93       	push	r22
    289e:	7f 93       	push	r23
    28a0:	8f 93       	push	r24
    28a2:	9f 93       	push	r25
    28a4:	af 93       	push	r26
    28a6:	bf 93       	push	r27
    28a8:	ef 93       	push	r30
    28aa:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    28ac:	80 91 d8 02 	lds	r24, 0x02D8
    28b0:	90 91 d9 02 	lds	r25, 0x02D9
    28b4:	89 2b       	or	r24, r25
    28b6:	29 f0       	breq	.+10     	; 0x28c2 <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
    28b8:	e0 91 d8 02 	lds	r30, 0x02D8
    28bc:	f0 91 d9 02 	lds	r31, 0x02D9
    28c0:	09 95       	icall
}
    28c2:	ff 91       	pop	r31
    28c4:	ef 91       	pop	r30
    28c6:	bf 91       	pop	r27
    28c8:	af 91       	pop	r26
    28ca:	9f 91       	pop	r25
    28cc:	8f 91       	pop	r24
    28ce:	7f 91       	pop	r23
    28d0:	6f 91       	pop	r22
    28d2:	5f 91       	pop	r21
    28d4:	4f 91       	pop	r20
    28d6:	3f 91       	pop	r19
    28d8:	2f 91       	pop	r18
    28da:	0f 90       	pop	r0
    28dc:	0f be       	out	0x3f, r0	; 63
    28de:	0f 90       	pop	r0
    28e0:	1f 90       	pop	r1
    28e2:	18 95       	reti

000028e4 <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    28e4:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    28e6:	f8 94       	cli
	m = timer0_overflow_count;
    28e8:	80 91 da 02 	lds	r24, 0x02DA
    28ec:	90 91 db 02 	lds	r25, 0x02DB
    28f0:	a0 91 dc 02 	lds	r26, 0x02DC
    28f4:	b0 91 dd 02 	lds	r27, 0x02DD
#if defined(TCNT0)
	t = TCNT0;
    28f8:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    28fa:	a8 9b       	sbis	0x15, 0	; 21
    28fc:	05 c0       	rjmp	.+10     	; 0x2908 <micros+0x24>
    28fe:	2f 3f       	cpi	r18, 0xFF	; 255
    2900:	19 f0       	breq	.+6      	; 0x2908 <micros+0x24>
		m++;
    2902:	01 96       	adiw	r24, 0x01	; 1
    2904:	a1 1d       	adc	r26, r1
    2906:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2908:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    290a:	ba 2f       	mov	r27, r26
    290c:	a9 2f       	mov	r26, r25
    290e:	98 2f       	mov	r25, r24
    2910:	88 27       	eor	r24, r24
    2912:	82 0f       	add	r24, r18
    2914:	91 1d       	adc	r25, r1
    2916:	a1 1d       	adc	r26, r1
    2918:	b1 1d       	adc	r27, r1
    291a:	bc 01       	movw	r22, r24
    291c:	cd 01       	movw	r24, r26
    291e:	66 0f       	add	r22, r22
    2920:	77 1f       	adc	r23, r23
    2922:	88 1f       	adc	r24, r24
    2924:	99 1f       	adc	r25, r25
    2926:	66 0f       	add	r22, r22
    2928:	77 1f       	adc	r23, r23
    292a:	88 1f       	adc	r24, r24
    292c:	99 1f       	adc	r25, r25
}
    292e:	08 95       	ret

00002930 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2930:	83 30       	cpi	r24, 0x03	; 3
    2932:	69 f0       	breq	.+26     	; 0x294e <turnOffPWM+0x1e>
    2934:	28 f4       	brcc	.+10     	; 0x2940 <turnOffPWM+0x10>
    2936:	81 30       	cpi	r24, 0x01	; 1
    2938:	b1 f0       	breq	.+44     	; 0x2966 <turnOffPWM+0x36>
    293a:	82 30       	cpi	r24, 0x02	; 2
    293c:	c1 f0       	breq	.+48     	; 0x296e <turnOffPWM+0x3e>
    293e:	08 95       	ret
    2940:	87 30       	cpi	r24, 0x07	; 7
    2942:	c9 f0       	breq	.+50     	; 0x2976 <turnOffPWM+0x46>
    2944:	88 30       	cpi	r24, 0x08	; 8
    2946:	e9 f0       	breq	.+58     	; 0x2982 <turnOffPWM+0x52>
    2948:	84 30       	cpi	r24, 0x04	; 4
    294a:	01 f5       	brne	.+64     	; 0x298c <turnOffPWM+0x5c>
    294c:	06 c0       	rjmp	.+12     	; 0x295a <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    294e:	e0 e8       	ldi	r30, 0x80	; 128
    2950:	f0 e0       	ldi	r31, 0x00	; 0
    2952:	80 81       	ld	r24, Z
    2954:	8f 77       	andi	r24, 0x7F	; 127
    2956:	80 83       	st	Z, r24
    2958:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    295a:	e0 e8       	ldi	r30, 0x80	; 128
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	80 81       	ld	r24, Z
    2960:	8f 7d       	andi	r24, 0xDF	; 223
    2962:	80 83       	st	Z, r24
    2964:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2966:	84 b5       	in	r24, 0x24	; 36
    2968:	8f 77       	andi	r24, 0x7F	; 127
    296a:	84 bd       	out	0x24, r24	; 36
    296c:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    296e:	84 b5       	in	r24, 0x24	; 36
    2970:	8f 7d       	andi	r24, 0xDF	; 223
    2972:	84 bd       	out	0x24, r24	; 36
    2974:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2976:	e0 eb       	ldi	r30, 0xB0	; 176
    2978:	f0 e0       	ldi	r31, 0x00	; 0
    297a:	80 81       	ld	r24, Z
    297c:	8f 77       	andi	r24, 0x7F	; 127
    297e:	80 83       	st	Z, r24
    2980:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2982:	e0 eb       	ldi	r30, 0xB0	; 176
    2984:	f0 e0       	ldi	r31, 0x00	; 0
    2986:	80 81       	ld	r24, Z
    2988:	8f 7d       	andi	r24, 0xDF	; 223
    298a:	80 83       	st	Z, r24
    298c:	08 95       	ret

0000298e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    298e:	cf 93       	push	r28
    2990:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	fc 01       	movw	r30, r24
    2996:	e8 57       	subi	r30, 0x78	; 120
    2998:	fa 4f       	sbci	r31, 0xFA	; 250
    299a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    299c:	fc 01       	movw	r30, r24
    299e:	e4 56       	subi	r30, 0x64	; 100
    29a0:	fa 4f       	sbci	r31, 0xFA	; 250
    29a2:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    29a4:	88 23       	and	r24, r24
    29a6:	79 f1       	breq	.+94     	; 0x2a06 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	88 0f       	add	r24, r24
    29ac:	99 1f       	adc	r25, r25
    29ae:	fc 01       	movw	r30, r24
    29b0:	e6 54       	subi	r30, 0x46	; 70
    29b2:	fa 4f       	sbci	r31, 0xFA	; 250
    29b4:	a5 91       	lpm	r26, Z+
    29b6:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    29b8:	fc 01       	movw	r30, r24
    29ba:	e0 55       	subi	r30, 0x50	; 80
    29bc:	fa 4f       	sbci	r31, 0xFA	; 250
    29be:	c5 91       	lpm	r28, Z+
    29c0:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    29c2:	61 11       	cpse	r22, r1
    29c4:	0c c0       	rjmp	.+24     	; 0x29de <pinMode+0x50>
		uint8_t oldSREG = SREG;
    29c6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    29c8:	f8 94       	cli
		*reg &= ~bit;
    29ca:	8c 91       	ld	r24, X
    29cc:	e2 2f       	mov	r30, r18
    29ce:	e0 95       	com	r30
    29d0:	8e 23       	and	r24, r30
    29d2:	8c 93       	st	X, r24
		*out &= ~bit;
    29d4:	28 81       	ld	r18, Y
    29d6:	e2 23       	and	r30, r18
    29d8:	e8 83       	st	Y, r30
		SREG = oldSREG;
    29da:	9f bf       	out	0x3f, r25	; 63
    29dc:	14 c0       	rjmp	.+40     	; 0x2a06 <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
    29de:	62 30       	cpi	r22, 0x02	; 2
    29e0:	61 f4       	brne	.+24     	; 0x29fa <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    29e2:	9f b7       	in	r25, 0x3f	; 63
                cli();
    29e4:	f8 94       	cli
		*reg &= ~bit;
    29e6:	3c 91       	ld	r19, X
    29e8:	82 2f       	mov	r24, r18
    29ea:	80 95       	com	r24
    29ec:	83 23       	and	r24, r19
    29ee:	8c 93       	st	X, r24
		*out |= bit;
    29f0:	e8 81       	ld	r30, Y
    29f2:	e2 2b       	or	r30, r18
    29f4:	e8 83       	st	Y, r30
		SREG = oldSREG;
    29f6:	9f bf       	out	0x3f, r25	; 63
    29f8:	06 c0       	rjmp	.+12     	; 0x2a06 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    29fa:	8f b7       	in	r24, 0x3f	; 63
                cli();
    29fc:	f8 94       	cli
		*reg |= bit;
    29fe:	ec 91       	ld	r30, X
    2a00:	e2 2b       	or	r30, r18
    2a02:	ec 93       	st	X, r30
		SREG = oldSREG;
    2a04:	8f bf       	out	0x3f, r24	; 63
	}
}
    2a06:	df 91       	pop	r29
    2a08:	cf 91       	pop	r28
    2a0a:	08 95       	ret

00002a0c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2a0c:	1f 93       	push	r17
    2a0e:	cf 93       	push	r28
    2a10:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2a12:	28 2f       	mov	r18, r24
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	f9 01       	movw	r30, r18
    2a18:	ec 58       	subi	r30, 0x8C	; 140
    2a1a:	fa 4f       	sbci	r31, 0xFA	; 250
    2a1c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2a1e:	f9 01       	movw	r30, r18
    2a20:	e8 57       	subi	r30, 0x78	; 120
    2a22:	fa 4f       	sbci	r31, 0xFA	; 250
    2a24:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    2a26:	f9 01       	movw	r30, r18
    2a28:	e4 56       	subi	r30, 0x64	; 100
    2a2a:	fa 4f       	sbci	r31, 0xFA	; 250
    2a2c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2a2e:	cc 23       	and	r28, r28
    2a30:	d1 f0       	breq	.+52     	; 0x2a66 <digitalWrite+0x5a>
    2a32:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2a34:	81 11       	cpse	r24, r1
    2a36:	0e 94 98 14 	call	0x2930	; 0x2930 <turnOffPWM>

	out = portOutputRegister(port);
    2a3a:	ec 2f       	mov	r30, r28
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	ee 0f       	add	r30, r30
    2a40:	ff 1f       	adc	r31, r31
    2a42:	e0 55       	subi	r30, 0x50	; 80
    2a44:	fa 4f       	sbci	r31, 0xFA	; 250
    2a46:	a5 91       	lpm	r26, Z+
    2a48:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2a4a:	8f b7       	in	r24, 0x3f	; 63
	cli();
    2a4c:	f8 94       	cli

	if (val == LOW) {
    2a4e:	d1 11       	cpse	r29, r1
    2a50:	06 c0       	rjmp	.+12     	; 0x2a5e <digitalWrite+0x52>
		*out &= ~bit;
    2a52:	9c 91       	ld	r25, X
    2a54:	e1 2f       	mov	r30, r17
    2a56:	e0 95       	com	r30
    2a58:	e9 23       	and	r30, r25
    2a5a:	ec 93       	st	X, r30
    2a5c:	03 c0       	rjmp	.+6      	; 0x2a64 <digitalWrite+0x58>
	} else {
		*out |= bit;
    2a5e:	ec 91       	ld	r30, X
    2a60:	e1 2b       	or	r30, r17
    2a62:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    2a64:	8f bf       	out	0x3f, r24	; 63
}
    2a66:	df 91       	pop	r29
    2a68:	cf 91       	pop	r28
    2a6a:	1f 91       	pop	r17
    2a6c:	08 95       	ret

00002a6e <__udivmodsi4>:
    2a6e:	a1 e2       	ldi	r26, 0x21	; 33
    2a70:	1a 2e       	mov	r1, r26
    2a72:	aa 1b       	sub	r26, r26
    2a74:	bb 1b       	sub	r27, r27
    2a76:	fd 01       	movw	r30, r26
    2a78:	0d c0       	rjmp	.+26     	; 0x2a94 <__udivmodsi4_ep>

00002a7a <__udivmodsi4_loop>:
    2a7a:	aa 1f       	adc	r26, r26
    2a7c:	bb 1f       	adc	r27, r27
    2a7e:	ee 1f       	adc	r30, r30
    2a80:	ff 1f       	adc	r31, r31
    2a82:	a2 17       	cp	r26, r18
    2a84:	b3 07       	cpc	r27, r19
    2a86:	e4 07       	cpc	r30, r20
    2a88:	f5 07       	cpc	r31, r21
    2a8a:	20 f0       	brcs	.+8      	; 0x2a94 <__udivmodsi4_ep>
    2a8c:	a2 1b       	sub	r26, r18
    2a8e:	b3 0b       	sbc	r27, r19
    2a90:	e4 0b       	sbc	r30, r20
    2a92:	f5 0b       	sbc	r31, r21

00002a94 <__udivmodsi4_ep>:
    2a94:	66 1f       	adc	r22, r22
    2a96:	77 1f       	adc	r23, r23
    2a98:	88 1f       	adc	r24, r24
    2a9a:	99 1f       	adc	r25, r25
    2a9c:	1a 94       	dec	r1
    2a9e:	69 f7       	brne	.-38     	; 0x2a7a <__udivmodsi4_loop>
    2aa0:	60 95       	com	r22
    2aa2:	70 95       	com	r23
    2aa4:	80 95       	com	r24
    2aa6:	90 95       	com	r25
    2aa8:	9b 01       	movw	r18, r22
    2aaa:	ac 01       	movw	r20, r24
    2aac:	bd 01       	movw	r22, r26
    2aae:	cf 01       	movw	r24, r30
    2ab0:	08 95       	ret

00002ab2 <__tablejump2__>:
    2ab2:	ee 0f       	add	r30, r30
    2ab4:	ff 1f       	adc	r31, r31
    2ab6:	05 90       	lpm	r0, Z+
    2ab8:	f4 91       	lpm	r31, Z
    2aba:	e0 2d       	mov	r30, r0
    2abc:	09 94       	ijmp

00002abe <abort>:
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	f8 94       	cli
    2ac4:	0c 94 64 15 	jmp	0x2ac8	; 0x2ac8 <_exit>

00002ac8 <_exit>:
    2ac8:	f8 94       	cli

00002aca <__stop_program>:
    2aca:	ff cf       	rjmp	.-2      	; 0x2aca <__stop_program>
